{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/associations/AssociationsByMember.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/associations/AssociationsByMember.vue","mtime":1574205365000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getAssociation } from '@/users/users.gql'\nimport AssociationsDataTable from '@/components/AssociationsDataTable.vue'\nimport { mapGetters, mapState, mapActions } from 'vuex'\nimport { StoreGetters } from '@/store'\nimport { UsersActions } from '@/users/UsersStore'\n\nexport default {\n  components: {\n    AssociationsDataTable\n  },\n  data () {\n    return {\n      association: {},\n      headers: [\n        { text: 'Id', value: 'id', sortable: false },\n        { text: 'Member Name', value: 'name', sortable: false },\n        { text: 'Role', value: 'role', sortable: false },\n        { text: 'Rate', value: 'metadata', sortable: false, width: '18%' },\n        { text: 'Actions', sortable: false, width: '20%' }\n      ],\n      id: ~~this.$route.params.id,\n      addDialog: false,\n      displayName: null\n    }\n  },\n  apollo: {\n    associations: {\n      query: getAssociation,\n      variables() {\n        return {\n          input: {\n            ids: [this.id]\n          }\n        }\n      },\n      update(data) {\n        const { members: { nodes } } = data\n        const { associations } = nodes[0]\n        if (!associations[0]) {\n          this.usersViewing.forEach(result => {\n            if (!displayName && result.id === this.id) {\n              this.displayName = result.displayName\n            }\n          })\n\n          return []\n        }\n        const { member: { displayName } } = associations[0]\n\n        this.displayName = displayName\n\n        if (Array.isArray(associations)) {\n          const parsedAssociations = associations.map(association => {\n            const {\n              association: assn,\n              associationId\n            } = association\n\n            return {\n              id: associationId,\n              key: assn.key,\n              name: assn.name,\n              type: assn.type.name\n            }\n          })\n          return parsedAssociations\n        } else {\n          return this.placeHolderName ? [{ name: this.placeHolderName }] : []\n        }\n      },\n      fetchPolicy: 'network-only'\n    }\n  },\n  methods: {\n    ...mapActions({\n      userStartViewing: UsersActions.START_VIEWING\n    }),\n    handleEdittingMetaDataArr(index, inputValue) {\n      this.edittingMetaDataArr[index].metadata.percent = inputValue\n    },\n    removeConfirm(item) {\n      this.removeItem = item\n      this.removeDialog = true\n    },\n    async view(props) {\n      const { item: { key } } = props\n      this.$router.push(`/associations/id/${key}`)\n    }\n  },\n  computed: {\n    ...mapGetters({\n      permissions: StoreGetters.permissions\n    }),\n    ...mapState({\n      tenantId: state => state.user.principal.tenantId,\n      usersViewing: state => state.users.viewing\n    })\n  },\n  watch: {\n    '$route' (to, from) {\n      const { params: { id: toId } } = to\n      this.id = ~~toId\n    }\n  }\n}\n",{"version":3,"sources":["AssociationsByMember.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkfile":"AssociationsByMember.vue","sourceRoot":"src/views/associations","sourcesContent":["<template>\n  <v-layout column ma-5>\n    <v-card>\n      <v-card-title class=\"secondary white--text\" primary-title style=\"justify-content: center;\">\n        <h1><span v-if=\"associations\">{{displayName ? 'Associations containing ' + displayName : ''}}</span></h1>\n      </v-card-title>\n      <AssociationsDataTable\n        :associations=\"associations\"\n        :currentScreen=\"'associationsByMember'\"\n        @handleEdittingMetaDataArr=\"handleEdittingMetaDataArr\"\n        @removeConfirm=\"removeConfirm\"\n        @view=\"view\"\n      />\n    </v-card>\n  </v-layout>\n</template>\n\n<script>\nimport { getAssociation } from '@/users/users.gql'\nimport AssociationsDataTable from '@/components/AssociationsDataTable.vue'\nimport { mapGetters, mapState, mapActions } from 'vuex'\nimport { StoreGetters } from '@/store'\nimport { UsersActions } from '@/users/UsersStore'\n\nexport default {\n  components: {\n    AssociationsDataTable\n  },\n  data () {\n    return {\n      association: {},\n      headers: [\n        { text: 'Id', value: 'id', sortable: false },\n        { text: 'Member Name', value: 'name', sortable: false },\n        { text: 'Role', value: 'role', sortable: false },\n        { text: 'Rate', value: 'metadata', sortable: false, width: '18%' },\n        { text: 'Actions', sortable: false, width: '20%' }\n      ],\n      id: ~~this.$route.params.id,\n      addDialog: false,\n      displayName: null\n    }\n  },\n  apollo: {\n    associations: {\n      query: getAssociation,\n      variables() {\n        return {\n          input: {\n            ids: [this.id]\n          }\n        }\n      },\n      update(data) {\n        const { members: { nodes } } = data\n        const { associations } = nodes[0]\n        if (!associations[0]) {\n          this.usersViewing.forEach(result => {\n            if (!displayName && result.id === this.id) {\n              this.displayName = result.displayName\n            }\n          })\n\n          return []\n        }\n        const { member: { displayName } } = associations[0]\n\n        this.displayName = displayName\n\n        if (Array.isArray(associations)) {\n          const parsedAssociations = associations.map(association => {\n            const {\n              association: assn,\n              associationId\n            } = association\n\n            return {\n              id: associationId,\n              key: assn.key,\n              name: assn.name,\n              type: assn.type.name\n            }\n          })\n          return parsedAssociations\n        } else {\n          return this.placeHolderName ? [{ name: this.placeHolderName }] : []\n        }\n      },\n      fetchPolicy: 'network-only'\n    }\n  },\n  methods: {\n    ...mapActions({\n      userStartViewing: UsersActions.START_VIEWING\n    }),\n    handleEdittingMetaDataArr(index, inputValue) {\n      this.edittingMetaDataArr[index].metadata.percent = inputValue\n    },\n    removeConfirm(item) {\n      this.removeItem = item\n      this.removeDialog = true\n    },\n    async view(props) {\n      const { item: { key } } = props\n      this.$router.push(`/associations/id/${key}`)\n    }\n  },\n  computed: {\n    ...mapGetters({\n      permissions: StoreGetters.permissions\n    }),\n    ...mapState({\n      tenantId: state => state.user.principal.tenantId,\n      usersViewing: state => state.users.viewing\n    })\n  },\n  watch: {\n    '$route' (to, from) {\n      const { params: { id: toId } } = to\n      this.id = ~~toId\n    }\n  }\n}\n</script>\n\n<style>\ninput {\n  padding: 0 !important;\n}\n\n.v-input__slot {\n  margin-bottom: 0;\n}\n\n.association-table {\n  cursor: default;\n}\n.addbtn.sm {\n  top: -5px !important;\n}\n.addbtn {\n  top: 15px;\n}\n</style>\n"]}]}