{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/users/UserAppointments.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/users/UserAppointments.vue","mtime":1570835920000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport moment from 'moment'\nimport { cloneDeep } from 'lodash'\n\nimport { booking } from '@/appointments/appointments.gql'\nimport { appointmentPayable, getPaymentFromBooking } from '@/payouts/payouts.gql'\n\nimport CreateBooking from '../../components/booking/Create.vue'\n\nexport default {\n  components: { CreateBooking },\n  data() {\n    return {\n      moment,\n      surveys: [],\n      headers: [\n        { text: 'ID', value: 'id', width: '50px' },\n        { text: 'Type', value: 'type', width: '75px' },\n        { text: 'Appointment ID', value: 'scheduled', width: '150px' },\n        { text: 'Start Time', value: 'startTime' },\n        { text: 'End Time', value: 'endTime' },\n        { text: 'Participants', value: 'participants' },\n        { value: 'id', width: '50px', sortable: false }\n      ],\n      payable: {},\n      bookingPayable: {},\n      loadingPayout: false,\n      appointment: [],\n      hostBookings: [],\n      guestBookings: []\n    }\n  },\n  methods: {\n    viewUser(user) {\n      this.$router.push('/members/' + user.id)\n    },\n    editBooking(bookingItem) {\n      const apptId = bookingItem.appointments[0] ? bookingItem.appointments[0].id : ''\n      const bookingId = bookingItem.id\n      this.$router.push(`/appointments/${apptId}_${bookingId}/booking`)\n    },\n    async getPayout(id) {\n      const { data } = await this.$apollo.query({\n        query: appointmentPayable,\n        variables: { appointmentId: id },\n        fetchPolicy: 'network-only'\n      })\n      this.payable = data.getPayableFromAppointment\n    },\n    async getBookingPayable(id) {\n      const { data } = await this.$apollo.query({\n        query: getPaymentFromBooking,\n        variables: { bookingId: id },\n        fetchPolicy: 'network-only'\n      })\n      this.bookingPayable = data.getPaymentFromBooking\n    },\n    async expandRow(props) {\n      props.expanded = !props.expanded\n      if (props.expanded && props.item.appointments[0]) {\n        this.loadingPayout = true\n        props.item.payable = await this.getPayout(props.item.appointments[0].id)\n        this.loadingPayout = false\n      } else if (props.expanded && !props.item.appointments[0]) {\n        props.item.bookingPayable = await this.getBookingPayable(props.item.id)\n      }\n    }\n  },\n  apollo: {\n    hostBookings: {\n      query: booking,\n      variables() {\n        return {\n          input: {\n            hostIds: [this.id]\n          }\n        }\n      },\n      update(response) {\n        return response.bookingSearch.results\n      }\n    },\n    guestBookings: {\n      query: booking,\n      variables() {\n        return {\n          input: {\n            guestIds: [this.id]\n          }\n        }\n      },\n      update(response) {\n        return response.bookingSearch.results\n      }\n    }\n  },\n  computed: {\n    id() {\n      return ~~this.$route.params.id\n    },\n    loaders() {\n      return {\n        bookings: this.$apollo.queries.guestBookings.loading\n      }\n    },\n    allBookings() {\n      return cloneDeep(this.guestBookings.concat(this.hostBookings))\n    }\n  }\n}\n",{"version":3,"sources":["UserAppointments.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"UserAppointments.vue","sourceRoot":"src/views/users","sourcesContent":["<template>\n  <v-flex xs12>\n    <v-container class=\"table-wrapper\">\n      <CreateBooking />\n      <v-data-table\n        :headers=\"headers\"\n        :items=\"allBookings\"\n        :rows-per-page-items=\"[ 15, 30, 50, { text: '$vuetify.dataIterator.rowsPerPageAll', 'value': -1 } ]\"\n      >\n        <v-progress-linear slot=\"progress\" color=\"blue\" indeterminate></v-progress-linear>\n        <template slot=\"items\" slot-scope=\"props\">\n          <tr @click=\"expandRow(props)\">\n            <td>{{ props.item.id }}</td>\n            <td>\n              {{ props.item.type.name }}\n              <v-tooltip bottom v-if=\"props.item.canceled\">\n                <span slot=\"activator\">Canceled</span>\n                <span>\n                  This appointment was canceled for the following reason:\n                  {{ prop.item.canceledReason}}\n                </span>\n              </v-tooltip>\n            </td>\n            <td>{{ props.item.appointments[0] ? props.item.appointments[0].id : '' }}</td>\n            <td>{{ props.item.start | momentDate }}</td>\n            <td>{{ props.item.end | momentDate }}</td>\n            <td>\n              <v-tooltip top>\n                <a slot=\"activator\" @click=\"viewUser(props.item.host)\">{{ props.item.host.displayName }}</a>\n                <span>\n                  MRN: {{ props.item.host.mrn }}\n                  <br>\n                  System ID: {{ props.item.host.id }}\n                  <br>\n                  Email: {{ props.item.host.contactEmail }}\n                  <br>\n                  Participant Type: Host\n                </span>\n              </v-tooltip>\n              <br>\n              <v-tooltip top>\n                <a slot=\"activator\" @click=\"viewUser(props.item.guest)\">{{props.item.guest.displayName}}</a>\n                <span>\n                  MRN: {{ props.item.guest.mrn }}\n                  <br>\n                  System ID: {{ props.item.guest.id }}\n                  <br>\n                  Email: {{ props.item.guest.contactEmail }}\n                  <br>\n                  Participant Type: Guest\n                </span>\n              </v-tooltip>\n            </td>\n            <td>\n              <v-menu offset-y>\n                <v-btn slot=\"activator\" icon>\n                  <v-icon>more_vert</v-icon>\n                </v-btn>\n                <v-list>\n                  <v-list-tile @click=\"editBooking(props.item)\">\n                    <v-list-tile-title>Edit Booking</v-list-tile-title>\n                  </v-list-tile>\n                </v-list>\n              </v-menu>\n            </td>\n          </tr>\n        </template>\n        <template slot=\"no-data\">\n          <div v-if=\"loaders.appointments\">Searching</div>\n          <div v-else>No bookings have been created.</div>\n        </template>\n        <template slot=\"expand\" slot-scope=\"props\">\n          <div v-if=\"props.item.appointments[0]\" class=\"pa-3 appointment-details\">\n            <v-container fluid>\n              <v-layout>\n                <v-flex xs4>\n                  <h4>Schedule:</h4>\n                  <ul>\n                    <li>Scheduled Date: {{props.item.appointments[0].scheduledDate | momentDate}}</li>\n                    <li>Start Time: {{props.item.appointments[0].startTime | momentDate}}</li>\n                    <li>End Time: {{props.item.appointments[0].endTime | momentDate}}</li>\n                    <li>Time Limit: {{props.item.appointments[0].timeLimit}}</li>\n                  </ul>\n                </v-flex>\n                <v-flex xs4>\n                  <h4>Details:</h4>\n                  <ul>\n                    <li>Rating Score: {{props.item.appointments[0].rating ? props.item.appointments[0].rating.score : 'No Score'}}</li>\n                    <li>Comments: {{props.item.appointments[0].comment ? props.item.appointments[0].rating.comment : 'No Comment'}}</li>\n                    <li>Status: {{props.item.status.name}}</li>\n                  </ul>\n                </v-flex>\n                <v-flex v-if=\"!loadingPayout && payable\" xs4>\n                  <h4>Payout:</h4>\n                  <ul>\n                    <li>Amount: {{ (payable.amount / 100) | toCurrency(props.item.currency) }} {{ payable.currency }}</li>\n                    <li>Status: {{ payable.status }}</li>\n                    <li>Description: {{ payable.description }}</li>\n                  </ul>\n                </v-flex>\n                <!-- <v-flex xs4 v-else>\n                  <v-progress-circular indeterminate :size=\"50\" :width=\"5\" color=\"black\"></v-progress-circular>\n                </v-flex> -->\n              </v-layout>\n            </v-container>\n          </div>\n          <v-container v-else>\n            <v-layout>\n              <v-flex xs4>\n                <h4>No appointment</h4>\n              </v-flex>\n              <v-flex v-if=\"!loadingPayout && bookingPayable\" xs4>\n                <h4>Payout:</h4>\n                <ul>\n                  <li>Amount: {{ (bookingPayable.amount / 100) }} {{ bookingPayable.currency }}</li>\n                  <li>Status: {{ bookingPayable.status }}</li>\n                  <li>Description: {{ bookingPayable.description }}</li>\n                </ul>\n              </v-flex>\n            </v-layout>\n          </v-container>\n        </template>\n      </v-data-table>\n    </v-container>\n  </v-flex>\n</template>\n\n<script>\nimport moment from 'moment'\nimport { cloneDeep } from 'lodash'\n\nimport { booking } from '@/appointments/appointments.gql'\nimport { appointmentPayable, getPaymentFromBooking } from '@/payouts/payouts.gql'\n\nimport CreateBooking from '../../components/booking/Create.vue'\n\nexport default {\n  components: { CreateBooking },\n  data() {\n    return {\n      moment,\n      surveys: [],\n      headers: [\n        { text: 'ID', value: 'id', width: '50px' },\n        { text: 'Type', value: 'type', width: '75px' },\n        { text: 'Appointment ID', value: 'scheduled', width: '150px' },\n        { text: 'Start Time', value: 'startTime' },\n        { text: 'End Time', value: 'endTime' },\n        { text: 'Participants', value: 'participants' },\n        { value: 'id', width: '50px', sortable: false }\n      ],\n      payable: {},\n      bookingPayable: {},\n      loadingPayout: false,\n      appointment: [],\n      hostBookings: [],\n      guestBookings: []\n    }\n  },\n  methods: {\n    viewUser(user) {\n      this.$router.push('/members/' + user.id)\n    },\n    editBooking(bookingItem) {\n      const apptId = bookingItem.appointments[0] ? bookingItem.appointments[0].id : ''\n      const bookingId = bookingItem.id\n      this.$router.push(`/appointments/${apptId}_${bookingId}/booking`)\n    },\n    async getPayout(id) {\n      const { data } = await this.$apollo.query({\n        query: appointmentPayable,\n        variables: { appointmentId: id },\n        fetchPolicy: 'network-only'\n      })\n      this.payable = data.getPayableFromAppointment\n    },\n    async getBookingPayable(id) {\n      const { data } = await this.$apollo.query({\n        query: getPaymentFromBooking,\n        variables: { bookingId: id },\n        fetchPolicy: 'network-only'\n      })\n      this.bookingPayable = data.getPaymentFromBooking\n    },\n    async expandRow(props) {\n      props.expanded = !props.expanded\n      if (props.expanded && props.item.appointments[0]) {\n        this.loadingPayout = true\n        props.item.payable = await this.getPayout(props.item.appointments[0].id)\n        this.loadingPayout = false\n      } else if (props.expanded && !props.item.appointments[0]) {\n        props.item.bookingPayable = await this.getBookingPayable(props.item.id)\n      }\n    }\n  },\n  apollo: {\n    hostBookings: {\n      query: booking,\n      variables() {\n        return {\n          input: {\n            hostIds: [this.id]\n          }\n        }\n      },\n      update(response) {\n        return response.bookingSearch.results\n      }\n    },\n    guestBookings: {\n      query: booking,\n      variables() {\n        return {\n          input: {\n            guestIds: [this.id]\n          }\n        }\n      },\n      update(response) {\n        return response.bookingSearch.results\n      }\n    }\n  },\n  computed: {\n    id() {\n      return ~~this.$route.params.id\n    },\n    loaders() {\n      return {\n        bookings: this.$apollo.queries.guestBookings.loading\n      }\n    },\n    allBookings() {\n      return cloneDeep(this.guestBookings.concat(this.hostBookings))\n    }\n  }\n}\n</script>\n\n<style>\n.table-wrapper {\n  background-color: white;\n}\n\n.appointment-details ul li {\n  list-style: none;\n}\n</style>\n"]}]}