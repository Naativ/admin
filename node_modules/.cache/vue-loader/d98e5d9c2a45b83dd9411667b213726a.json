{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/curriculum/LessonDetails.vue?vue&type=style&index=0&id=93102be0&scoped=true&lang=css&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/curriculum/LessonDetails.vue","mtime":1570835920000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.lesson-container {\n  margin: 10px 0;\n  width: 100%;\n}\n.fields {\n  height: 100%;\n  padding: 10px 10px;\n  width: 100%;\n  margin: 10px 10px;\n}\n.card {\n  width: 90%;\n  padding: 20px 10px;\n  margin: 5px 0;\n}\n.center {\n  text-align: center;\n}\n\n.meta {\n  padding: 10px 20px;\n  color: grey;\n}\n",{"version":3,"sources":["LessonDetails.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"LessonDetails.vue","sourceRoot":"src/views/curriculum","sourcesContent":["<template>\n  <v-layout class=\"lesson-container\" column justify-space-around align-center>\n    <v-progress-circular v-if=\"pageLoading\" color=\"blue\" indeterminate></v-progress-circular>\n    <h3>Lesson Info</h3>\n    <v-btn\n      class=\"edit-btn\"\n      v-if=\"!editing\"\n      absolute\n      dark\n      fab\n      top\n      right\n      color=\"pink\"\n      @click=\"editing = true\"\n    >\n      <v-icon>edit</v-icon>\n    </v-btn>\n    <v-speed-dial\n      absolute\n      dark\n      fab\n      top\n      right\n      color=\"pink\"\n      v-model=\"saveSpeedDial\"\n      direction=\"bottom\"\n      :open-on-hover=\"true\"\n      transition=\"slide-y-transition\"\n      :disabled=\"!saving\"\n      v-else\n      class=\"edit-speed-dial\"\n    >\n      <v-btn slot=\"activator\" v-model=\"saveActivator\" color=\"pink\" dark fab>\n        <v-icon>save</v-icon>\n        <v-icon>close</v-icon>\n      </v-btn>\n      <v-btn fab dark small color=\"green\" @click=\"saveData\">\n        <v-icon>check</v-icon>\n      </v-btn>\n      <v-btn fab dark small color=\"red\" @click=\"cancelEdit\">\n        <v-icon>cancel</v-icon>\n      </v-btn>\n    </v-speed-dial>\n    <v-card class=\"card\">\n      <v-layout row wrap>\n        <template v-for=\"(data, index) in lessons\">\n          <v-flex\n            xs6\n            :key=\"index\"\n            v-if=\"index != 'slides' && index != '__typename' && index != 'metadata'\"\n          >\n            <v-text-field\n              class=\"fields\"\n              v-model=\"lessons[index]\"\n              :label=\"index\"\n              required\n              :box=\"editing\"\n              :regular=\"!editing\"\n              :disabled=\"!editing\"\n            ></v-text-field>\n          </v-flex>\n        </template>\n        <template v-for=\"(data, index) in lessons.metadata\">\n          <v-flex xs6 :key=\"index + 'data'\">\n            <v-textarea\n              class=\"fields\"\n              v-model=\"lessons.metadata[index]\"\n              :label=\"index\"\n              required\n              :box=\"editing\"\n              :regular=\"!editing\"\n              :disabled=\"!editing\"\n            ></v-textarea>\n          </v-flex>\n        </template>\n      </v-layout>\n    </v-card>\n    <v-card class=\"card\">\n      <h3>Slides</h3>\n      <v-container>\n        <v-data-table :items=\"lessons.slides\" :headers=\"headers\" hide-actions>\n          <template slot=\"items\" slot-scope=\"props\">\n            <tr @click=\"openSlide(props.item.id)\">\n              <td class=\"px-1\" style=\"width: 0.1%\">\n                <v-btn style=\"cursor: move\" icon class=\"sortHandle\">\n                  <v-icon>drag_handle</v-icon>\n                </v-btn>\n              </td>\n              <td class=\"text-xs\">{{ props.item.priority}}</td>\n              <td class=\"text-xs\">{{ props.item.id}}</td>\n              <td class=\"text-xs\">{{ props.item.key}}</td>\n              <td class=\"text-xs\">{{ props.item.name}}</td>\n              <td class=\"text-xs\">{{ props.item.description}}</td>\n              <td>\n                <ul v-for=\"p in props.item.assets\" :key=\"p.id\">\n                  <li>{{ p.id }}</li>\n                </ul>\n              </td>\n            </tr>\n          </template>\n        </v-data-table>\n      </v-container>\n      <v-layout right>\n        <v-btn @click=\"openDialog\">Create Slide</v-btn>\n      </v-layout>\n    </v-card>\n    <EditSlideDialog :editDialog=\"editDialog\" :selected=\"selectedSlide\" @closeSlide=\"closeSlide\" />\n    <AddDialog\n      :showDialog=\"showDialog\"\n      :uploadConfig=\"slideForm\"\n      @closeDialog=\"closeDialog\"\n      @submitForm=\"submitForm\"\n      dialogTitle=\"Slide\"\n    />\n    <v-btn v-if=\"orderChanged\" :loading=\"loading\" @click=\"saveOrder\">Update Priority</v-btn>\n  </v-layout>\n</template>\n\n<script>\nimport { mapActions } from 'vuex'\nimport { CurriculumActions } from '@/curriculum/CurriculumStore'\nimport { uploadSlideForm } from '@/components/courses/forms'\n\nimport EditSlideDialog from '@/components/courses/EditSlideDialog.vue'\nimport Sortable from 'sortablejs'\nimport AddDialog from '@/components/courses/AddDialog.vue'\n\nexport default {\n  components: {\n    AddDialog,\n    EditSlideDialog\n  },\n  data () {\n    return {\n      lessons: {\n        metadata: {}\n      },\n      saveActivator: false,\n      showDialog: false,\n      saveSpeedDial: false,\n      test: undefined,\n      saving: false,\n      editDialog: false,\n      editing: false,\n      headers: [\n        { text: '', sortable: false },\n        { text: 'Priority', value: 'priority' },\n        { text: 'ID', value: 'id' },\n        { text: 'Key', value: 'key' },\n        { text: 'Name', value: 'name' },\n        { text: 'Description', value: 'description' },\n        { text: 'Asset ID', value: 'assets' }\n      ],\n      selectedSlide: {},\n      orderChanged: false,\n      loading: false,\n      slideForm: uploadSlideForm,\n      pageLoading: true\n    }\n  },\n  async mounted () {\n    const data = await this.getLessonsById(this.lessonId)\n    this.pageLoading = false\n    this.lessons = { ...data, metadata: { ...data.metadata } }\n\n    this.lessons.slides.map(l => { return { ...l } }).sort(function (a, b) {\n      return a.priority - b.priority\n    })\n\n    const table = document.querySelector('.v-datatable tbody')\n    Sortable.create(table, {\n      onEnd: this.updateSlides,\n      handle: '.sortHandle'\n    })\n  },\n  computed: {\n    courseId () {\n      return ~~this.$route.params.courseId ? ~~this.$route.params.courseId : ''\n    },\n    unitId () {\n      return ~~this.$route.params.unitId ? ~~this.$route.params.unitId : ''\n    },\n    blockId () {\n      return ~~this.$route.params.blockId ? ~~this.$route.params.blockId : ''\n    },\n    lessonId () {\n      return ~~this.$route.params.lessonId ? ~~this.$route.params.lessonId : ''\n    }\n  },\n  methods: {\n    ...mapActions([\n      CurriculumActions.GET_LESSONS_BY_ID,\n      CurriculumActions.UPSERT_SLIDE,\n      CurriculumActions.UPSERT_LESSON\n    ]),\n    saveOrder () {\n      this.loading = true\n      this.lessons.slides.forEach((row, index) => {\n        row.lessonId = this.lessonId\n        this.upsertSlide(row)\n      })\n      this.loading = false\n      this.orderChanged = false\n    },\n    updateSlides ({ newIndex, oldIndex }) {\n      this.orderChanged = true\n      var test = this.lessons.slides.map(l => { return { ...l } }).sort(function (a, b) {\n        return a.priority - b.priority\n      })\n      this.lessons.slides = []\n      const rowSelected = test.splice(oldIndex, 1)[0]\n      test.splice(newIndex, 0, rowSelected)\n\n      test.forEach((t, index) => {\n        t.priority = index\n        return t\n      })\n\n      this.$nextTick(() => {\n        this.lessons.slides = [...test]\n      })\n    },\n    openDialog () {\n      this.showDialog = true\n    },\n    async closeDialog (val) {\n      this.showDialog = false\n    },\n    async submitForm (val) {\n      val.lessonId = this.lessonId\n      const tips = val.metadata[0].value\n      const actions = val.metadata[1].value\n      const form = { ...val, metadata: { tips, actions } }\n      await this.upsertSlide(form)\n\n      Object.keys(this.slideForm).forEach(index => {\n        if (index !== 'metadata' && index !== 'lessonId') {\n          this.slideForm[index] = ''\n        }\n      })\n      Object.keys(this.slideForm.metadata).forEach(index => {\n        this.slideForm.metadata[index].value = ''\n      })\n      delete this.slideForm.lessonId\n\n      this.showDialog = false\n      const data = await this.getLessonsById(this.lessonId)\n      this.lessons = { ...data, metadata: { ...data.metadata } }\n    },\n    openSlide (slideId) {\n      this.selectedSlide = this.lessons.slides.find(s => {\n        return s.id === slideId\n      })\n      this.editDialog = true\n    },\n    async closeSlide () {\n      this.editDialog = false\n      this.selectedSlide = {}\n      const data = await this.getLessonsById(this.lessonId)\n      this.lessons = { ...data }\n    },\n    async cancelEdit () {\n      this.editing = false\n    },\n    async saveData () {\n      this.saving = true\n      await this.upsertLesson(this.lessons)\n      this.editing = false\n      this.saving = false\n    }\n  }\n}\n</script>\n\n<style scoped>\n.lesson-container {\n  margin: 10px 0;\n  width: 100%;\n}\n.fields {\n  height: 100%;\n  padding: 10px 10px;\n  width: 100%;\n  margin: 10px 10px;\n}\n.card {\n  width: 90%;\n  padding: 20px 10px;\n  margin: 5px 0;\n}\n.center {\n  text-align: center;\n}\n\n.meta {\n  padding: 10px 20px;\n  color: grey;\n}\n</style>\n"]}]}