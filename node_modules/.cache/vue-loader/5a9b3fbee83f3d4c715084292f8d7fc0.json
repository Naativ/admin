{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/Actions.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/Actions.vue","mtime":1574205365000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport SEARCH_QUERY from '@/graphql/Search.gql'\nimport MERGE_MUTATION from '@/graphql/MergeAccount.gql'\nimport { UsersMutations } from '@/users/UsersStore'\nimport { pathOr } from 'ramda'\nimport UserTreePatchDialog from '@/views/users/actions/UserTreePatch.vue'\n\nimport { StoreGetters } from '@/store'\nimport { mapGetters } from 'vuex'\nconst mappedGetters = mapGetters({\n  access: StoreGetters.access\n})\n\nconst mergeAccountDefaultVals = {\n  rules: [\n    v => !!v || 'Field is required'\n  ],\n  secondName: '',\n  showDialog: false,\n  showConfirmationDialog: false,\n  searchItems1: [],\n  searchItems2: []\n}\n\nexport default {\n  name: 'Actions',\n  watch: {\n    searchTerm1: async function (val) {\n      if (val) {\n        const res = await this.mergeSearch(val)\n        this.mergeAccount.searchItems1 = pathOr([], ['data', 'searchHierarchy', 'hierarchies'], res)\n      }\n    },\n    searchTerm2: async function (val) {\n      if (val) {\n        const res = await this.mergeSearch(val)\n        this.mergeAccount.searchItems2 = pathOr([], ['data', 'searchHierarchy', 'hierarchies'], res)\n      }\n    }\n  },\n  components: {\n    UserTreePatchDialog\n  },\n  props: {\n    user: {\n      type: Object,\n      default () { return {} }\n    }\n  },\n  data: () => ({\n    createMember: {\n      lastName: '',\n      email: ''\n    },\n    patching: false,\n    creatingMember: false,\n    loading: false,\n    mergeAccount: { ...mergeAccountDefaultVals },\n    searchTerm1: null,\n    searchTerm2: null,\n    snackbar: false,\n    snackbarMessage: ''\n  }),\n  methods: {\n    secondNameReset: function () {\n      this.mergeAccount.secondName = ''\n      this.mergeAccount.searchItems2 = []\n    },\n    mergeInit: function () {\n      for (let element in this.mergeAccount) {\n        this.mergeAccount[element] = mergeAccountDefaultVals[element]\n      }\n    },\n    mergeBtnClick () {\n      this.$refs.mergeForm.resetValidation()\n      this.mergeInit()\n      this.secondNameReset()\n      this.mergeAccount.showDialog = true\n    },\n    async merge () {\n      const firstId = this.user.id\n      const secondId = this.mergeAccount.secondName.id\n      let viewing = this.$store.state.users.viewing\n      viewing.forEach((user, index) => {\n        if (user.id === secondId) {\n          viewing.splice(index, 1)\n        }\n      })\n      try {\n        this.loading = true\n        await this.$store.commit(\n          UsersMutations.SET_ONE,\n          { property: 'viewing', value: viewing })\n        await this.$apollo.mutate({\n          mutation: MERGE_MUTATION,\n          variables: {\n            input: {\n              accountToKeep: firstId,\n              accountToDelete: secondId\n            }\n          }\n        })\n        this.loading = false\n        this.mergeAccount.showDialog = this.mergeAccount.showConfirmationDialog = false\n        this.snackbar = true\n        this.snackbarMessage = 'Accounts Successfully Merged!'\n      } catch (error) {\n        console.error(error)\n        this.loading = false\n        this.mergeAccount.showDialog = this.mergeAccount.showConfirmationDialog = false\n        this.onError('Account merge unsuccessful. Please try again later or contact customer support.')\n      }\n    },\n    mergeConfirmation () {\n      const formIsValid = this.$refs.mergeForm.validate()\n      if (formIsValid) {\n        this.$router.push('/members/' + this.user.id + '/actions')\n        this.mergeAccount.showDialog = false\n        this.mergeAccount.showConfirmationDialog = true\n      }\n    },\n    mergeConfirmationCancel () {\n      this.mergeAccount.showDialog = true\n      this.mergeAccount.showConfirmationDialog = false\n    },\n    mergeCancel () {\n      this.mergeAccount.showDialog = this.mergeAccount.showConfirmationDialog = false\n    },\n    async mergeSearch (searchTerm) {\n      if (searchTerm) {\n        try {\n          return await this.$apollo.query({\n            query: SEARCH_QUERY,\n            variables: {\n              searchInput: {\n                search: searchTerm\n              }\n            }\n          })\n        } catch (error) {\n          console.error({ error })\n        }\n      }\n    },\n    onSuccess (message) {\n      this.snackbar = true\n      this.snackbarMessage = message\n    },\n    onError (errorMessage) {\n      if (typeof errorMessage === 'string') {\n        this.error = this.snackbarMessage = errorMessage\n      } else {\n        const errors = pathOr({}, ['response', 'data', 'errors'], errorMessage)\n        this.snackbarMessage = pathOr(\n          'There seems to be a problem. Please try again later or contact customer support.',\n          ['message'],\n          errors[0]\n        )\n      }\n      this.snackbar = true\n    }\n  },\n  computed: {\n    ...mappedGetters,\n    security () {\n      return this.access || {}\n    }\n  }\n}\n",{"version":3,"sources":["Actions.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6HA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Actions.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <v-layout justify-center align-center row class=\"main-container\">\n      <v-flex>\n        <v-card>\n          <v-card-title>\n            <h1>Actions</h1>\n          </v-card-title>\n          <v-card-actions>\n            <v-layout justify-center>\n              <v-btn color=\"primary\" style=\"align-self: center;\" @click=\"mergeBtnClick\" v-if=\"security.hasMerge\">\n                <v-icon>call_merge</v-icon>Merge Accounts\n              </v-btn>\n              <v-btn color=\"primary\" style=\"align-self: center;\" @click=\"patching = true\" v-if=\"security.hasSponsorChange\">\n                <v-icon>compare_arrows</v-icon>Patch Member Out\n              </v-btn>\n            </v-layout>\n          </v-card-actions>\n        </v-card>\n      </v-flex>\n    <v-snackbar :timeout=\"8000\" :top=\"true\" :right=\"true\" v-model=\"snackbar\">\n      {{snackbarMessage}}\n      <v-btn flat color=\"pink\" @click.native=\"snackbar = false\">Close</v-btn>\n    </v-snackbar>\n    <UserTreePatchDialog :show=\"patching\" :user=\"user\" @cancel=\"patching = false\"/>\n    <v-dialog v-if=\"user\" v-model=\"mergeAccount.showDialog\" :hide-overlay=\"true\" width=\"56%\">\n      <v-card>\n        <v-card-title>\n          <h1>Merge Accounts</h1>\n        </v-card-title>\n        <v-card-text>\n          <v-form ref=\"mergeForm\">\n            <v-layout row fill-height justify-space-around>\n              <v-flex xs-12 sm-6 style=\"flex: 1 1; padding: 0px 4px;\">\n                <v-text-field label=\"Destination account to keep\" :value=\"user.id\" readonly/>\n                <v-icon>person</v-icon>\n                {{user.name}}\n                <br>\n                <v-icon>email</v-icon>\n                {{user.contactEmail}}\n              </v-flex>\n              <v-flex xs-12 sm-6 style=\"flex: 1 1; padding: 0px 4px;\">\n                <v-autocomplete\n                  v-model=\"mergeAccount.secondName\"\n                  :items=\"mergeAccount.searchItems2\"\n                  :search-input.sync=\"searchTerm2\"\n                  item-text=\"name\"\n                  item-value=\"id\"\n                  hide-no-data\n                  return-object\n                  :rules=\"mergeAccount.rules\"\n                  label=\"Target Account to remove & merge details into Destination\"\n                >\n                  <template slot=\"selection\" slot-scope=\"data\">\n                    <v-icon>person</v-icon>\n                    <v-list-tile-content v-text=\"data.item.id\"></v-list-tile-content>\n                    <v-icon @click=\"secondNameReset()\">close</v-icon>\n                  </template>\n                  <template slot=\"item\" slot-scope=\"data\">\n                    <v-flex xs4>\n                      <v-icon left>person</v-icon>\n                      {{data.item.displayName}}\n                    </v-flex>\n                    <v-flex xs4>{{data.item.contactEmail}}</v-flex>\n                    <v-flex xs4>{{data.item.id}}</v-flex>\n                  </template>\n                </v-autocomplete>\n                <div v-if=\"mergeAccount.secondName\">\n                  <v-icon>person</v-icon>\n                  {{mergeAccount.secondName.name}}\n                  <br>\n                  <v-icon>email</v-icon>\n                  {{mergeAccount.secondName.contactEmail}}\n                </div>\n              </v-flex>\n            </v-layout>\n          </v-form>\n        </v-card-text>\n        <v-card-actions>\n          <v-layout row justify-center>\n            <v-btn color=\"dark pink\" class=\"white--text\" @click=\"mergeConfirmation\">Merge</v-btn>\n            <v-btn @click=\"mergeCancel\">Cancel</v-btn>\n          </v-layout>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n    <v-dialog\n      v-if=\"user\"\n      v-model=\"mergeAccount.showConfirmationDialog\"\n      width=\"50%\"\n      :hide-overlay=\"true\"\n    >\n      <v-card>\n        <v-flex justify-space-around align-center>\n          <v-card-title>\n            <h1 style=\"margin: auto;\">Are you sure?</h1>\n          </v-card-title>\n          <v-card-text>This process is irreversible!</v-card-text>\n          <v-layout fill-height row justify-space-around>\n            <v-card color=\"grey lighten-4\" style=\"width: 30%;\">\n              <v-icon large left>person</v-icon>\n              <v-card-text>{{user.displayName}}</v-card-text>\n              <v-card-text>{{user.contactEmail}}</v-card-text>\n              <v-card-text>{{user.id}}</v-card-text>\n            </v-card>\n            <v-icon x-large>arrow_back</v-icon>\n            <v-card color=\"dark pink\" class=\"white--text\" style=\"width: 30%;\">\n              <v-icon class=\"white--text\" large left>person</v-icon>\n              <v-card-text>{{mergeAccount.secondName.displayName}}</v-card-text>\n              <v-card-text>{{mergeAccount.secondName.contactEmail}}</v-card-text>\n              <v-card-text>{{mergeAccount.secondName.id}}</v-card-text>\n            </v-card>\n          </v-layout>\n          <v-card-actions>\n            <v-layout row justify-center>\n              <v-btn color=\"dark pink\" class=\"white--text\" @click=\"merge\" :loading=\"loading\">Merge</v-btn>\n              <v-btn :disabled=\"loading\" @click=\"mergeConfirmationCancel\">Back</v-btn>\n            </v-layout>\n          </v-card-actions>\n        </v-flex>\n      </v-card>\n    </v-dialog>\n  </v-layout>\n</template>\n\n<script>\nimport SEARCH_QUERY from '@/graphql/Search.gql'\nimport MERGE_MUTATION from '@/graphql/MergeAccount.gql'\nimport { UsersMutations } from '@/users/UsersStore'\nimport { pathOr } from 'ramda'\nimport UserTreePatchDialog from '@/views/users/actions/UserTreePatch.vue'\n\nimport { StoreGetters } from '@/store'\nimport { mapGetters } from 'vuex'\nconst mappedGetters = mapGetters({\n  access: StoreGetters.access\n})\n\nconst mergeAccountDefaultVals = {\n  rules: [\n    v => !!v || 'Field is required'\n  ],\n  secondName: '',\n  showDialog: false,\n  showConfirmationDialog: false,\n  searchItems1: [],\n  searchItems2: []\n}\n\nexport default {\n  name: 'Actions',\n  watch: {\n    searchTerm1: async function (val) {\n      if (val) {\n        const res = await this.mergeSearch(val)\n        this.mergeAccount.searchItems1 = pathOr([], ['data', 'searchHierarchy', 'hierarchies'], res)\n      }\n    },\n    searchTerm2: async function (val) {\n      if (val) {\n        const res = await this.mergeSearch(val)\n        this.mergeAccount.searchItems2 = pathOr([], ['data', 'searchHierarchy', 'hierarchies'], res)\n      }\n    }\n  },\n  components: {\n    UserTreePatchDialog\n  },\n  props: {\n    user: {\n      type: Object,\n      default () { return {} }\n    }\n  },\n  data: () => ({\n    createMember: {\n      lastName: '',\n      email: ''\n    },\n    patching: false,\n    creatingMember: false,\n    loading: false,\n    mergeAccount: { ...mergeAccountDefaultVals },\n    searchTerm1: null,\n    searchTerm2: null,\n    snackbar: false,\n    snackbarMessage: ''\n  }),\n  methods: {\n    secondNameReset: function () {\n      this.mergeAccount.secondName = ''\n      this.mergeAccount.searchItems2 = []\n    },\n    mergeInit: function () {\n      for (let element in this.mergeAccount) {\n        this.mergeAccount[element] = mergeAccountDefaultVals[element]\n      }\n    },\n    mergeBtnClick () {\n      this.$refs.mergeForm.resetValidation()\n      this.mergeInit()\n      this.secondNameReset()\n      this.mergeAccount.showDialog = true\n    },\n    async merge () {\n      const firstId = this.user.id\n      const secondId = this.mergeAccount.secondName.id\n      let viewing = this.$store.state.users.viewing\n      viewing.forEach((user, index) => {\n        if (user.id === secondId) {\n          viewing.splice(index, 1)\n        }\n      })\n      try {\n        this.loading = true\n        await this.$store.commit(\n          UsersMutations.SET_ONE,\n          { property: 'viewing', value: viewing })\n        await this.$apollo.mutate({\n          mutation: MERGE_MUTATION,\n          variables: {\n            input: {\n              accountToKeep: firstId,\n              accountToDelete: secondId\n            }\n          }\n        })\n        this.loading = false\n        this.mergeAccount.showDialog = this.mergeAccount.showConfirmationDialog = false\n        this.snackbar = true\n        this.snackbarMessage = 'Accounts Successfully Merged!'\n      } catch (error) {\n        console.error(error)\n        this.loading = false\n        this.mergeAccount.showDialog = this.mergeAccount.showConfirmationDialog = false\n        this.onError('Account merge unsuccessful. Please try again later or contact customer support.')\n      }\n    },\n    mergeConfirmation () {\n      const formIsValid = this.$refs.mergeForm.validate()\n      if (formIsValid) {\n        this.$router.push('/members/' + this.user.id + '/actions')\n        this.mergeAccount.showDialog = false\n        this.mergeAccount.showConfirmationDialog = true\n      }\n    },\n    mergeConfirmationCancel () {\n      this.mergeAccount.showDialog = true\n      this.mergeAccount.showConfirmationDialog = false\n    },\n    mergeCancel () {\n      this.mergeAccount.showDialog = this.mergeAccount.showConfirmationDialog = false\n    },\n    async mergeSearch (searchTerm) {\n      if (searchTerm) {\n        try {\n          return await this.$apollo.query({\n            query: SEARCH_QUERY,\n            variables: {\n              searchInput: {\n                search: searchTerm\n              }\n            }\n          })\n        } catch (error) {\n          console.error({ error })\n        }\n      }\n    },\n    onSuccess (message) {\n      this.snackbar = true\n      this.snackbarMessage = message\n    },\n    onError (errorMessage) {\n      if (typeof errorMessage === 'string') {\n        this.error = this.snackbarMessage = errorMessage\n      } else {\n        const errors = pathOr({}, ['response', 'data', 'errors'], errorMessage)\n        this.snackbarMessage = pathOr(\n          'There seems to be a problem. Please try again later or contact customer support.',\n          ['message'],\n          errors[0]\n        )\n      }\n      this.snackbar = true\n    }\n  },\n  computed: {\n    ...mappedGetters,\n    security () {\n      return this.access || {}\n    }\n  }\n}\n</script>\n"]}]}