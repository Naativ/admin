{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/Reports.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/Reports.vue","mtime":1570835920000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as R from 'ramda'\n// import { reports } from '@/api/reports'\nimport ReportParameterInput from '@/components/ReportParameterInput.vue'\nimport GET_REPORTS from '@/graphql/Reports.gql'\nimport GET_REPORT_EXECUTIONS from '@/graphql/ReportExecutions.gql'\nimport gql from 'graphql-tag'\n\nexport default {\n  name: 'Reports',\n  components: {\n    ReportParameterInput\n  },\n  methods: {\n    async runReport(report) {\n      const params = this.inputs[report.id] || {}\n      // const tenantId = this.$store.state.user.principal.tenantId\n      this.locked = true\n      try {\n        // await reports.run(report, tenantId, params)\n        const result = await this.$apollo.mutate({\n          mutation: gql`\n            mutation Report($input: ReportInput) {\n              reportExecute(input:$input){\n                id\n                reportId\n                rowCount\n                name\n                description\n                url\n                createdOn\n              }\n            }\n          `,\n          variables: { input: {\n            id: report.id,\n            parameters: params\n          } },\n          fetchPolicy: 'no-cache'\n        })\n        const exe = R.path(['data', 'reportExecute'], result)\n        if (exe) {\n          // TODO clean this up. use cookies?\n          const jwt = R.path(['$store', 'state', 'user', 'jwt'], this)\n          const url = `${exe.url}${jwt ? '?__jwt=' + jwt : ''}`\n          window.open(url, '_blank')\n        } else {\n          const err = new Error('No report execution returned')\n          err.gql = result\n          throw err\n        }\n      } catch (err) {\n        console.warn('error running report', err)\n        window.alert('Something has gone very wrong. Please contact support')\n        // error handling here!\n      } finally {\n        this.locked = false\n      }\n    },\n    async getReportExecutions(report) {\n      try {\n        const { data } = await this.$apollo.query({\n          query: GET_REPORT_EXECUTIONS,\n          variables: {\n            input: {\n              reportIds: [report.id],\n              limit: 5\n            }\n          },\n          fetchPolicy: 'network-only'\n        })\n        this.reportExecutions = data.reportExecutions\n      } catch (err) {\n        console.warn('Error grabbing report execution', err)\n      }\n    },\n    async expandRow(props) {\n      this.reportExecutions = []\n      props.expanded = !props.expanded\n      if (props.expanded) {\n        this.loading = true\n        await this.getReportExecutions(props.item)\n        this.loading = false\n      }\n    },\n    paramChanged(report, { parameter, value }) {\n      const input = (this.inputs[report.id] = this.inputs[report.id] || {})\n      input[parameter.key] = value\n    }\n  },\n  data() {\n    return {\n      locked: false,\n      headers: [\n        { text: 'ID', value: 'id' },\n        { text: 'Name', value: 'name' },\n        { text: 'Description', value: 'description', sortable: false },\n        { text: 'Parameters', value: 'params', sortable: false }\n      ],\n      items: [],\n      inputs: {},\n      reportExecutions: [],\n      loading: false\n    }\n  },\n  apollo: {\n    items: {\n      query: GET_REPORTS,\n      variables() {\n        return {\n          input: {}\n        }\n      },\n      update(res) {\n        this.inputs = {}\n        return res.reports\n      }\n    }\n  }\n}\n",{"version":3,"sources":["Reports.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0FA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Reports.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <v-flex xs12>\n    <div class=\"reports main-container\">\n      <h1>Reports</h1>\n    </div>\n    <v-data-table :headers=\"headers\" :items=\"items\" hide-actions class=\"elevation-1\">\n      <template slot=\"items\" slot-scope=\"props\">\n        <tr @click=\"expandRow(props)\">\n          <td>{{ props.item.id }}</td>\n          <td>{{ props.item.name }}</td>\n          <td>{{ props.item.description }}</td>\n          <td>\n            {{ props.item.parameters.length }}\n            {{ props.item.parameters.length == 1 ? 'Parameter' : 'Parameters' }}\n          </td>\n        </tr>\n      </template>\n      <template slot=\"expand\" slot-scope=\"props\">\n        <v-container grid-list-md fluid class=\"drawer\">\n          <v-layout row wrap>\n            <v-flex xs4 px-2 py-4>\n              <h3>{{props.item.name}}</h3>\n              <p>{{props.item.description || 'No Description Available'}}</p>\n            </v-flex>\n            <v-flex xs7>\n              <v-layout row wrap>\n                <v-flex xs4 v-for=\"param in props.item.parameters\" :key=\"param.id\">\n                  <ReportParameterInput\n                    :parameter=\"param\"\n                    @change=\"paramChanged(props.item, $event)\"\n                  />\n                </v-flex>\n              </v-layout>\n            </v-flex>\n            <v-flex xs1 py-4>\n              <div class=\"text-xs-center\">\n                <v-btn\n                  fab\n                  dark\n                  small\n                  color=\"primary\"\n                  @click=\"runReport(props.item)\"\n                  :disabled=\"locked\"\n                >\n                  <v-icon dark v-if=\"!locked\">play_arrow</v-icon>\n                  <v-icon dark v-if=\"locked\">pause</v-icon>\n                </v-btn>\n              </div>\n            </v-flex>\n          </v-layout>\n            <v-layout>\n          <v-layout column v-if=\"reportExecutions.length > 0 && !loading\">\n            <v-flex xs4 px-2 py-4>\n              <h3>Previous Reports</h3>\n            </v-flex>\n              <template v-for=\"(data, index) in reportExecutions\">\n                <v-layout row :key=\"index\">\n                  <v-text-field\n                    label=\"Date generated\"\n                    v-model=\"reportExecutions[index].createdOn\"\n                    disabled\n                    class=\"report\"\n                  />\n                  <template v-for=\"(item, i) in reportExecutions[index].parameters\">\n                    <v-text-field :key=\"`${i}-param-${index}`\"\n                      :label=\"i\"\n                      v-model=\"reportExecutions[index].parameters[i]\"\n                      disabled\n                      class=\"report\"\n                    />\n                  </template>\n                  <a class=\"download\" :href=\"reportExecutions[index].url\">Download</a>\n                </v-layout>\n              </template>\n            </v-layout>\n            <v-layout v-else-if=\"loading\">\n              <v-progress-circular class=\"loader\" indeterminate :size=\"50\" :width=\"5\" color=\"black\"></v-progress-circular>\n            </v-layout>\n            <v-layout v-else>\n              <v-flex xs4 px-2 py-4>\n                <h3>No previously run reports</h3>\n              </v-flex>\n            </v-layout>\n          </v-layout>\n        </v-container>\n      </template>\n    </v-data-table>\n  </v-flex>\n</template>\n<script>\nimport * as R from 'ramda'\n// import { reports } from '@/api/reports'\nimport ReportParameterInput from '@/components/ReportParameterInput.vue'\nimport GET_REPORTS from '@/graphql/Reports.gql'\nimport GET_REPORT_EXECUTIONS from '@/graphql/ReportExecutions.gql'\nimport gql from 'graphql-tag'\n\nexport default {\n  name: 'Reports',\n  components: {\n    ReportParameterInput\n  },\n  methods: {\n    async runReport(report) {\n      const params = this.inputs[report.id] || {}\n      // const tenantId = this.$store.state.user.principal.tenantId\n      this.locked = true\n      try {\n        // await reports.run(report, tenantId, params)\n        const result = await this.$apollo.mutate({\n          mutation: gql`\n            mutation Report($input: ReportInput) {\n              reportExecute(input:$input){\n                id\n                reportId\n                rowCount\n                name\n                description\n                url\n                createdOn\n              }\n            }\n          `,\n          variables: { input: {\n            id: report.id,\n            parameters: params\n          } },\n          fetchPolicy: 'no-cache'\n        })\n        const exe = R.path(['data', 'reportExecute'], result)\n        if (exe) {\n          // TODO clean this up. use cookies?\n          const jwt = R.path(['$store', 'state', 'user', 'jwt'], this)\n          const url = `${exe.url}${jwt ? '?__jwt=' + jwt : ''}`\n          window.open(url, '_blank')\n        } else {\n          const err = new Error('No report execution returned')\n          err.gql = result\n          throw err\n        }\n      } catch (err) {\n        console.warn('error running report', err)\n        window.alert('Something has gone very wrong. Please contact support')\n        // error handling here!\n      } finally {\n        this.locked = false\n      }\n    },\n    async getReportExecutions(report) {\n      try {\n        const { data } = await this.$apollo.query({\n          query: GET_REPORT_EXECUTIONS,\n          variables: {\n            input: {\n              reportIds: [report.id],\n              limit: 5\n            }\n          },\n          fetchPolicy: 'network-only'\n        })\n        this.reportExecutions = data.reportExecutions\n      } catch (err) {\n        console.warn('Error grabbing report execution', err)\n      }\n    },\n    async expandRow(props) {\n      this.reportExecutions = []\n      props.expanded = !props.expanded\n      if (props.expanded) {\n        this.loading = true\n        await this.getReportExecutions(props.item)\n        this.loading = false\n      }\n    },\n    paramChanged(report, { parameter, value }) {\n      const input = (this.inputs[report.id] = this.inputs[report.id] || {})\n      input[parameter.key] = value\n    }\n  },\n  data() {\n    return {\n      locked: false,\n      headers: [\n        { text: 'ID', value: 'id' },\n        { text: 'Name', value: 'name' },\n        { text: 'Description', value: 'description', sortable: false },\n        { text: 'Parameters', value: 'params', sortable: false }\n      ],\n      items: [],\n      inputs: {},\n      reportExecutions: [],\n      loading: false\n    }\n  },\n  apollo: {\n    items: {\n      query: GET_REPORTS,\n      variables() {\n        return {\n          input: {}\n        }\n      },\n      update(res) {\n        this.inputs = {}\n        return res.reports\n      }\n    }\n  }\n}\n</script>\n\n<style>\n.drawer {\n  background: #eeeeef !important;\n}\n\n.report {\n  margin: 0 10px;\n}\n\n.download {\n  margin: auto 10px;\n}\n\n.loader {\n  margin: auto;\n}\n</style>\n"]}]}