{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/curriculum/Lessons.vue?vue&type=style&index=0&id=bf906f3e&scoped=true&lang=css&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/curriculum/Lessons.vue","mtime":1570835920000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.table {\n  text-align: left !important;\n}\n",{"version":3,"sources":["Lessons.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsOA;AACA;AACA","file":"Lessons.vue","sourceRoot":"src/views/curriculum","sourcesContent":["<template>\n  <v-layout justify-space-around align-center column>\n    <v-progress-circular v-if=\"pageLoading\" color=\"blue\" indeterminate></v-progress-circular>\n    <h3>Lessons for Block {{blockId}}</h3>\n    <v-container class=\"table\">\n      <v-btn @click=\"openDialog\" color=\"pink\" dark absolute right fab>\n        <v-icon>add</v-icon>\n      </v-btn>\n      <v-data-table :items=\"lessons\" :headers=\"headers\" hide-actions>\n        <template slot=\"items\" slot-scope=\"props\">\n          <td class=\"px-1\" style=\"width: 0.1%\">\n            <v-btn style=\"cursor: move\" icon class=\"sortHandle\">\n              <v-icon>drag_handle</v-icon>\n            </v-btn>\n          </td>\n          <td @click=\"openLesson(props.item.id)\" class=\"text-xs\">{{ props.item.priority}}</td>\n          <td @click=\"openLesson(props.item.id)\" class=\"text-xs\">{{ props.item.id }}</td>\n          <td @click=\"openLesson(props.item.id)\" class=\"text-xs\">{{ props.item.blockId}}</td>\n          <td @click=\"openLesson(props.item.id)\" class=\"text-xs\">{{ props.item.key}}</td>\n          <td @click=\"openLesson(props.item.id)\" class=\"text-xs\">{{ props.item.name}}</td>\n          <td @click=\"openLesson(props.item.id)\" class=\"text-xs\">{{ props.item.description}}</td>\n          <td class=\"text-xs\">\n            <v-text-field\n              v-if=\"props.item.progressions.length && findProgression(props.item) > -1\"\n              v-model=\"props.item.progressions[findProgression(props.item)].toId\"\n              @keydown=\"hasEditted(props.index)\"\n            ></v-text-field>\n            <v-text-field\n              v-else\n              @keydown=\"hasEditted(props.index)\"\n              v-model=\"props.item.nextLessonId\"\n            ></v-text-field>\n            <v-btn @click=\"saveRow(props.item)\" v-if=\"editted[props.index]\">Save</v-btn>\n          </td>\n        </template>\n      </v-data-table>\n    </v-container>\n    <AddDialog\n      :showDialog=\"showDialog\"\n      :uploadConfig=\"lessonForm\"\n      @closeDialog=\"closeDialog\"\n      @submitForm=\"submitForm\"\n      dialogTitle=\"Lesson\"\n    />\n    <v-btn v-if=\"orderChanged\" @click=\"saveOrder\">Update Priorities</v-btn>\n  </v-layout>\n</template>\n\n<script>\nimport { mapActions } from 'vuex'\nimport { CurriculumActions } from '@/curriculum/CurriculumStore'\nimport Sortable from 'sortablejs'\n\nimport { cloneDeep } from 'lodash'\nimport { uploadLessonForm } from '@/components/courses/forms'\n\nimport AddDialog from '@/components/courses/AddDialog.vue'\n\nexport default {\n  components: {\n    AddDialog\n  },\n  data () {\n    return {\n      lessons: [],\n      headers: [\n        { text: '', sortable: false },\n        { text: 'Priority', value: 'priority' },\n        { text: 'ID', value: 'id' },\n        { text: 'Block ID', value: 'block_id' },\n        { text: 'Key', value: 'key' },\n        { text: 'Name', value: 'name' },\n        { text: 'Description', value: 'description' },\n        { text: 'Next Lesson', value: 'next_lesson' }\n      ],\n      orderChanged: false,\n      loading: false,\n      nextLesson: 123,\n      editted: [],\n      showDialog: false,\n      lessonForm: uploadLessonForm,\n      progression: [],\n      pageLoading: true\n    }\n  },\n  async mounted () {\n    const { results } = await this.getLessons(this.blockId)\n    this.pageLoading = false\n    this.lessons = cloneDeep(results).sort(function (a, b) {\n      return a.priority - b.priority\n    })\n\n    this.editted = Array(this.lessons.length)\n    const table = document.querySelector('.v-datatable tbody')\n    Sortable.create(table, {\n      onEnd: this.updateLessons,\n      handle: '.sortHandle'\n    })\n  },\n  computed: {\n    courseId () {\n      return ~~this.$route.params.courseId ? ~~this.$route.params.courseId : ''\n    },\n    unitId () {\n      return ~~this.$route.params.unitId ? ~~this.$route.params.unitId : ''\n    },\n    blockId () {\n      return ~~this.$route.params.blockId ? ~~this.$route.params.blockId : ''\n    }\n  },\n  methods: {\n    ...mapActions([\n      CurriculumActions.GET_LESSONS,\n      CurriculumActions.UPSERT_LESSON,\n      CurriculumActions.LESSON_PROGRESSION\n    ]),\n    openLesson (item) {\n      this.$router.push('/curriculum/courses/' + this.courseId + '/unit/' + this.unitId + '/block/' + this.blockId + '/lesson/' + item)\n    },\n    findProgression (row) {\n      return row.progressions.findIndex(r => r.fromId === row.id)\n    },\n    openLessonDetails (lessonId) {\n      this.$router.push('/curriculum/courses/' + this.courseId + '/unit/' + this.unitId + '/block/' + this.blockId + '/lesson/' + lessonId)\n    },\n    hasEditted (index) {\n      this.$nextTick(() => {\n        this.editted[index] = true\n      })\n    },\n    async saveRow (row) {\n      const val = {\n        toId: this.findProgression(row) > -1 ? ~~row.progressions[this.findProgression(row)].toId : ~~row.nextLessonId,\n        fromId: row.id\n      }\n      if (row.progressions.length && this.findProgression(row) > -1) {\n        val.id = row.progressions[this.findProgression(row)].id\n      }\n      await this.lessonProgression(val)\n      this.editted = Array(this.lessons.length)\n    },\n    async saveOrder () {\n      this.loading = true\n      var arr = []\n      this.lessons.forEach((row, index) => {\n        this.upsertLesson(row)\n        if (index < this.lessons.length - 1) {\n          const next = index + 1\n          const val = {\n            toId: this.lessons[next].id,\n            fromId: row.id\n          }\n          if (row.progressions.length && this.findProgression(row) > -1) {\n            val.id = row.progressions[this.findProgression(row)].id\n          }\n          row.progression = this.lessonProgression(val)\n          arr.push(row)\n        }\n      })\n      this.loading = false\n      this.orderChanged = false\n    },\n    updateLessons ({ newIndex, oldIndex }) {\n      this.orderChanged = true\n      var test = [...this.lessons]\n      this.lessons = []\n      const rowSelected = test.splice(oldIndex, 1)[0]\n      test.splice(newIndex, 0, rowSelected)\n\n      test.forEach((t, index) => {\n        if (index < test.length - 1) {\n          var next = index + 1\n          if (t.progressions.length && this.findProgression(t) > -1) {\n            t.progressions[this.findProgression(t)].toId = test[next].id\n          } else {\n            t.nextLessonId = test[next].id\n          }\n        }\n        t.priority = index\n        return t\n      })\n\n      this.$nextTick(() => {\n        this.lessons = [...test]\n      })\n    },\n    openDialog () {\n      this.showDialog = true\n    },\n    closeDialog () {\n      this.showDialog = false\n    },\n    async submitForm (val) {\n      val.blockId = this.blockId\n      const wordList = val.metadata[0].value.join(', ')\n      const objectivesArr = val.metadata[1].value\n      const objectives = this.prepObjectives(objectivesArr)\n      const form = { ...val, metadata: { wordList, objectives } }\n      await this.upsertLesson(form)\n\n      Object.keys(this.lessonForm).forEach(index => {\n        if (index !== 'metadata' && index !== 'blockId') {\n          this.lessonForm[index] = ''\n        }\n      })\n      Object.keys(this.lessonForm.metadata).forEach(index => {\n        this.lessonForm.metadata[index].value = []\n      })\n      delete this.lessonForm.blockId\n\n      this.showDialog = false\n      const { results } = await this.getLessons(this.blockId)\n      this.lessons = cloneDeep(results).sort(function (a, b) {\n        return a.priority - b.priority\n      })\n    },\n    prepObjectives (objectives) {\n      const objectiveOpener = '<div> At completion of this lesson, students will be able to: </div>'\n      let objectiveList = objectives.reduce((prev, cur) => {\n        return prev + ' <li>' + cur + '</li>'\n      }, '')\n      objectiveList = ' <div> <ul>' + objectiveList + '</ul></div>'\n      const val = objectiveOpener + objectiveList\n      return val\n    }\n  }\n}\n</script>\n\n<style scoped>\n.table {\n  text-align: left !important;\n}\n</style>\n"]}]}