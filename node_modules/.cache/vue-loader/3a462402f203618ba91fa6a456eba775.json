{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/associations/AssociationDetails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/associations/AssociationDetails.vue","mtime":1575760925479},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { GET_MEMBERS_OF_ASSN } from '@/users/users.gql'\nimport AssociationsDataTable from '@/components/AssociationsDataTable.vue'\nimport { mapGetters, mapActions } from 'vuex'\nimport { StoreGetters } from '@/store'\nimport { UsersActions } from '@/users/UsersStore'\n\nexport default {\n  components: {\n    AssociationsDataTable\n  },\n  data () {\n    return {\n      association: {},\n      headers: [\n        { text: 'Id', value: 'id', sortable: false },\n        { text: 'Member Name', value: 'name', sortable: false },\n        { text: 'Role', value: 'role', sortable: false },\n        { text: 'Rate', value: 'metadata', sortable: false, width: '18%' },\n        { text: 'Actions', sortable: false, width: '20%' }\n      ],\n      key: this.$route.params.key,\n      addDialog: false,\n      displayName: null,\n      type: null\n    }\n  },\n  apollo: {\n    associations: {\n      query: GET_MEMBERS_OF_ASSN,\n      variables() {\n        return {\n          input: {\n            key: this.key,\n            tenantId: this.$store.state.user.principal.tenantId\n          }\n        }\n      },\n      update(data) {\n        if (!data) {\n          throw new Error(`Failed to retrieve membership of associationKey: ${this.key}`)\n        }\n        const { memberships, name, type: { name: type } } = data.getMemberAssociation\n\n        this.displayName = name\n        this.type = type\n\n        if (Array.isArray(memberships)) {\n          const parsedMemberships = memberships.map(member => {\n            const { member: { displayName: name }, memberId: id, role: { name: role }, metadata } = member\n\n            return {\n              name,\n              id,\n              role,\n              metadata\n            }\n          })\n          return parsedMemberships\n        }\n      },\n      fetchPolicy: 'network-only'\n    }\n  },\n  methods: {\n    ...mapActions({\n      userStartViewing: UsersActions.START_VIEWING\n    }),\n    async view(props) {\n      const { item: { id } } = props\n      this.$router.push(`/members/${id}`)\n    }\n  },\n  computed: {\n    ...mapGetters({\n      permissions: StoreGetters.permissions\n    })\n  },\n  watch: {\n    '$route' (to, from) {\n      const { params: { key: toKey } } = to\n      this.key = toKey\n    }\n  }\n}\n",{"version":3,"sources":["AssociationDetails.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAoBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AssociationDetails.vue","sourceRoot":"src/views/associations","sourcesContent":["<template>\n  <v-layout column ma-5>\n    <v-card>\n      <v-card-title class=\"secondary white--text\" primary-title style=\"justify-content: center;\">\n        <h1>\n          <span v-if=\"associations\">{{displayName ? 'Members of ' + type + ' ' + displayName : ''}}</span>\n        </h1>\n      </v-card-title>\n\n      <AssociationsDataTable\n        v-if=\"associations\"\n        :associations=\"associations\"\n        :currentScreen=\"'membersInAssociation'\"\n        @view=\"view\"\n      />\n    </v-card>\n  </v-layout>\n</template>\n\n<script>\nimport { GET_MEMBERS_OF_ASSN } from '@/users/users.gql'\nimport AssociationsDataTable from '@/components/AssociationsDataTable.vue'\nimport { mapGetters, mapActions } from 'vuex'\nimport { StoreGetters } from '@/store'\nimport { UsersActions } from '@/users/UsersStore'\n\nexport default {\n  components: {\n    AssociationsDataTable\n  },\n  data () {\n    return {\n      association: {},\n      headers: [\n        { text: 'Id', value: 'id', sortable: false },\n        { text: 'Member Name', value: 'name', sortable: false },\n        { text: 'Role', value: 'role', sortable: false },\n        { text: 'Rate', value: 'metadata', sortable: false, width: '18%' },\n        { text: 'Actions', sortable: false, width: '20%' }\n      ],\n      key: this.$route.params.key,\n      addDialog: false,\n      displayName: null,\n      type: null\n    }\n  },\n  apollo: {\n    associations: {\n      query: GET_MEMBERS_OF_ASSN,\n      variables() {\n        return {\n          input: {\n            key: this.key,\n            tenantId: this.$store.state.user.principal.tenantId\n          }\n        }\n      },\n      update(data) {\n        if (!data) {\n          throw new Error(`Failed to retrieve membership of associationKey: ${this.key}`)\n        }\n        const { memberships, name, type: { name: type } } = data.getMemberAssociation\n\n        this.displayName = name\n        this.type = type\n\n        if (Array.isArray(memberships)) {\n          const parsedMemberships = memberships.map(member => {\n            const { member: { displayName: name }, memberId: id, role: { name: role }, metadata } = member\n\n            return {\n              name,\n              id,\n              role,\n              metadata\n            }\n          })\n          return parsedMemberships\n        }\n      },\n      fetchPolicy: 'network-only'\n    }\n  },\n  methods: {\n    ...mapActions({\n      userStartViewing: UsersActions.START_VIEWING\n    }),\n    async view(props) {\n      const { item: { id } } = props\n      this.$router.push(`/members/${id}`)\n    }\n  },\n  computed: {\n    ...mapGetters({\n      permissions: StoreGetters.permissions\n    })\n  },\n  watch: {\n    '$route' (to, from) {\n      const { params: { key: toKey } } = to\n      this.key = toKey\n    }\n  }\n}\n</script>\n\n<style>\ninput {\n  padding: 0 !important;\n}\n\n.v-input__slot {\n  margin-bottom: 0;\n}\n\n.association-table {\n  cursor: default;\n}\n.addbtn.sm {\n  top: -5px !important;\n}\n.addbtn {\n  top: 15px;\n}\n</style>\n"]}]}