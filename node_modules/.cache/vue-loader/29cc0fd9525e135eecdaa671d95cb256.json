{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/users/UserPermissions.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/users/UserPermissions.vue","mtime":1577329618152},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { upsertMemberAttribute, getMemberCredentials } from '@/users/users.gql'\nimport { allPermissions } from '@/graphql/AllPermissions.gql'\nimport { setPermissions } from '@/graphql/SetPermissions.gql'\nimport { getPermsByID } from '@/graphql/GetPermsByID.gql'\n\nimport { pathOr } from 'ramda'\nimport { mapState } from 'vuex'\n\nexport default {\n  data() {\n    return {\n      allPossiblePermissions: [],\n      editing: false,\n      identityId: null,\n      loading: false,\n      parsedPermissions: [],\n      permissions: [],\n      saveActivator: false,\n      saveSpeedDial: false,\n      saving: false,\n      showConfirmationDialog: false,\n      snackbar: false,\n      snackbarMessage: ''\n    }\n  },\n  mounted() {\n    this.loadPermissions()\n  },\n  computed: {\n    id() {\n      return ~~this.$route.params.id\n    },\n    ...mapState({\n      principalPermissions: state => state.user.principal.permissions\n    })\n  },\n  methods: {\n    async loadPermissions() {\n      this.loading = true\n      const credentials = await this.memberCredentials()\n      this.identityId = credentials.map(cMap => cMap.identityId)\n      this.permissions = await this.getPermsByIdentityId()\n      this.parsedPermissions = this.principalPermissions.map(pMap => {\n        pMap.hasPermission = this.userPermissionCheck(pMap)\n        return pMap\n      })\n      this.loading = false\n    },\n    async getAllPermissions() {\n      const res = await this.$apollo.query({\n        query: allPermissions,\n        variables: {\n          id: this.id\n        },\n        fetchPolicy: 'network-only'\n      })\n      const parsedRes = pathOr([], ['data', 'getAllPossiblePermissions'], res)\n\n      return parsedRes\n    },\n    async getPermsByIdentityId() {\n      const res = await this.$apollo.query({\n        query: getPermsByID,\n        variables: {\n          identityId: this.identityId[0]\n        },\n        fetchPolicy: 'network-only'\n      })\n      const parsedRes = pathOr([], ['data', 'iamGetPermsByID'], res)\n      const { permissions } = parsedRes\n      return permissions\n    },\n    async memberCredentials() {\n      const { data: { getMemberCredentials: { credentials } } } = await this.$apollo.query({\n        query: getMemberCredentials,\n        variables: {\n          input: {\n            memberId: this.id\n          }\n        }\n      })\n      return credentials\n    },\n    async upsertAttribute(attribute) {\n      await this.$apollo.mutate({\n        mutation: upsertMemberAttribute,\n        variables: {\n          input: {\n            id: attribute.id,\n            key: attribute.key,\n            value: attribute.value\n          }\n        }\n      })\n    },\n    async saveData() {\n      this.saving = true\n      let newPerms = []\n      this.parsedPermissions.map(ppMap => {\n        if (ppMap.hasPermission) {\n          newPerms.push(ppMap.id)\n        }\n      })\n      try {\n        await this.$apollo.mutate({\n          mutation: setPermissions,\n          variables: {\n            input: {\n              identityId: this.identityId[0],\n              permissionIds: newPerms\n            }\n          }\n        })\n        this.snackbarMessage = 'Permissions successfully saved!'\n        this.snackbar = true\n      } catch (error) {\n        this.snackbarMessage = 'An error occured while setting permissions'\n        this.snackbar = true\n        console.error(error)\n      }\n      this.editing = false\n      this.saving = false\n      this.loadPermissions()\n    },\n    async cancelEdit () {\n      this.editing = false\n    },\n    userPermissionCheck(permission) {\n      const pIdArr = this.permissions.map(pMap => pMap.id)\n      const pCheck = pIdArr.indexOf(permission.id) > -1\n      return pCheck\n    }\n  }\n}\n",{"version":3,"sources":["UserPermissions.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"UserPermissions.vue","sourceRoot":"src/views/users","sourcesContent":["<template>\n  <v-container xs6>\n    <v-layout column justify-space-around>\n      <template>\n        <v-progress-linear id=\"loading-bar\" :class=\"loading ? '' : 'loading-bar-fade'\" :indeterminate=\"loading\" />\n        <v-card :loading=\"loading\" class=\"permissions\">\n          <v-btn\n            :class=\"{ editbtn: true, sm: this.$vuetify.breakpoint.name === 'xs' }\"\n            v-if=\"!editing\"\n            absolute\n            dark\n            fab\n            top\n            right\n            color=\"pink\"\n            @click=\"editing = true\"\n          >\n            <v-icon>edit</v-icon>\n          </v-btn>\n          <v-speed-dial\n            absolute\n            dark\n            fab\n            top\n            right\n            color=\"pink\"\n            v-model=\"saveSpeedDial\"\n            direction=\"bottom\"\n            :open-on-hover=\"true\"\n            transition=\"slide-y-transition\"\n            :disabled=\"!saving\"\n            v-else\n            class=\"edit-speed-dial\"\n          >\n            <v-btn slot=\"activator\" v-model=\"saveActivator\" color=\"pink\" dark fab>\n              <v-icon>save</v-icon>\n              <v-icon>close</v-icon>\n            </v-btn>\n            <v-btn fab dark small color=\"green\" @click=\"saveData\">\n              <v-icon>check</v-icon>\n            </v-btn>\n            <v-btn fab dark small color=\"red\" @click=\"cancelEdit\">\n              <v-icon>cancel</v-icon>\n            </v-btn>\n          </v-speed-dial>\n          <v-layout v-for=\"(d, i) in parsedPermissions\" :key=\"i\" column wrap >\n            <v-checkbox\n              :label=\"d.name\"\n              v-model=\"d.hasPermission\"\n              class=\"text\"\n              :box=\"editing\"\n              :regular=\"!editing\"\n              :disabled=\"!editing\"\n            ></v-checkbox>\n          </v-layout>\n          <v-card-text v-if=\"!parsedPermissions.length && !loading\">There are no permissions for this member</v-card-text>\n        </v-card>\n      </template>\n    </v-layout>\n    <v-snackbar :timeout=\"8000\" :top=\"true\" :right=\"true\" v-model=\"snackbar\">\n      {{snackbarMessage}}\n      <v-btn flat color=\"pink\" @click.native=\"snackbar = false\">Close</v-btn>\n    </v-snackbar>\n    <v-dialog max-width=\"25vw\" v-model=\"showConfirmationDialog\">\n      <v-card>\n        <v-card-text class=\"text-xs-center\">\n          <v-card-text>Are you sure you want to remove this attribute?</v-card-text>\n          <v-btn color=\"error\" @click=\"removeOneAttribute()\">Yes</v-btn>\n        </v-card-text>\n      </v-card>\n    </v-dialog>\n  </v-container>\n</template>\n\n<script>\nimport { upsertMemberAttribute, getMemberCredentials } from '@/users/users.gql'\nimport { allPermissions } from '@/graphql/AllPermissions.gql'\nimport { setPermissions } from '@/graphql/SetPermissions.gql'\nimport { getPermsByID } from '@/graphql/GetPermsByID.gql'\n\nimport { pathOr } from 'ramda'\nimport { mapState } from 'vuex'\n\nexport default {\n  data() {\n    return {\n      allPossiblePermissions: [],\n      editing: false,\n      identityId: null,\n      loading: false,\n      parsedPermissions: [],\n      permissions: [],\n      saveActivator: false,\n      saveSpeedDial: false,\n      saving: false,\n      showConfirmationDialog: false,\n      snackbar: false,\n      snackbarMessage: ''\n    }\n  },\n  mounted() {\n    this.loadPermissions()\n  },\n  computed: {\n    id() {\n      return ~~this.$route.params.id\n    },\n    ...mapState({\n      principalPermissions: state => state.user.principal.permissions\n    })\n  },\n  methods: {\n    async loadPermissions() {\n      this.loading = true\n      const credentials = await this.memberCredentials()\n      this.identityId = credentials.map(cMap => cMap.identityId)\n      this.permissions = await this.getPermsByIdentityId()\n      this.parsedPermissions = this.principalPermissions.map(pMap => {\n        pMap.hasPermission = this.userPermissionCheck(pMap)\n        return pMap\n      })\n      this.loading = false\n    },\n    async getAllPermissions() {\n      const res = await this.$apollo.query({\n        query: allPermissions,\n        variables: {\n          id: this.id\n        },\n        fetchPolicy: 'network-only'\n      })\n      const parsedRes = pathOr([], ['data', 'getAllPossiblePermissions'], res)\n\n      return parsedRes\n    },\n    async getPermsByIdentityId() {\n      const res = await this.$apollo.query({\n        query: getPermsByID,\n        variables: {\n          identityId: this.identityId[0]\n        },\n        fetchPolicy: 'network-only'\n      })\n      const parsedRes = pathOr([], ['data', 'iamGetPermsByID'], res)\n      const { permissions } = parsedRes\n      return permissions\n    },\n    async memberCredentials() {\n      const { data: { getMemberCredentials: { credentials } } } = await this.$apollo.query({\n        query: getMemberCredentials,\n        variables: {\n          input: {\n            memberId: this.id\n          }\n        }\n      })\n      return credentials\n    },\n    async upsertAttribute(attribute) {\n      await this.$apollo.mutate({\n        mutation: upsertMemberAttribute,\n        variables: {\n          input: {\n            id: attribute.id,\n            key: attribute.key,\n            value: attribute.value\n          }\n        }\n      })\n    },\n    async saveData() {\n      this.saving = true\n      let newPerms = []\n      this.parsedPermissions.map(ppMap => {\n        if (ppMap.hasPermission) {\n          newPerms.push(ppMap.id)\n        }\n      })\n      try {\n        await this.$apollo.mutate({\n          mutation: setPermissions,\n          variables: {\n            input: {\n              identityId: this.identityId[0],\n              permissionIds: newPerms\n            }\n          }\n        })\n        this.snackbarMessage = 'Permissions successfully saved!'\n        this.snackbar = true\n      } catch (error) {\n        this.snackbarMessage = 'An error occured while setting permissions'\n        this.snackbar = true\n        console.error(error)\n      }\n      this.editing = false\n      this.saving = false\n      this.loadPermissions()\n    },\n    async cancelEdit () {\n      this.editing = false\n    },\n    userPermissionCheck(permission) {\n      const pIdArr = this.permissions.map(pMap => pMap.id)\n      const pCheck = pIdArr.indexOf(permission.id) > -1\n      return pCheck\n    }\n  }\n}\n</script>\n\n<style>\n.permissions {\n  display: flex;\n  flex-grow: 1;\n  flex-direction: row;\n  flex-wrap: wrap;\n  padding: 18px 0px 18px 100px;\n}\n\n.attribute-remove-button-center {\n  text-align: center;\n}\n\n.text {\n  padding: 0 10px;\n}\n.editbtn.sm {\n  top: -5px !important;\n}\n.editbtn {\n  top: -13px !important;\n  right: -28px;\n}\n.edit-speed-dial {\n  top: 15px !important;\n  right: -28px;\n}\n#loading-bar {\n  top: -14px;\n  position: relative;\n  margin: 0;\n  opacity: 1;\n}\n.loading-bar-fade {\n  opacity: 0 !important;\n  transition: opacity 1500ms ease-out;\n}\n</style>\n"]}]}