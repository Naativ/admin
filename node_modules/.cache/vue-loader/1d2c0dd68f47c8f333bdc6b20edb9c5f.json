{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/members/ContactCardAddresses.vue?vue&type=style&index=0&id=40dc0ea2&scoped=true&lang=css&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/members/ContactCardAddresses.vue","mtime":1577329618150},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.findme {\n  border: 2px solid red;\n}\n.details {\n  text-align: left;\n}\n.addresses {\n  display: flex;\n  flex-direction: column;\n  height: 39vh;\n  flex-wrap: wrap;\n  min-width: 45vw;\n  padding-top: 11px;\n  padding-top: 48px;\n  position: relative;\n}\n#contact-list {\n  width: 100%;\n}\n.address-title {\n  position: absolute;\n  top: 9px;\n}\n.contact-section-heading {\n  display: inline;\n}\n.edit-button-address {\n  position: absolute;\n  top: 8px;\n  left: 69px;\n}\n",{"version":3,"sources":["ContactCardAddresses.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ContactCardAddresses.vue","sourceRoot":"src/views/members","sourcesContent":["<template>\n  <div\n    v-if  =\"model && model.addresses\"\n  >\n    <v-list-tile-sub-title\n      class =\"addresses\"\n      v-for =\"(address, index) in model.addresses\"\n      :key  =\"index\"\n    >\n      <h4 class=\"address-title\">Address {{model.addresses.length > 1 ? index+1 : null}}</h4>\n      <EditButton\n        class          =\"edit-button-address\"\n        :index         =\"index\"\n        :disabled      =\"disabled[index]\"\n        @editClicked   =\"editClicked(index)\"\n        @saveClicked   =\"saveClicked(index)\"\n        @cancelClicked =\"cancelClicked(index)\"\n      />\n      <v-select\n        prepend-icon =\"house\"\n        label   =\"Type\"\n        :disabled    =\"disabled[index]\"\n        :items  =\"[{text:'Shipping', value: 'shipping'}, {text: 'Billing', value: 'billing'}]\"\n        v-model =\"model.type[index].type\"\n      />\n      <v-text-field\n        :label       =\"addressField\"\n        prepend-icon =\"house\"\n        :disabled    =\"disabled[index]\"\n        v-model      =\"model.addresses[index][addressField]\"\n        v-for        =\"(addressField, addressIndex) in Object.keys(model.addresses[index])\"\n        :key         =\"`address-field-${addressIndex}`\"\n      >\n      </v-text-field>\n    </v-list-tile-sub-title>\n    <v-card-actions>\n      <v-tooltip bottom>\n        <template slot=\"activator\">\n          <v-btn @click=\"addAddress\" round>\n            <v-icon>add</v-icon>\n          </v-btn>\n        </template>\n        <span>Add New Address</span>\n      </v-tooltip>\n    </v-card-actions>\n  </div>\n</template>\n\n<script>\nimport { cloneDeep, get } from 'lodash'\n\nimport { ContactCardAddressesGQL, UpdateAddressesMutation } from '../../users/members.gql'\nimport EditButton from './EditButton'\n\nconst blankAddress = {\n  name: null,\n  street: null,\n  street2: null,\n  city: null,\n  province: null,\n  country: null,\n  postalCode: null,\n  lat: null,\n  long: null\n}\n\nexport default {\n  name: 'ContactCardAddresses',\n  components: {\n    EditButton\n  },\n  data () {\n    return {\n      model: {},\n      disabled: [],\n      memberId: ~~this.$route.params.id,\n      contactId: null\n    }\n  },\n  methods: {\n    editClicked (index) {\n      this.setDisabled(index, false)\n    },\n    async saveClicked(index) {\n      this.setDisabled(index, true)\n\n      const { contactId } = this\n      const { id } = this.addresses.addresses[index] ? this.addresses.addresses[index] : { id: undefined }\n      const { type } = this.model.type[index]\n\n      const input = {\n        id,\n        contactId,\n        name: this.model.addresses[index].name,\n        type: type ? type.toUpperCase() : type,\n        street: this.model.addresses[index].street,\n        street2: this.model.addresses[index].street2,\n        city: this.model.addresses[index].city,\n        province: this.model.addresses[index].province,\n        postalCode: this.model.addresses[index].postalCode,\n        country: this.model.addresses[index].country,\n        lat: this.model.addresses[index].lat,\n        long: this.model.addresses[index].long\n      }\n\n      try {\n        const addressUpdateRes = await this.$apollo.mutate({\n          mutation: UpdateAddressesMutation,\n          variables: {\n            input\n          }\n        })\n        this.$emit('snackbarEmit', 'Address saved!')\n\n        this.$apollo.queries.addresses.refetch()\n        this.initMember(this.addresses)\n\n        return addressUpdateRes\n      } catch (error) {\n        this.$emit('snackbarEmit', 'Error updating address!')\n        throw new Error(error.message)\n      }\n    },\n    async cancelClicked (index) {\n      this.setDisabled(index, true)\n      this.initMember(this.addresses)\n    },\n    initMember(contact) {\n      this.model = cloneDeep(contact)\n      this.model.type = []\n\n      this.model.addresses.forEach((address, index) => {\n        delete this.model.addresses[index].id\n        delete this.model.addresses[index].contactId\n        delete this.model.addresses[index].type\n        delete this.model.addresses[index].__typename\n\n        this.model.type.push({\n          id: this.addresses.addresses[index].id,\n          type: this.addresses.addresses[index].type\n        })\n      })\n\n      if (!this.model.addresses.length) {\n        this.model = {\n          ...this.model,\n          addresses: [blankAddress]\n        }\n      }\n\n      const disabled = Array(this.model.addresses.length).fill(true)\n      this.$apollo.queries.addresses.refetch()\n      this.disabled = disabled\n    },\n    setDisabled(index, value) {\n      const disabled = Array(this.model.addresses.length).fill(true)\n\n      disabled[index] = value\n      this.disabled = disabled\n    },\n    addAddress() {\n      this.model.addresses.push(blankAddress)\n      this.model.type.push({ type: undefined, id: undefined })\n      this.disabled.push(false)\n    }\n  },\n  watch: {\n    addresses (next) {\n      this.contactId = next.id\n      this.initMember(next)\n    },\n    '$route'(newRoute) {\n      const { params: { id } } = newRoute\n      this.memberId = ~~id\n    }\n  },\n  apollo: {\n    addresses: {\n      ...ContactCardAddressesGQL,\n      variables() {\n        return {\n          memberId: this.memberId\n        }\n      },\n      update(data) {\n        let member = { ...get(data, 'members.nodes.0') }\n        const { contacts } = member\n\n        if (contacts && Array.isArray(contacts) && contacts.length < 2) {\n          return contacts[0]\n        }\n        return contacts\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.findme {\n  border: 2px solid red;\n}\n.details {\n  text-align: left;\n}\n.addresses {\n  display: flex;\n  flex-direction: column;\n  height: 39vh;\n  flex-wrap: wrap;\n  min-width: 45vw;\n  padding-top: 11px;\n  padding-top: 48px;\n  position: relative;\n}\n#contact-list {\n  width: 100%;\n}\n.address-title {\n  position: absolute;\n  top: 9px;\n}\n.contact-section-heading {\n  display: inline;\n}\n.edit-button-address {\n  position: absolute;\n  top: 8px;\n  left: 69px;\n}\n</style>\n"]}]}