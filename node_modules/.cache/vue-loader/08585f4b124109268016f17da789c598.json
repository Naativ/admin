{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/users/UsersFrame.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/users/UsersFrame.vue","mtime":1570835920000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.results {\n  margin-top: 5px;\n  border-color: black;\n  border-style: solid;\n  position: absolute;\n  z-index: 5;\n  width: 600px !important;\n}\n\n.search {\n  width: 350px;\n}\n\n.text {\n  padding-right: 10px;\n}\n",{"version":3,"sources":["UsersFrame.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"UsersFrame.vue","sourceRoot":"src/views/users","sourcesContent":["<template>\n  <UsersWorkbench :memberId=\"memberId\">\n    <router-view />\n  </UsersWorkbench>\n</template>\n\n<script>\nimport { mapActions, mapState } from 'vuex'\nimport { UsersActions } from '@/users/UsersStore'\nimport UsersWorkbench from './UsersWorkbench.vue'\nimport { TenantsActions } from '@/tenants/TenantsStore'\nexport default {\n  components: {\n    UsersWorkbench\n  },\n  data () {\n    return {\n      drawer: null,\n      valid: true,\n      term: '',\n      tags: [],\n      memberId: null\n    }\n  },\n  mounted () {\n    this.searched.results = []\n    this.parseMemberId()\n    this[TenantsActions.FETCH_MEMBER_TAGS]()\n  },\n  methods: {\n    ...mapActions([UsersActions.FETCH_USERS, TenantsActions.FETCH_MEMBER_TAGS]),\n    clearSearch () {\n      this.searched.results = []\n    },\n    open (user) {\n      this.$router.push('/members/' + user.id)\n      this.searched.results = []\n    },\n    search () {\n      const { term, tags } = this\n      this.usersFetch({ term, tags: tags.map(e => e.name) })\n    },\n    remove (item) {\n      this.tags.splice(this.tags.indexOf(item), 1)\n      this.tags = [...this.tags]\n    },\n    parseMemberId (to) {\n      const { id } = (to || this.$route || { params: {} }).params\n      if (id) {\n        this.memberId = ~~id\n      } else {\n        this.memberId = null\n      }\n    }\n  },\n  computed: {\n    ...mapState({\n      searched: state => state.users.searched,\n      availableTags: state => state.tenants.tags\n    })\n  },\n  async beforeRouteUpdate (to, from, next) {\n    this.parseMemberId(to)\n    next()\n  }\n}\n</script>\n\n<style>\n.results {\n  margin-top: 5px;\n  border-color: black;\n  border-style: solid;\n  position: absolute;\n  z-index: 5;\n  width: 600px !important;\n}\n\n.search {\n  width: 350px;\n}\n\n.text {\n  padding-right: 10px;\n}\n</style>\n"]}]}