{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/members/CredentialCard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/members/CredentialCard.vue","mtime":1577329618151},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { cloneDeep, get } from 'lodash'\n\nimport { CredentialsCardGQL, UsernameUpsert } from '../../users/members.gql'\nimport EditButton from './EditButton'\n\nexport default {\n  name: 'CredentialCard',\n  components: {\n    EditButton\n  },\n  data () {\n    return {\n      disabled: true,\n      model: null,\n      memberId: ~~this.$route.params.id\n    }\n  },\n  methods: {\n    editClicked () {\n      this.disabled = false\n    },\n    async saveClicked() {\n      const { username } = this.model\n      const { identityId } = this.credentials\n      const input = {\n        identityId,\n        username\n      }\n\n      try {\n        const addressUpdateRes = await this.$apollo.mutate({\n          mutation: UsernameUpsert,\n          variables: {\n            input\n          }\n        })\n\n        this.$emit('snackbarEmit', 'System Information saved!')\n\n        this.$apollo.queries.credentials.refetch()\n        return addressUpdateRes\n      } catch (error) {\n        this.$emit('snackbarEmit', error.message)\n        throw new Error('Error updating address!')\n      }\n    },\n    async cancelClicked (index) {\n      await this.$apollo.queries.credentials.refetch()\n      this.initMember(this.credentials)\n    },\n    initMember(contact) {\n      this.model = cloneDeep(contact)\n\n      delete this.model.__typename\n      delete this.model.id\n      delete this.model.identityId\n      this.disabled = true\n    }\n  },\n  watch: {\n    credentials (next) {\n      this.initMember(next)\n    },\n    '$route'(newRoute) {\n      const { params: { id } } = newRoute\n      this.memberId = ~~id\n    }\n  },\n  apollo: {\n    credentials: {\n      ...CredentialsCardGQL,\n      variables() {\n        return {\n          input: {\n            memberId: this.memberId\n          }\n        }\n      },\n      update(data) {\n        let credentials = { ...get(data, 'getMemberCredentials.credentials.0') }\n        return credentials\n      }\n    }\n  }\n}\n",{"version":3,"sources":["CredentialCard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CredentialCard.vue","sourceRoot":"src/views/members","sourcesContent":["<template>\n  <div>\n    <v-subheader>\n      <span class=\"section-subheader\">System Information</span>\n      <EditButton\n        id                          =\"credentials-edit-btn\"\n        :disabled                   =\"disabled\"\n        @editClicked                =\"editClicked\"\n        @saveClicked                =\"saveClicked\"\n        @cancelClicked              =\"cancelClicked\"\n      />\n    </v-subheader>\n    <v-container grid-list-md text-xs-center>\n      <v-card tile>\n        <v-layout row wrap>\n          <v-card-text\n            v-if  =\"model\"\n          >\n            <v-list-tile-sub-title\n              class =\"credentials\"\n              v-for =\"(credential, index) in Object.keys(model)\"\n              :key  =\"index\"\n            >\n              <v-text-field\n                :label       =\"credential\"\n                prepend-icon =\"house\"\n                :disabled    =\"disabled\"\n                v-model      =\"model[credential]\"\n                :key         =\"`address-field-${credential}`\"\n              >\n              </v-text-field>\n            </v-list-tile-sub-title>\n          </v-card-text>\n        </v-layout>\n      </v-card>\n    </v-container>\n  </div>\n</template>\n\n<script>\nimport { cloneDeep, get } from 'lodash'\n\nimport { CredentialsCardGQL, UsernameUpsert } from '../../users/members.gql'\nimport EditButton from './EditButton'\n\nexport default {\n  name: 'CredentialCard',\n  components: {\n    EditButton\n  },\n  data () {\n    return {\n      disabled: true,\n      model: null,\n      memberId: ~~this.$route.params.id\n    }\n  },\n  methods: {\n    editClicked () {\n      this.disabled = false\n    },\n    async saveClicked() {\n      const { username } = this.model\n      const { identityId } = this.credentials\n      const input = {\n        identityId,\n        username\n      }\n\n      try {\n        const addressUpdateRes = await this.$apollo.mutate({\n          mutation: UsernameUpsert,\n          variables: {\n            input\n          }\n        })\n\n        this.$emit('snackbarEmit', 'System Information saved!')\n\n        this.$apollo.queries.credentials.refetch()\n        return addressUpdateRes\n      } catch (error) {\n        this.$emit('snackbarEmit', error.message)\n        throw new Error('Error updating address!')\n      }\n    },\n    async cancelClicked (index) {\n      await this.$apollo.queries.credentials.refetch()\n      this.initMember(this.credentials)\n    },\n    initMember(contact) {\n      this.model = cloneDeep(contact)\n\n      delete this.model.__typename\n      delete this.model.id\n      delete this.model.identityId\n      this.disabled = true\n    }\n  },\n  watch: {\n    credentials (next) {\n      this.initMember(next)\n    },\n    '$route'(newRoute) {\n      const { params: { id } } = newRoute\n      this.memberId = ~~id\n    }\n  },\n  apollo: {\n    credentials: {\n      ...CredentialsCardGQL,\n      variables() {\n        return {\n          input: {\n            memberId: this.memberId\n          }\n        }\n      },\n      update(data) {\n        let credentials = { ...get(data, 'getMemberCredentials.credentials.0') }\n        return credentials\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.findme {\n  border: 2px solid red;\n}\n.details {\n  text-align: left;\n}\n#credentials-list {\n  width: 100%;\n}\n</style>\n"]}]}