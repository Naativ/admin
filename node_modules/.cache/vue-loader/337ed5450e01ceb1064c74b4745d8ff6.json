{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/users/TeamGraph.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/users/TeamGraph.vue","mtime":1570835920000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport MonthSelector from '@/components/MonthSelector'\n\nimport { initialize, updateHeightDepth, collapse,\n  checkParentOfPinned } from './TeamGraph.d3.js'\n// import { OLD_QUERY } from '@/graphql/GetTeam'\nimport searchSalesBySellerId from '@/graphql/searchSalesBySellerId.gql'\nimport SalesStats from '@/graphql/SalesStats.gql'\n// import _ from 'lodash'\nimport moment from 'moment'\nimport { map } from 'ramda'\nimport * as d3 from 'd3'\n\nexport default {\n  data () {\n    return {\n      searchTerm: '',\n      graph: null,\n      root: null,\n      radialRoot: null,\n      graphOptions: [\n        { option: 'Horizontal Tree' },\n        { option: 'Vertical Tree' },\n        { option: 'Radial Tree' }\n      ],\n      select: { option: 'Vertical Tree' },\n      graphType: 'VT',\n      month: moment()\n        .format('MM'),\n      year: moment().format('YYYY'),\n      startDate: moment()\n        .startOf('month')\n        .format('YYYY-MM-DD'),\n      endDate: moment()\n        .startOf('month')\n        .format('YYYY-MM-DD'),\n      tableColumns: [\n        {\n          text: 'Show Details',\n          value: 'string',\n          align: 'left',\n          sortable: false\n        },\n        { text: 'Date', value: 'date' },\n        { text: 'Sale Total', value: 'total' },\n        { text: 'Total Points', value: 'points' },\n        { text: 'Commissionable Total', value: 'comTotal' },\n        { text: 'Commissionable Points', value: 'comPoints' },\n        { text: 'Seller Name', value: 'displayName' },\n        { text: 'Seller Email', value: 'contactEmail' }\n      ],\n      contextMenuOptions: {\n        unPinMenu: {\n          title: `UnPin Member`,\n          action: this.pinMember\n        },\n        pinMenu: {\n          title: `Pin Member`,\n          action: this.pinMember\n        },\n        displaySales: {\n          title: `Display Sales`,\n          action: this.updateSales\n        },\n        collapseMenu: {\n          title: `Collapse Team`,\n          action: this.collapseTeam\n        },\n        expandMenu: {\n          title: `Expand Team`,\n          action: this.expandTeam\n        },\n        loadChildrenMenu: {\n          title: `Load Team`,\n          action: this.loadChildrenMenu\n        },\n        center: {\n          title: `Center`,\n          action: this.centerMember\n        }\n      },\n      zoomControls: [\n        {\n          control: 'zoomIn',\n          img: '/img/icons/zoomIn.png',\n          action: this.zoom,\n          data: { amount: 1.02 }\n        },\n        {\n          control: 'zoomOut',\n          img: '/img/icons/zoomOut.png',\n          action: this.zoom,\n          data: { amount: 0.98 }\n        }],\n      panControls: [\n        {\n          control: 'panLeft',\n          img: '/img/icons/leftArrow.png',\n          action: this.pan,\n          translate: { x: -1, y: 0 },\n          data: { x: 10, y: 0 }\n        },\n        {\n          control: 'panUp',\n          img: '/img/icons/upArrow.png',\n          action: this.pan,\n          translate: { x: 0, y: -1 },\n          data: { x: 0, y: 10 }\n        },\n        {\n          control: 'panDown',\n          img: '/img/icons/downArrow.png',\n          action: this.pan,\n          translate: { x: 0, y: 1 },\n          data: { x: 0, y: -10 }\n        },\n        {\n          control: 'panRight',\n          img: '/img/icons/rightArrow.png',\n          action: this.pan,\n          translate: { x: 1, y: 0 },\n          data: { x: -10, y: 0 }\n        }\n      ],\n      sales: [],\n      pinned: null,\n      fetchedData: {},\n      memberDict: {},\n      firstPin: true,\n      memberId: null,\n      sellerId: null,\n      loading: false\n    }\n  },\n  watch: {\n    select (newSelection) {\n      this.changeGraphType(newSelection)\n    }\n  },\n  components: {\n    MonthSelector\n  },\n  async mounted () {\n    const cfg = {\n      el: this.$refs.graph,\n      clickNode: this.clickNode,\n      root: this.root,\n      contextMenuFunc: this.contextMenuFunc,\n      ranks: this.ranks,\n      getRoot: this.getRoot,\n      setRoot: this.setRoot,\n      getSearchTerm: this.getSearchTerm,\n      getLoading: this.getLoading,\n      zoomControls: this.zoomControls,\n      panControls: this.panControls,\n      getGraphType: this.getGraphType,\n      setRadialRoot: this.setRadialRoot,\n      getRadialRoot: this.getRadialRoot\n    }\n    this.loading = true\n    this.memberId = ~~this.$route.params.id\n    this.sellerId = this.memberId\n    this.fetchedData = await this.fetchData({ memberId: this.memberId })\n    this.graph = initialize(cfg, this.fetchedData)\n    this.pin(this.root)\n    this.loading = false\n  },\n  methods: {\n    zoom ({ amount }) {\n      this.graph.zoomInAndOut({ amount })\n    },\n    pan ({ x, y }) {\n      this.graph.panAround({ x, y })\n    },\n    search () {\n      this.updateGraph({ source: this.root })\n    },\n    dateChanged ({ date }) {\n      this.startDate = moment(date).startOf('month').format('YYYY-MM-DD')\n      this.endDate = moment(date).endOf('month').format('YYYY-MM-DD')\n      this.refreshGraph()\n    },\n    changeGraphType ({ option }) {\n      switch (option) {\n        case 'Horizontal Tree':\n          if (this.graphType !== 'HT') { this.graphType = 'HT' } else return\n          break\n        case 'Vertical Tree':\n          if (this.graphType !== 'VT') { this.graphType = 'VT' } else return\n          break\n        case 'Radial Tree':\n          if (this.graphType !== 'RT') { this.graphType = 'RT' } else return\n          break\n      }\n      this.searchTerm = ''\n      this.graph.changeGraphType(this.root, this.graphType)\n      this.updateGraph({ center: true, updateHeight: true })\n    },\n    getGraphType () {\n      return this.graphType\n    },\n    getRoot () {\n      return this.root\n    },\n    setRoot (newRoot) {\n      this.root = newRoot\n    },\n    getRadialRoot () {\n      return this.radialRoot\n    },\n    setRadialRoot (newRoot) {\n      this.radialRoot = newRoot\n    },\n    getSearchTerm () {\n      return this.searchTerm === '' ? null : this.searchTerm.toLowerCase()\n    },\n    getLoading () {\n      return this.loading\n    },\n    reloadGraph () {\n      this.graph.loadGraph({ fetchedData: this.fetchedData, graphType: this.graphType })\n      this.pin(this.root)\n      this.centerMember(this.root, this.graphType)\n    },\n    updateGraph (updateOptions) {\n      const updateInput = {\n        source: this.root,\n        pinned: this.pinned,\n        firstPin: this.firstPin,\n        graphType: this.graphType,\n        ...updateOptions\n      }\n      this.graph.update(updateInput)\n    },\n    zoomOut () {\n      this.graph.zoomInAndOut({ amount: 0.8 })\n    },\n    pin (node) {\n      // To be implemented in the future\n\n      // if (this.pinned !== node) {\n      //         this.pinned = node\n      //         this.updateSellerId(this.pinned.data.data.memberId)\n      //       } else {\n      //         this.firstPin = true\n      //         this.pinned = null\n      //         this.updateSellerId(null)\n      //       }\n      //       this.graph.updatePinned(this.pinned, this.firstPin)\n      //       this.firstPin = !this.pinned\n\n      this.pinned = null\n    },\n    clickNode (selected) {\n      if (selected._children) {\n        selected.children = selected._children\n        selected._children = null\n        if (this.graphType === 'RT') {\n          this.radialRoot = selected\n        }\n        this.updateGraph({ source: selected, center: true, updateHeight: true })\n      } else if (!checkParentOfPinned(selected, this.pinned)) {\n        if (selected.children || (selected.data.id === this.radialRoot.data.id && this.graphType === 'RT')) {\n          selected._children = selected.children\n          selected.children = null\n          if (this.graphType === 'RT' && selected.parent) {\n            this.radialRoot = selected.parent\n            this.updateGraph({ source: selected.parent, center: true, updateHeight: true })\n          } else { this.updateGraph({ source: selected, center: true, updateHeight: true }) }\n        } else {\n          this.loadChildrenMenu(selected)\n        }\n      }\n      // this.updateGraph({ source: selected, center: true, updateHeight: true })\n    },\n    centerMember (d) {\n      this.graph.centerMember(d, this.graphType)\n    },\n    updateSales (d) {\n      this.updateSellerId(d ? d.data.data.memberId : null)\n    },\n    updateSellerId (newId) {\n      this.sellerId = newId\n    },\n    contextMenuFunc (data) {\n      const menu = []\n      menu.push(this.contextMenuOptions[`displaySales`])\n      menu.push(this.contextMenuOptions[`center`])\n\n      if (data.children) menu.push(this.contextMenuOptions[`collapseMenu`])\n      else if (data._children) {\n        menu.push(this.contextMenuOptions[`expandMenu`])\n      } else if (data.data.data.frontLineSize > 0) {\n        menu.push(this.contextMenuOptions[`loadChildrenMenu`])\n      }\n\n      return menu\n    },\n    pinMember (d) {\n      this.pin(d)\n    },\n    collapseTeam (d) {\n      if (d.children) {\n        d._children = d.children\n        d.children = null\n      }\n      this.updateGraph({ source: d, center: true })\n    },\n    expandTeam (d) {\n      if (d._children) {\n        d.children = d._children\n        d._children = null\n      }\n      this.updateGraph({ source: d, center: true })\n    },\n    async loadChildrenMenu (d, i) {\n      if (d.data.data.frontLineSize > 0 && !d.children && !d._children) {\n        this.loading = true\n        let newChild = await this.fetchData({ memberId: d.data.data.memberId })\n        let newNode = d3.hierarchy(newChild, d => d.children)\n        if (newNode.children) {\n          newNode.children.forEach(child => { child.parent = d })\n\n          d.children = [...newNode.children]\n          d.data.children = [...newNode.data.children]\n\n          updateHeightDepth(this.root, 0)\n\n          d.children.forEach(collapse)\n        } else { d.data.data.leaf = true }\n        this.loading = false\n      } else {\n        d.data.data.leaf = true\n      }\n      if (this.graphType === 'RT') {\n        this.radialRoot = d\n      }\n\n      this.updateGraph({ source: d, center: true, updateHeight: true })\n    },\n    async refreshGraph () {\n      this.loading = true\n      let memberIds = Object.keys(this.memberDict).map(Number)\n      const { data: { saleStatsByDateRange } } = await this.$apollo.query({\n        query: SalesStats,\n        variables: {\n          input: {\n            sponsorIds: [],\n            memberIds: memberIds,\n            startDate: this.startDate,\n            endDate: this.endDate,\n            mode: 'YEAR_AND_MONTH_CUBED',\n            sorts: [{ field: 'JOIN_DATE', direction: 'ASC' }]\n          }\n        }\n      })\n      await saleStatsByDateRange.forEach(member => {\n        this.memberDict[member.memberId] = {\n          memberId: member.memberId,\n          sponsorId: member.sponsorId,\n          displayName: member.displayName,\n          profileUrl: member.profileUrl,\n          teamSize: member.teamSize,\n          frontLineSize: member.frontLineSize,\n          totalPoints: member.stats[member.stats.length - 1].totalPoints,\n          totalAmount: member.stats[member.stats.length - 1].totalAmount\n          // _data: member\n        }\n      })\n      this.refreshNode({ node: this.root, dataChild: false })\n      this.updateGraph({ source: this.root, center: false })\n      this.loading = false\n    },\n    refreshNode ({ node, dataChild }) {\n      if (dataChild) {\n        node.data = this.memberDict[node.id]\n        return\n      }\n      node.data.data = this.memberDict[node.data.id]\n      if (node.children) {\n        node.children.forEach(child => {\n          this.refreshNode({ node: child })\n        })\n      }\n      if (node.data.children) {\n        node.data.children.forEach(child => {\n          this.refreshNode({ node: child, dataChild: true })\n        })\n      }\n      if (node._children) {\n        node._children.forEach(child => {\n          this.refreshNode({ node: child })\n        })\n      }\n    },\n    async fetchData ({ memberId }) {\n      const { data: { saleStatsByDateRange } } = await this.$apollo.query({\n        query: SalesStats,\n        variables: {\n          input: {\n            sponsorIds: [memberId],\n            memberIds: [memberId],\n            startDate: this.startDate,\n            endDate: this.endDate,\n            mode: 'YEAR_AND_MONTH_CUBED',\n            sorts: [{ field: 'JOIN_DATE', direction: 'ASC' }]\n          }\n        }\n      })\n      if (saleStatsByDateRange) {\n        const tempArr = []\n        await saleStatsByDateRange.forEach(member => {\n          this.memberDict[member.memberId] = {\n            memberId: member.memberId,\n            sponsorId: member.sponsorId,\n            displayName: member.displayName,\n            profileUrl: member.profileUrl,\n            teamSize: member.teamSize,\n            frontLineSize: member.frontLineSize,\n            totalPoints: member.stats[member.stats.length - 1].totalPoints,\n            totalAmount: member.stats[member.stats.length - 1].totalAmount\n            // _data: member// As far as I know we don't need this\n          }\n          tempArr.push({\n            memberId: member.memberId,\n            sponsorId: member.memberId === memberId ? null : member.sponsorId,\n            displayName: member.displayName,\n            profileUrl: member.profileUrl,\n            teamSize: member.teamSize,\n            frontLineSize: member.frontLineSize,\n            totalPoints: member.stats[member.stats.length - 1].totalPoints,\n            totalAmount: member.stats[member.stats.length - 1].totalAmount\n            // _data: member// As far as I know we don't need this\n          })\n        })\n\n        let stratifiedObj = {}\n        // Create a tree like structure from our data\n        stratifiedObj = await d3.stratify()\n          .id(d => d.memberId)\n          .parentId(d => d.sponsorId)(tempArr)\n\n        const { children } = stratifiedObj\n        if (!children) return stratifiedObj\n\n        // Alphabetically sort the teamMembers\n        children.sort((a, b) => (a.data.displayName.toLowerCase() > b.data.displayName.toLowerCase()) ? 1 : ((b.data.displayName.toLowerCase() > a.data.displayName.toLowerCase()) ? -1 : 0))\n\n        return stratifiedObj\n      }\n      return null\n    }\n  },\n  computed: {\n    items () {\n      return map(sale => {\n        return {\n          ...sale,\n          id: sale.saleId,\n          date: moment(sale.awardedDate, 'YYYY-MM-DD').format('MM/DD/YYYY')\n        }\n      }, this.sales)\n    },\n    currentId: {\n      get: function () {\n        const id = this.$route.params.id\n        return parseInt(id)\n      },\n      set: function () {\n      }\n    }\n  },\n  apollo: {\n    sales: {\n      query: searchSalesBySellerId,\n      variables () {\n        return {\n          saleSearchInput: {\n            tenantId: this.$store.state.user.principal.tenantId,\n            startDate: this.startDate,\n            endDate: this.endDate,\n            query: null,\n            sellerId: this.sellerId\n          }\n        }\n      },\n      error (err) {\n        this.loading = false\n        console.error({ err })\n      },\n      debounce: 500,\n      update ({ searchSalesBySellerId }) {\n        this.loading = false\n        return searchSalesBySellerId\n      }\n    }\n  }\n}\n",{"version":3,"sources":["TeamGraph.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"TeamGraph.vue","sourceRoot":"src/views/users","sourcesContent":["<template>\n  <div>\n    <v-layout row justify-space-between style=\"margin-left: 12.5%; margin-right: 12.5%;\">\n      <v-flex xs3>\n        <MonthSelector :year=\"year\" :month=\"month\" @date-changed=\"dateChanged\"/>\n      </v-flex>\n      <v-flex xs5>\n        <form @submit.prevent=\"search\" autocomplete=\"off\">\n          <v-flex>\n            <v-layout row>\n              <v-flex>\n                <v-text-field\n                  v-model=\"searchTerm\"\n                  append-icon=\"search\"\n                  type=\"text\"\n                  name=\"searchTerm\"\n                  label=\"Enter name\"\n                  c-on:keyup.enter=\"search\"\n                  xs9\n                  hint=\"Enter to Submit\"\n                ></v-text-field>\n              </v-flex>\n            </v-layout>\n          </v-flex>\n        </form>\n      </v-flex>\n      <v-flex xs2>\n        <v-select\n          v-model=\"select\"\n          :items=\"graphOptions\"\n          item-text=\"option\"\n          label=\"Graph Type\"\n          return-object\n        ></v-select>\n      </v-flex>\n    </v-layout>\n    <div ref=\"graph\"></div>\n    <v-progress-linear v-if=\"loading\" :indeterminate=\"true\" color=\"grey\"></v-progress-linear>\n    <v-data-table :headers=\"tableColumns\" :items=\"items\" item-key=\"id\" class=\"elevation-1\" expand>\n      <template slot=\"items\" slot-scope=\"props\">\n        <tr @click=\"props.expanded = !props.expanded\">\n          <td>\n            <a>Details</a>\n          </td>\n          <td>{{ props.item.date }}</td>\n          <td>${{ props.item.total }}</td>\n          <td>{{ props.item.totalPoints }}</td>\n          <td>{{ props.item.commissionableAmount }}</td>\n          <td>{{ props.item.commissionablePoints }}</td>\n          <td>{{ props.item.displayName }}</td>\n          <td>{{ props.item.sellerEmail }}</td>\n        </tr>\n      </template>\n      <template slot=\"expand\" slot-scope=\"props\">\n        <div class=\"pa-3 sale-details\">\n          <v-container fluid>\n            <v-layout>\n              <v-flex xs4>\n                <h4>Details:</h4>\n                <ul>\n                  <li>Originating ID: {{props.item.providerOid}}</li>\n                  <li>Status: {{props.item.status}}</li>\n                  <li>Customer Note: {{props.item.customerNote}}</li>\n                </ul>\n              </v-flex>\n              <v-flex xs4>\n                <h4>Customer Info:</h4>\n                <ul>\n                  <li>{{props.item.shippingFirstName}} {{props.item.shippingLastName}}</li>\n                  <li>{{props.item.shippingAddress1}}</li>\n                  <li>{{props.item.shippingAddress2}}</li>\n                  <li>{{props.item.shippingCity}}, {{props.item.shippingState}} {{props.item.shippingZip}}</li>\n                </ul>\n              </v-flex>\n              <v-flex xs4>\n                <h4>Billing Info:</h4>\n                <ul>\n                  <li>{{props.item.billingFirstName}} {{props.item.billingLastName}}</li>\n                  <li>{{props.item.billingAddress1}}</li>\n                  <li>{{props.item.billingAddress2}}</li>\n                  <li>{{props.item.billingCity}}, {{props.item.billingState}} {{props.item.billingZip}}</li>\n                </ul>\n              </v-flex>\n            </v-layout>\n            <v-layout>\n              <v-flex xs12>\n                <h4>Line Items</h4>\n                <ul>\n                  <li\n                    v-for=\"line in props.item.lineItems\"\n                    :key=\"line.id\"\n                  >{{line.name}} ({{line.total}})</li>\n                </ul>\n              </v-flex>\n            </v-layout>\n          </v-container>\n        </div>\n      </template>\n    </v-data-table>\n  </div>\n</template>\n\n<script>\nimport MonthSelector from '@/components/MonthSelector'\n\nimport { initialize, updateHeightDepth, collapse,\n  checkParentOfPinned } from './TeamGraph.d3.js'\n// import { OLD_QUERY } from '@/graphql/GetTeam'\nimport searchSalesBySellerId from '@/graphql/searchSalesBySellerId.gql'\nimport SalesStats from '@/graphql/SalesStats.gql'\n// import _ from 'lodash'\nimport moment from 'moment'\nimport { map } from 'ramda'\nimport * as d3 from 'd3'\n\nexport default {\n  data () {\n    return {\n      searchTerm: '',\n      graph: null,\n      root: null,\n      radialRoot: null,\n      graphOptions: [\n        { option: 'Horizontal Tree' },\n        { option: 'Vertical Tree' },\n        { option: 'Radial Tree' }\n      ],\n      select: { option: 'Vertical Tree' },\n      graphType: 'VT',\n      month: moment()\n        .format('MM'),\n      year: moment().format('YYYY'),\n      startDate: moment()\n        .startOf('month')\n        .format('YYYY-MM-DD'),\n      endDate: moment()\n        .startOf('month')\n        .format('YYYY-MM-DD'),\n      tableColumns: [\n        {\n          text: 'Show Details',\n          value: 'string',\n          align: 'left',\n          sortable: false\n        },\n        { text: 'Date', value: 'date' },\n        { text: 'Sale Total', value: 'total' },\n        { text: 'Total Points', value: 'points' },\n        { text: 'Commissionable Total', value: 'comTotal' },\n        { text: 'Commissionable Points', value: 'comPoints' },\n        { text: 'Seller Name', value: 'displayName' },\n        { text: 'Seller Email', value: 'contactEmail' }\n      ],\n      contextMenuOptions: {\n        unPinMenu: {\n          title: `UnPin Member`,\n          action: this.pinMember\n        },\n        pinMenu: {\n          title: `Pin Member`,\n          action: this.pinMember\n        },\n        displaySales: {\n          title: `Display Sales`,\n          action: this.updateSales\n        },\n        collapseMenu: {\n          title: `Collapse Team`,\n          action: this.collapseTeam\n        },\n        expandMenu: {\n          title: `Expand Team`,\n          action: this.expandTeam\n        },\n        loadChildrenMenu: {\n          title: `Load Team`,\n          action: this.loadChildrenMenu\n        },\n        center: {\n          title: `Center`,\n          action: this.centerMember\n        }\n      },\n      zoomControls: [\n        {\n          control: 'zoomIn',\n          img: '/img/icons/zoomIn.png',\n          action: this.zoom,\n          data: { amount: 1.02 }\n        },\n        {\n          control: 'zoomOut',\n          img: '/img/icons/zoomOut.png',\n          action: this.zoom,\n          data: { amount: 0.98 }\n        }],\n      panControls: [\n        {\n          control: 'panLeft',\n          img: '/img/icons/leftArrow.png',\n          action: this.pan,\n          translate: { x: -1, y: 0 },\n          data: { x: 10, y: 0 }\n        },\n        {\n          control: 'panUp',\n          img: '/img/icons/upArrow.png',\n          action: this.pan,\n          translate: { x: 0, y: -1 },\n          data: { x: 0, y: 10 }\n        },\n        {\n          control: 'panDown',\n          img: '/img/icons/downArrow.png',\n          action: this.pan,\n          translate: { x: 0, y: 1 },\n          data: { x: 0, y: -10 }\n        },\n        {\n          control: 'panRight',\n          img: '/img/icons/rightArrow.png',\n          action: this.pan,\n          translate: { x: 1, y: 0 },\n          data: { x: -10, y: 0 }\n        }\n      ],\n      sales: [],\n      pinned: null,\n      fetchedData: {},\n      memberDict: {},\n      firstPin: true,\n      memberId: null,\n      sellerId: null,\n      loading: false\n    }\n  },\n  watch: {\n    select (newSelection) {\n      this.changeGraphType(newSelection)\n    }\n  },\n  components: {\n    MonthSelector\n  },\n  async mounted () {\n    const cfg = {\n      el: this.$refs.graph,\n      clickNode: this.clickNode,\n      root: this.root,\n      contextMenuFunc: this.contextMenuFunc,\n      ranks: this.ranks,\n      getRoot: this.getRoot,\n      setRoot: this.setRoot,\n      getSearchTerm: this.getSearchTerm,\n      getLoading: this.getLoading,\n      zoomControls: this.zoomControls,\n      panControls: this.panControls,\n      getGraphType: this.getGraphType,\n      setRadialRoot: this.setRadialRoot,\n      getRadialRoot: this.getRadialRoot\n    }\n    this.loading = true\n    this.memberId = ~~this.$route.params.id\n    this.sellerId = this.memberId\n    this.fetchedData = await this.fetchData({ memberId: this.memberId })\n    this.graph = initialize(cfg, this.fetchedData)\n    this.pin(this.root)\n    this.loading = false\n  },\n  methods: {\n    zoom ({ amount }) {\n      this.graph.zoomInAndOut({ amount })\n    },\n    pan ({ x, y }) {\n      this.graph.panAround({ x, y })\n    },\n    search () {\n      this.updateGraph({ source: this.root })\n    },\n    dateChanged ({ date }) {\n      this.startDate = moment(date).startOf('month').format('YYYY-MM-DD')\n      this.endDate = moment(date).endOf('month').format('YYYY-MM-DD')\n      this.refreshGraph()\n    },\n    changeGraphType ({ option }) {\n      switch (option) {\n        case 'Horizontal Tree':\n          if (this.graphType !== 'HT') { this.graphType = 'HT' } else return\n          break\n        case 'Vertical Tree':\n          if (this.graphType !== 'VT') { this.graphType = 'VT' } else return\n          break\n        case 'Radial Tree':\n          if (this.graphType !== 'RT') { this.graphType = 'RT' } else return\n          break\n      }\n      this.searchTerm = ''\n      this.graph.changeGraphType(this.root, this.graphType)\n      this.updateGraph({ center: true, updateHeight: true })\n    },\n    getGraphType () {\n      return this.graphType\n    },\n    getRoot () {\n      return this.root\n    },\n    setRoot (newRoot) {\n      this.root = newRoot\n    },\n    getRadialRoot () {\n      return this.radialRoot\n    },\n    setRadialRoot (newRoot) {\n      this.radialRoot = newRoot\n    },\n    getSearchTerm () {\n      return this.searchTerm === '' ? null : this.searchTerm.toLowerCase()\n    },\n    getLoading () {\n      return this.loading\n    },\n    reloadGraph () {\n      this.graph.loadGraph({ fetchedData: this.fetchedData, graphType: this.graphType })\n      this.pin(this.root)\n      this.centerMember(this.root, this.graphType)\n    },\n    updateGraph (updateOptions) {\n      const updateInput = {\n        source: this.root,\n        pinned: this.pinned,\n        firstPin: this.firstPin,\n        graphType: this.graphType,\n        ...updateOptions\n      }\n      this.graph.update(updateInput)\n    },\n    zoomOut () {\n      this.graph.zoomInAndOut({ amount: 0.8 })\n    },\n    pin (node) {\n      // To be implemented in the future\n\n      // if (this.pinned !== node) {\n      //         this.pinned = node\n      //         this.updateSellerId(this.pinned.data.data.memberId)\n      //       } else {\n      //         this.firstPin = true\n      //         this.pinned = null\n      //         this.updateSellerId(null)\n      //       }\n      //       this.graph.updatePinned(this.pinned, this.firstPin)\n      //       this.firstPin = !this.pinned\n\n      this.pinned = null\n    },\n    clickNode (selected) {\n      if (selected._children) {\n        selected.children = selected._children\n        selected._children = null\n        if (this.graphType === 'RT') {\n          this.radialRoot = selected\n        }\n        this.updateGraph({ source: selected, center: true, updateHeight: true })\n      } else if (!checkParentOfPinned(selected, this.pinned)) {\n        if (selected.children || (selected.data.id === this.radialRoot.data.id && this.graphType === 'RT')) {\n          selected._children = selected.children\n          selected.children = null\n          if (this.graphType === 'RT' && selected.parent) {\n            this.radialRoot = selected.parent\n            this.updateGraph({ source: selected.parent, center: true, updateHeight: true })\n          } else { this.updateGraph({ source: selected, center: true, updateHeight: true }) }\n        } else {\n          this.loadChildrenMenu(selected)\n        }\n      }\n      // this.updateGraph({ source: selected, center: true, updateHeight: true })\n    },\n    centerMember (d) {\n      this.graph.centerMember(d, this.graphType)\n    },\n    updateSales (d) {\n      this.updateSellerId(d ? d.data.data.memberId : null)\n    },\n    updateSellerId (newId) {\n      this.sellerId = newId\n    },\n    contextMenuFunc (data) {\n      const menu = []\n      menu.push(this.contextMenuOptions[`displaySales`])\n      menu.push(this.contextMenuOptions[`center`])\n\n      if (data.children) menu.push(this.contextMenuOptions[`collapseMenu`])\n      else if (data._children) {\n        menu.push(this.contextMenuOptions[`expandMenu`])\n      } else if (data.data.data.frontLineSize > 0) {\n        menu.push(this.contextMenuOptions[`loadChildrenMenu`])\n      }\n\n      return menu\n    },\n    pinMember (d) {\n      this.pin(d)\n    },\n    collapseTeam (d) {\n      if (d.children) {\n        d._children = d.children\n        d.children = null\n      }\n      this.updateGraph({ source: d, center: true })\n    },\n    expandTeam (d) {\n      if (d._children) {\n        d.children = d._children\n        d._children = null\n      }\n      this.updateGraph({ source: d, center: true })\n    },\n    async loadChildrenMenu (d, i) {\n      if (d.data.data.frontLineSize > 0 && !d.children && !d._children) {\n        this.loading = true\n        let newChild = await this.fetchData({ memberId: d.data.data.memberId })\n        let newNode = d3.hierarchy(newChild, d => d.children)\n        if (newNode.children) {\n          newNode.children.forEach(child => { child.parent = d })\n\n          d.children = [...newNode.children]\n          d.data.children = [...newNode.data.children]\n\n          updateHeightDepth(this.root, 0)\n\n          d.children.forEach(collapse)\n        } else { d.data.data.leaf = true }\n        this.loading = false\n      } else {\n        d.data.data.leaf = true\n      }\n      if (this.graphType === 'RT') {\n        this.radialRoot = d\n      }\n\n      this.updateGraph({ source: d, center: true, updateHeight: true })\n    },\n    async refreshGraph () {\n      this.loading = true\n      let memberIds = Object.keys(this.memberDict).map(Number)\n      const { data: { saleStatsByDateRange } } = await this.$apollo.query({\n        query: SalesStats,\n        variables: {\n          input: {\n            sponsorIds: [],\n            memberIds: memberIds,\n            startDate: this.startDate,\n            endDate: this.endDate,\n            mode: 'YEAR_AND_MONTH_CUBED',\n            sorts: [{ field: 'JOIN_DATE', direction: 'ASC' }]\n          }\n        }\n      })\n      await saleStatsByDateRange.forEach(member => {\n        this.memberDict[member.memberId] = {\n          memberId: member.memberId,\n          sponsorId: member.sponsorId,\n          displayName: member.displayName,\n          profileUrl: member.profileUrl,\n          teamSize: member.teamSize,\n          frontLineSize: member.frontLineSize,\n          totalPoints: member.stats[member.stats.length - 1].totalPoints,\n          totalAmount: member.stats[member.stats.length - 1].totalAmount\n          // _data: member\n        }\n      })\n      this.refreshNode({ node: this.root, dataChild: false })\n      this.updateGraph({ source: this.root, center: false })\n      this.loading = false\n    },\n    refreshNode ({ node, dataChild }) {\n      if (dataChild) {\n        node.data = this.memberDict[node.id]\n        return\n      }\n      node.data.data = this.memberDict[node.data.id]\n      if (node.children) {\n        node.children.forEach(child => {\n          this.refreshNode({ node: child })\n        })\n      }\n      if (node.data.children) {\n        node.data.children.forEach(child => {\n          this.refreshNode({ node: child, dataChild: true })\n        })\n      }\n      if (node._children) {\n        node._children.forEach(child => {\n          this.refreshNode({ node: child })\n        })\n      }\n    },\n    async fetchData ({ memberId }) {\n      const { data: { saleStatsByDateRange } } = await this.$apollo.query({\n        query: SalesStats,\n        variables: {\n          input: {\n            sponsorIds: [memberId],\n            memberIds: [memberId],\n            startDate: this.startDate,\n            endDate: this.endDate,\n            mode: 'YEAR_AND_MONTH_CUBED',\n            sorts: [{ field: 'JOIN_DATE', direction: 'ASC' }]\n          }\n        }\n      })\n      if (saleStatsByDateRange) {\n        const tempArr = []\n        await saleStatsByDateRange.forEach(member => {\n          this.memberDict[member.memberId] = {\n            memberId: member.memberId,\n            sponsorId: member.sponsorId,\n            displayName: member.displayName,\n            profileUrl: member.profileUrl,\n            teamSize: member.teamSize,\n            frontLineSize: member.frontLineSize,\n            totalPoints: member.stats[member.stats.length - 1].totalPoints,\n            totalAmount: member.stats[member.stats.length - 1].totalAmount\n            // _data: member// As far as I know we don't need this\n          }\n          tempArr.push({\n            memberId: member.memberId,\n            sponsorId: member.memberId === memberId ? null : member.sponsorId,\n            displayName: member.displayName,\n            profileUrl: member.profileUrl,\n            teamSize: member.teamSize,\n            frontLineSize: member.frontLineSize,\n            totalPoints: member.stats[member.stats.length - 1].totalPoints,\n            totalAmount: member.stats[member.stats.length - 1].totalAmount\n            // _data: member// As far as I know we don't need this\n          })\n        })\n\n        let stratifiedObj = {}\n        // Create a tree like structure from our data\n        stratifiedObj = await d3.stratify()\n          .id(d => d.memberId)\n          .parentId(d => d.sponsorId)(tempArr)\n\n        const { children } = stratifiedObj\n        if (!children) return stratifiedObj\n\n        // Alphabetically sort the teamMembers\n        children.sort((a, b) => (a.data.displayName.toLowerCase() > b.data.displayName.toLowerCase()) ? 1 : ((b.data.displayName.toLowerCase() > a.data.displayName.toLowerCase()) ? -1 : 0))\n\n        return stratifiedObj\n      }\n      return null\n    }\n  },\n  computed: {\n    items () {\n      return map(sale => {\n        return {\n          ...sale,\n          id: sale.saleId,\n          date: moment(sale.awardedDate, 'YYYY-MM-DD').format('MM/DD/YYYY')\n        }\n      }, this.sales)\n    },\n    currentId: {\n      get: function () {\n        const id = this.$route.params.id\n        return parseInt(id)\n      },\n      set: function () {\n      }\n    }\n  },\n  apollo: {\n    sales: {\n      query: searchSalesBySellerId,\n      variables () {\n        return {\n          saleSearchInput: {\n            tenantId: this.$store.state.user.principal.tenantId,\n            startDate: this.startDate,\n            endDate: this.endDate,\n            query: null,\n            sellerId: this.sellerId\n          }\n        }\n      },\n      error (err) {\n        this.loading = false\n        console.error({ err })\n      },\n      debounce: 500,\n      update ({ searchSalesBySellerId }) {\n        this.loading = false\n        return searchSalesBySellerId\n      }\n    }\n  }\n}\n</script>\n\n<style>\n.imgCircle {\n  fill: #fafafa;\n  stroke: #828282;\n  stroke-width: 3px;\n}\n.rankCircle {\n  fill: #fff;\n  stroke: #828282;\n  stroke-width: 2px;\n}\n\n.controlCircle {\n  fill: black;\n  opacity: 0.2;\n}\n.parentCircle {\n  fill: #fafafa;\n  stroke: #ccc;\n  stroke-width: 2px;\n}\n.memberHighlight {\n  fill: #feff00;\n}\n\n.node text {\n  font: 12px sans-serif;\n}\n\n.infoRect {\n  fill: #fafafa;\n  stroke: #ccc;\n}\n\n.link {\n  fill: none;\n  stroke: #ccc;\n  stroke-width: 2px;\n}\nsvg {\n  border: 2px solid #ccc;\n}\n\n.pinImage {\n  height: 42px;\n  width: 42px;\n  position: fixed;\n}\n\n.d3-context-menu {\n  position: absolute;\n  display: none;\n  background-color: #f2f2f2;\n  border-radius: 4px;\n\n  font-family: Arial, sans-serif;\n  font-size: 14px;\n  min-width: 150px;\n  border: 1px solid #d4d4d4;\n\n  z-index: 1200;\n}\n\n.d3-context-menu ul {\n  list-style-type: none;\n  margin: 4px 0px;\n  padding: 0px;\n  cursor: default;\n}\n\n.d3-context-menu ul li {\n  padding: 4px 16px;\n}\n\n.d3-context-menu ul li:hover {\n  background-color: #4677f8;\n  color: #fefefe;\n}\n</style>\n"]}]}