{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/Members.vue?vue&type=style&index=0&id=3cec2962&scoped=true&lang=css&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/Members.vue","mtime":1570835920000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.borderMenu {\n  padding: 10px 0;\n}\n.borderIcon {\n  padding: 10px 0;\n}\n",{"version":3,"sources":["Members.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuaA;AACA;AACA;AACA;AACA;AACA","file":"Members.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <v-flex xs12>\n    <div class=\"team main-container\">\n      <h1 v-bind:target=\"currentId\">Team</h1>\n      <v-layout row wrap>\n        <v-flex xs4 md3 lg2>\n          <MonthSelector :year=\"year\" :month=\"month\" @date-changed=\"dateChanged\"/>\n          </v-flex>\n          <v-flex xs4 md3 lg2>\n          <v-menu right>\n            <template slot=\"activator\">\n            <v-tooltip top>\n            <v-btn slot=\"activator\" icon>\n              <v-icon class=\"borderIcon\">more_vert</v-icon>\n            </v-btn>\n            <span>Actions</span>\n            </v-tooltip>\n            </template>\n            <v-list class=\"borderMenu\">\n              <v-list-tile @click=\"showCreate\">\n                <v-list-tile-title>Create a Member</v-list-tile-title>\n              </v-list-tile>\n              <v-divider/>\n              <v-list-tile @click=\"toggleSponsorChange\">\n                <v-list-tile-title>Change Sponsors</v-list-tile-title>\n              </v-list-tile>\n            </v-list>\n          </v-menu>\n          </v-flex>\n      </v-layout>\n      <div>\n        <v-breadcrumbs :items=\"breadcrumbs\" divider=\" / \"></v-breadcrumbs>\n        <div v-if=\"!$apollo.queries.results.loading\">\n          <v-layout row wrap>\n            <v-flex lg4 v-if=\"results && results.target\">\n              <TeamCard\n                :active=\"true\"\n                :loading=\"$apollo.queries.stats.loading\"\n                @drillDown=\"drillDown\"\n                @viewMember=\"viewMember\"\n                @onSuccess=\"onSuccess\"\n                @onError=\"onError\"\n                :user=\"results.target\"\n                :actions=\"true\"\n                :stats=\"getStats(results.target)\"\n                hideButton\n              />\n            </v-flex>\n            <v-flex lg4 v-for=\"i in results.team\" :key=\"i.id\">\n              <TeamCard\n                :loading=\"$apollo.queries.stats.loading\"\n                @drillDown=\"drillDown\"\n                @viewMember=\"viewMember\"\n                @onSuccess=\"onSuccess\"\n                @onError=\"onError\"\n                :user=\"i\"\n                :actions=\"true\"\n                :stats=\"getStats(i)\"\n              />\n            </v-flex>\n          </v-layout>\n        </div>\n        <div v-if=\"$apollo.queries.results.loading\">\n          <v-progress-circular indeterminate :size=\"70\" :width=\"7\" color=\"black\"></v-progress-circular>\n        </div>\n      </div>\n      <v-snackbar :timeout=\"8000\" v-model=\"snackbar\">\n        {{snackbarMessage}}\n        <v-btn flat color=\"pink\" @click.native=\"snackbar = false\">Close</v-btn>\n      </v-snackbar>\n      <CreateMemberDialog\n        :creatingMember=\"creatingMember\"\n        :createMember=\"createMember\"\n        @clickCreate=\"clickCreate\"\n        @close=\"close\"\n      />\n      <v-dialog v-model=\"emailDialog.showing\">\n        <v-card>\n          <v-card-text>\n            <v-form>\n              <v-text-field label=\"E-mail\" v-model=\"emailDialog.email\" required></v-text-field>\n              <v-btn color=\"success\" @click=\"doSetEmail()\">Set Email</v-btn>\n            </v-form>\n          </v-card-text>\n        </v-card>\n      </v-dialog>\n      <ChangeSponsorDialog :showing=\"sponsorChange.show\" @close=\"sponsorChangeClose\"/>\n    </div>\n  </v-flex>\n</template>\n\n<script>\nimport MonthSelector from '@/components/MonthSelector'\nimport CreateMemberDialog from '@/components/CreateMemberDialog'\nimport MemberSearch from '../components/MemberSearch'\nimport ChangeSponsorDialog from '@/components/ChangeSponsorDialog'\nimport TeamCard from '../components/TeamCard'\nimport getTeamByMemberId from '@/graphql/GetTeam'\nimport MONTHLY_STATS_QUERY from '@/graphql/GetMonthlyStats.gql'\n\nimport CREATE_MEMBER from '@/graphql/CreateMember.gql'\nimport SET_EMAIL from '@/graphql/SetEmail.gql'\nimport MEMBER_BY_ID from '@/graphql/MemberById.gql'\nimport { getHierarchies } from '@/graphql/MemberUpline.gql.js'\nimport { find, defaultTo, pathOr } from 'ramda'\nimport { mapState } from 'vuex'\nimport { Promise } from 'q'\n\nconst TEAM_LIMIT = 300\n\nexport default {\n  name: 'Team',\n  async mounted() {\n    this.getHierarchies()\n  },\n  computed: {\n    cards() {\n      return pathOr([], 'results.target.upline'.split('.'), this) // .filter(e => e.id !== this.currentId)\n    },\n    breadcrumbs() {\n      let breadcrumbs = []\n      const routeId = this.$route.params.id\n      this.upline.forEach(row => {\n        let obj = {}\n        obj.text = row.displayName\n        obj.disabled = true\n        if (parseInt(routeId) !== row.id) {\n          obj.to = '/members/' + row.id + '/team'\n          obj.disabled = false\n        }\n        breadcrumbs.push(obj)\n      })\n      return breadcrumbs\n    },\n    currentId: {\n      get: function () {\n        const id = this.$route.params.id\n        return parseInt(id)\n      },\n      set: function () {\n      }\n    },\n    ...mapState({ state: state => state })\n  },\n  beforeUpdate() {\n    if (this.lineage.length < 1 && this.results.target) {\n      this.lineage.push(this.results.target)\n    }\n  },\n  data: () => ({\n    pathOr,\n    displayName: 'root',\n    lineage: [],\n    month: new Date().getMonth() + 1,\n    year: new Date().getFullYear(),\n    results: {\n      target: undefined,\n      team: []\n    },\n    upline: [],\n    selection: '',\n    stats: [],\n    snackbar: false,\n    snackbarMessage: '',\n    resetLoading: false,\n    registerLoading: false,\n    dialog: false,\n    sponsorChange: {\n      show: false\n    },\n    emailDialog: {\n      memberId: undefined,\n      showing: false,\n      email: ''\n    },\n    creatingMember: false,\n    createMember: {\n      firstName: '',\n      lastName: '',\n      email: ''\n    }\n  }),\n  components: {\n    TeamCard,\n    MonthSelector,\n    MemberSearch,\n    ChangeSponsorDialog,\n    CreateMemberDialog\n  },\n  methods: {\n    async getHierarchies () {\n      const res = await this.$apollo.query({\n        query: getHierarchies,\n        variables: {\n          condition: { id: ~~this.$route.params.id }\n        },\n        fetchPolicy: 'network-only'\n      })\n      const data = pathOr(undefined, ['data', 'allHierarchies', 'nodes'], res)\n      this.upline = data[0].upline\n    },\n    click(index) {\n      const val = this.upline.find(e => e.displayName === this.selection)\n      this.$router.push('/members/' + val.id + '/team')\n    },\n    showCreate() {\n      this.creatingMember = true\n    },\n    close() {\n      this.creatingMember = false\n    },\n    toggleSponsorChange() {\n      this.sponsorChange.show = !this.sponsorChange.show\n    },\n    sponsorChangeClose(cfg) {\n      if (cfg && cfg.message) {\n        this.snackbarMessage = cfg.message\n        this.snackbar = true\n      }\n      this.sponsorChange.show = false\n    },\n    setEmail(memberId) {\n      this.emailDialog = {\n        memberId,\n        showing: true,\n        email: ''\n      }\n    },\n    doSetEmail() {\n      const { tenantId } = this.$store.state.user.principal\n      const { email, memberId } = this.emailDialog\n\n      this.$apollo\n        .mutate({\n          mutation: SET_EMAIL,\n          variables: {\n            SetEmailInput: {\n              tenantId,\n              email,\n              memberId\n            }\n          },\n          update: async (\n            store,\n            {\n              data: {\n                setEmail: { member }\n              }\n            }\n          ) => {\n            this.snackbarMessage =\n              'Successfully set email ' + member.contactEmail\n            this.snackbar = true\n            this.emailDialog.showing = false\n            this.$apollo.queries.results.refetch()\n            this.emailDialog = {\n              memberId: undefined,\n              showing: false,\n              email: ''\n            }\n            // TODO navigate to them?\n            // TODO Set to current target sponsor?\n          }\n        })\n        .catch(error => {\n          console.error('errored', error)\n          this.onError({\n            response: {\n              data: {\n                errors: [error]\n              }\n            }\n          })\n        })\n    },\n    clickCreate() {\n      const { firstName, lastName, email } = this.createMember\n      const { tenantId } = this.$store.state.user.principal\n\n      const that = this\n\n      this.$apollo\n        .mutate({\n          mutation: CREATE_MEMBER,\n          variables: {\n            createMemberInput: {\n              tenantId,\n              firstName,\n              lastName,\n              email\n            }\n          },\n          update: async (\n            store,\n            {\n              data: {\n                createMember: { member }\n              }\n            }\n          ) => {\n            that.snackbarMessage = 'Successfully created ' + member.name\n            this.snackbar = true\n            await new Promise(resolve => setTimeout(resolve, 2000))\n            that.creatingMember = false\n            await that.$apollo.queries.results.refetch()\n            that.createMember = {\n              firstName: '',\n              lastName: '',\n              email: ''\n            }\n            this.$router.push(`/members/${member.id}`)\n          }\n        })\n        .catch(error => {\n          console.error('errored', error)\n          that.onError({\n            response: {\n              data: {\n                errors: [error]\n              }\n            }\n          })\n        })\n      // */\n    },\n    drillDown(user) {\n      const newPath = `/members/${user.memberId == null ? '' : user.memberId}/team`\n      this.$router.push(newPath)\n      this.getHierarchies()\n    },\n    updateLineage (user, index) {\n      const newPath = `/members/${user.memberId == null ? '' : user.memberId}/team`\n      this.lineage = this.lineage.slice(0, index + 1)\n      this.$router.push(newPath)\n    },\n    viewMember(memberId) {\n      const newPath = `/members/${memberId == null ? '' : memberId}/team`\n      this.lineage.length = 0\n      this.$router.push(newPath)\n    },\n    getStats(target) {\n      return defaultTo(\n        {},\n        find(_ => target && _.sellerId === target.memberId, this.stats)\n      )\n    },\n    dateChanged({ date }) {\n      const dateSplit = date.split('-')\n      this.month = dateSplit[1]\n      this.year = dateSplit[0]\n    },\n    onSuccess(message) {\n      this.snackbar = true\n      this.snackbarMessage = message\n    },\n    onError(errorMessage) {\n      if (typeof errorMessage === 'string') {\n        this.error = errorMessage\n      } else {\n        const errors = pathOr({}, ['response', 'data', 'errors'], errorMessage)\n        this.snackbarMessage = pathOr(\n          'There seems to be a problem. Please try again later or contact customer support.',\n          ['message'],\n          errors[0]\n        )\n      }\n      this.snackbar = true\n    }\n  },\n  apollo: {\n    displayName: {\n      query: MEMBER_BY_ID,\n      variables() {\n        return {\n          condition: {\n            ids: [this.currentId]\n          }\n        }\n      },\n      update({ members }) {\n        return members.nodes[0]\n          ? members.nodes[0].displayName\n          : 'root'\n      },\n      skip() {\n        return this.currentId === null\n      }\n    },\n    results() {\n      const result = getTeamByMemberId(\n        'currentId',\n        this.$store.state.user.principal.tenantId,\n        TEAM_LIMIT\n      )\n      return result\n    },\n    stats: {\n      query: MONTHLY_STATS_QUERY,\n      variables() {\n        return {\n          targetCondition: {\n            tenantId: this.$store.state.user.principal.tenantId,\n            sellerId: this.currentId,\n            month: ~~this.month,\n            year: ~~this.year\n          },\n          firstLevelCondition: {\n            tenantId: this.$store.state.user.principal.tenantId,\n            sponsorId: this.currentId,\n            month: ~~this.month,\n            year: ~~this.year\n          }\n        }\n      },\n      update({ targetStats, firstLevelStats }) {\n        return targetStats.nodes.concat(firstLevelStats.nodes)\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.borderMenu {\n  padding: 10px 0;\n}\n.borderIcon {\n  padding: 10px 0;\n}\n</style>\n"]}]}