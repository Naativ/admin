{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/users/actions/UserTreePatch.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/users/actions/UserTreePatch.vue","mtime":1556830707000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { debounce, get } from 'lodash'\nimport { treePatch } from '@/users/users.gql'\nimport SEARCH_QUERY from '@/graphql/Search.gql'\nimport { getImmediateTeamByMemberId } from '@/graphql/GetTeam'\n\nimport { StoreGetters } from '@/store'\nimport { mapGetters } from 'vuex'\nconst mappedGetters = mapGetters({\n  access: StoreGetters.access\n})\n\nexport default {\n  props: {\n    user: {\n      type: Object,\n      default () { return {} }\n    },\n    show: Boolean\n  },\n  data () {\n    return {\n      result: null,\n      destination: null,\n      searchDebounce: '',\n      reason: '',\n      recalculateTree: true,\n      loading: false,\n      items: [],\n      table: {\n        headers: [\n          { text: 'ID', value: 'System ID', width: '50px' },\n          {\n            text: 'Front Line Team Member',\n            align: 'left',\n            sortable: false,\n            value: 'name'\n          }\n        ]\n      }\n    }\n  },\n  watch: {\n    searchDebounce: debounce(function (val) {\n      this.search(val)\n    }, 300),\n    show (val) {\n      val && this.$apollo.queries.team.refresh()\n    }\n  },\n  apollo: {\n    team () {\n      const { id, sponsorOid, tenantId } = this.user\n      const query = getImmediateTeamByMemberId(\n        id,\n        sponsorOid,\n        tenantId\n      )\n      return query\n    }\n\n  },\n  methods: {\n    async search (searchTerm) {\n      this.items = []\n      if (searchTerm) {\n        this.loading = true\n        try {\n          const result = await this.$apollo.query({\n            query: SEARCH_QUERY,\n            variables: {\n              searchInput: {\n                search: searchTerm\n              }\n            }\n          })\n          const data = get(result, 'data.searchHierarchy.hierarchies', [])\n          this.items = data\n        } catch (error) {\n          console.error({ error })\n        } finally {\n          this.loading = false\n        }\n      }\n    },\n    async move () {\n      this.loading = true\n      try {\n        const targetId = this.user.id\n        const destinationId = (this.destination || {}).id\n        const { reason, recalculateTree } = this\n\n        const result = await this.$apollo.mutate({\n          mutation: treePatch,\n          variables: {\n            input: { targetId, destinationId, reason, recalculateTree }\n          }\n        })\n        this.result = result\n      } finally {\n        this.loading = false\n      }\n    },\n    cancel () {\n      this.$emit('cancel')\n    },\n    clear () {\n      this.destination = null\n    },\n    reload () {\n      window.location.reload()\n    }\n  },\n  computed: {\n    ...mappedGetters,\n    children () {\n      return get(this, 'team.children', [])\n    },\n    sponsor () {\n      return get(this, 'team.sponsor', {})\n    },\n    noAccess () {\n      return !get(this, 'access.hasSponsorChange', false)\n    }\n  }\n}\n",{"version":3,"sources":["UserTreePatch.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4HA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"UserTreePatch.vue","sourceRoot":"src/views/users/actions","sourcesContent":["<template>\n  <v-dialog v-if=\"user\" v-model=\"show\" persistent :hide-overlay=\"false\" width=\"80%\">\n    <v-card v-if=\"noAccess\">\n      <v-card-title>\n        <h1>Member Tree Patch</h1>\n      </v-card-title>\n      <v-alert type=\"error\" :value=\"true\">\n        <strong>Illegal Access Attempt:</strong>\n        This account does not have access to change a member's sponsors.\n      </v-alert>\n      <v-card-actions>\n        <v-layout row justify-center>\n          <v-btn @click=\"cancel\">Close</v-btn>\n        </v-layout>\n      </v-card-actions>\n    </v-card>\n    <v-card v-else-if=\"result\">\n      <v-card-title>\n        <h1>Member Tree Patch</h1>\n      </v-card-title>\n      <v-card-text>This member was patched successfully. Please reload any browser sessions.</v-card-text>\n      <v-card-actions>\n        <v-layout row justify-center>\n          <v-btn color=\"dark pink\" class=\"white--text\" @click=\"reload\">Reload</v-btn>\n        </v-layout>\n      </v-card-actions>\n    </v-card>\n    <v-card v-else>\n      <v-card-title>\n        <h1>Member Tree Patch</h1>\n      </v-card-title>\n      <v-card-text>\n        <v-form ref=\"mergeForm\">\n          <v-layout row wrap>\n            <v-flex xs12>\n              <p>\n                This process will move any team members directly associated with\n                <strong>{{user.name}} ({{user.id}})</strong> and place them under\n                <strong>{{sponsor.name || 'the company root'}} {{ sponsor.memberId ? '(' + sponsor.memberId + ')' : ''}}</strong>.\n              </p>\n            </v-flex>\n            <v-flex xs12 sm6>\n              <v-autocomplete\n                v-model=\"destination\"\n                :items=\"items\"\n                :loading=\"loading\"\n                :search-input.sync=\"searchDebounce\"\n                item-text=\"name\"\n                item-value=\"id\"\n                return-object\n                label=\"Sponsor to move under\"\n                clearable\n                :disabled=\"loading\"\n              >\n                <template slot=\"item\" slot-scope=\"data\">\n                  <v-flex xs4>\n                    <v-icon left>person</v-icon>\n                    {{data.item.displayName}}\n                  </v-flex>\n                  <v-flex xs4>{{data.item.contactEmail}}</v-flex>\n                  <v-flex xs4>{{data.item.id}}</v-flex>\n                </template>\n              </v-autocomplete>\n            </v-flex>\n            <v-flex xs12 sm6>\n              <v-checkbox :disabled=\"loading\" v-model=\"recalculateTree\" label=\"Recalculate Tree\"></v-checkbox>\n            </v-flex>\n            <v-flex xs12 sm12>\n              <v-textarea solo label=\"Solo textarea\" v-model=\"reason\" multi-line></v-textarea>\n            </v-flex>\n          </v-layout>\n          <v-alert type=\"warning\" :value=\"destination\" v-if=\"destination\">\n            <template slot=\"default\">\n              <v-layout row wrap>\n                <v-flex xs12>\n                  <p>\n                    Proceeding will move\n                    <strong>{{user.name}}</strong>\n                    under the following new sponsor:\n                  </p>\n                </v-flex>\n                <v-flex xs12 sm4>\n                  <v-icon>account_box</v-icon>\n                  {{destination.id}}\n                </v-flex>\n                <v-flex xs12 sm4>\n                  <v-icon>person</v-icon>\n                  {{destination.name}}\n                </v-flex>\n                <v-flex xs12 sm4>\n                  <v-icon>email</v-icon>\n                  {{destination.contactEmail}}\n                </v-flex>\n              </v-layout>\n            </template>\n          </v-alert>\n          <v-alert type=\"info\" :value=\"!destination\">\n            <strong>\n              <u>Reminder</u>:\n            </strong>\n            Not selecting a new sponsor\n            will move this\n            <strong>{{user.name}}</strong> to the\n            <strong>root of the company</strong>\n          </v-alert>\n        </v-form>\n      </v-card-text>\n      <v-data-table :headers=\"table.headers\" :items=\"children\">\n        <template slot=\"items\" slot-scope=\"props\">\n          <td>{{ props.item.memberId }}</td>\n          <td>{{ props.item.name }}</td>\n        </template>\n      </v-data-table>\n      <v-card-actions>\n        <v-layout row justify-center>\n          <v-btn color=\"dark pink\" class=\"white--text\" @click=\"move\" :loading=\"loading\">Confirm Move</v-btn>\n          <v-btn @click=\"cancel\" :disabled=\"loading\">Cancel</v-btn>\n        </v-layout>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script>\nimport { debounce, get } from 'lodash'\nimport { treePatch } from '@/users/users.gql'\nimport SEARCH_QUERY from '@/graphql/Search.gql'\nimport { getImmediateTeamByMemberId } from '@/graphql/GetTeam'\n\nimport { StoreGetters } from '@/store'\nimport { mapGetters } from 'vuex'\nconst mappedGetters = mapGetters({\n  access: StoreGetters.access\n})\n\nexport default {\n  props: {\n    user: {\n      type: Object,\n      default () { return {} }\n    },\n    show: Boolean\n  },\n  data () {\n    return {\n      result: null,\n      destination: null,\n      searchDebounce: '',\n      reason: '',\n      recalculateTree: true,\n      loading: false,\n      items: [],\n      table: {\n        headers: [\n          { text: 'ID', value: 'System ID', width: '50px' },\n          {\n            text: 'Front Line Team Member',\n            align: 'left',\n            sortable: false,\n            value: 'name'\n          }\n        ]\n      }\n    }\n  },\n  watch: {\n    searchDebounce: debounce(function (val) {\n      this.search(val)\n    }, 300),\n    show (val) {\n      val && this.$apollo.queries.team.refresh()\n    }\n  },\n  apollo: {\n    team () {\n      const { id, sponsorOid, tenantId } = this.user\n      const query = getImmediateTeamByMemberId(\n        id,\n        sponsorOid,\n        tenantId\n      )\n      return query\n    }\n\n  },\n  methods: {\n    async search (searchTerm) {\n      this.items = []\n      if (searchTerm) {\n        this.loading = true\n        try {\n          const result = await this.$apollo.query({\n            query: SEARCH_QUERY,\n            variables: {\n              searchInput: {\n                search: searchTerm\n              }\n            }\n          })\n          const data = get(result, 'data.searchHierarchy.hierarchies', [])\n          this.items = data\n        } catch (error) {\n          console.error({ error })\n        } finally {\n          this.loading = false\n        }\n      }\n    },\n    async move () {\n      this.loading = true\n      try {\n        const targetId = this.user.id\n        const destinationId = (this.destination || {}).id\n        const { reason, recalculateTree } = this\n\n        const result = await this.$apollo.mutate({\n          mutation: treePatch,\n          variables: {\n            input: { targetId, destinationId, reason, recalculateTree }\n          }\n        })\n        this.result = result\n      } finally {\n        this.loading = false\n      }\n    },\n    cancel () {\n      this.$emit('cancel')\n    },\n    clear () {\n      this.destination = null\n    },\n    reload () {\n      window.location.reload()\n    }\n  },\n  computed: {\n    ...mappedGetters,\n    children () {\n      return get(this, 'team.children', [])\n    },\n    sponsor () {\n      return get(this, 'team.sponsor', {})\n    },\n    noAccess () {\n      return !get(this, 'access.hasSponsorChange', false)\n    }\n  }\n}\n</script>\n"]}]}