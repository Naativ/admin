{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/Import.vue?vue&type=style&index=0&id=c811a842&scoped=true&lang=css&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/Import.vue","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.bold {\n  font-weight: 600;\n}\n",{"version":3,"sources":["Import.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyIA;AACA;AACA","file":"Import.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <v-flex xs12>\n    <div class=\"import\">\n      <h1>Import</h1>\n      <v-icon v-if=\"!showFileUpload\" v-on:click=\"showFileUpload = true\">add</v-icon>\n      <v-icon v-if=\"showFileUpload\" v-on:click=\"showFileUpload = false\">remove</v-icon>\n    </div>\n    <form v-if=\"showFileUpload\" enctype=\"multipart/form-data\" novalidate>\n        <input\n          type=\"file\"\n          name=\"import\"\n          :disabled=\"isSaving\"\n          @change=\"filesChange($event.target.files)\"\n          accept=\".csv\"\n        />\n        <div\n          v-for=\"(field) in destination.fields\"\n          :key=\"field.name\"\n        >\n          <label class=\"bold\">{{field.name}}: </label>\n          <input type=\"text\" v-model=\"field.value\">\n        </div>\n        <div>\n          <div v-if=\"!isUploading\">\n            <v-btn color=\"success\" @click=\"processUpload()\" :disabled=\"!file\">Upload</v-btn>\n          </div>\n          <div v-if=\"isUploading\">Uploading... please wait</div>\n        </div>\n    </form>\n    <v-data-table\n        :headers=\"headers\"\n        :items=\"items\"\n        hide-actions\n        class=\"elevation-1\"\n      >\n        <template slot=\"items\" slot-scope=\"props\">\n           <tr @click=\"goToJob(props.item)\">\n            <td>{{ props.item.id }}</td>\n            <td>{{ props.item.feedTypeName }}</td>\n            <td>{{ props.item.statusName }}</td>\n            <td>{{ props.item.started }}</td>\n            <td>{{ props.item.pending }}</td>\n            <td>{{ props.item.complete }}</td>\n            <td>{{ props.item.errored }}</td>\n            <td>{{ props.item.total }}</td>\n            <td>{{ props.item.createdOn | formatDate('DD')}}</td>\n          </tr>\n        </template>\n      </v-data-table>\n  </v-flex>\n</template>\n<script>\nimport { Actions } from '@/store'\nimport GET_FEEDS from '@/graphql/Feeds.gql'\nconst EMPTY_DESTINATION = { url: '', fields: [] }\n\nexport default {\n  name: 'Import',\n  methods: {\n    goToJob(job) {\n      this.$router.push({ path: `/job/${job.id}` })\n    },\n    async filesChange(files) {\n      this.file = files[0]\n    },\n    async processUpload() {\n      await this.getDestination()\n      this.isSaving = true\n      this.isUploading = true\n      await this.$store.dispatch(Actions.FILE_UPLOAD, {\n        file: this.file,\n        destination: this.destination\n      })\n      this.isFalse = false\n      this.isUploading = false\n      this.file = undefined\n      this.destination = EMPTY_DESTINATION\n    },\n    async getDestination() {\n      const { data } = await this.$store.dispatch(\n        Actions.GET_UPLOAD_DESTINATION,\n        {}\n      )\n\n      const destination = data.destination\n      destination.fields = Object.keys(destination.fields).reduce(\n        (arr, prop) => {\n          arr.push({\n            name: prop,\n            value: destination.fields[prop]\n          })\n          return arr\n        },\n        []\n      )\n      this.destination = destination\n    }\n  },\n  data() {\n    return {\n      destination: EMPTY_DESTINATION,\n      file: undefined,\n      uploadFileName: null,\n      isUploading: false,\n      isSaving: false,\n      showFileUpload: false,\n      headers: [\n        { text: 'ID', value: 'id', sortable: false },\n        { text: 'Type', value: 'feedTypeName' },\n        { text: 'Status', value: 'statusName' },\n        { text: 'Started', value: 'started' },\n        { text: 'Pending', value: 'pending' },\n        { text: 'Completed', value: 'complete' },\n        { text: 'Errored', value: 'errored' },\n        { text: 'Total Records', value: 'total' },\n        { text: 'Date Imported', value: 'createdOn' }\n      ],\n      items: []\n    }\n  },\n  apollo: {\n    items: {\n      query: GET_FEEDS,\n      variables() {\n        return {\n          condition: {}\n        }\n      },\n      update({ allFeeds }) {\n        return allFeeds.nodes\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.bold {\n  font-weight: 600;\n}\n</style>\n"]}]}