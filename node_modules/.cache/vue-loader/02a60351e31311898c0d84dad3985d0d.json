{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/users/UserDetails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/users/UserDetails.vue","mtime":1577329618152},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { get, isEmpty, isEqual } from 'lodash'\nimport moment from 'moment'\nimport { mapActions, mapGetters, mapMutations, mapState } from 'vuex'\n\nimport { ClaimActions } from '@/stores/ClaimStore'\nimport { UsersActions, UsersMutations } from '@/users/UsersStore'\nimport { StoreGetters } from '@/store'\n\nimport getLocalSettings from '@/graphql/GetLocaleSettings'\nimport GET_MEMBER_STATUS from '@/graphql/GetMemberStatus.gql'\nimport MEMBER_BY_ID from '@/graphql/MemberById.gql'\nimport { CONTACT_EMAIL_UPSERT } from '@/graphql/Contacts.js'\nimport iamUpsertUsername from '@/graphql/UpsertUsername.gql'\n\nimport PrepImpersonate from '@/iam/PrepImpersonate.vue'\nimport ChangeSponsorDialog from '@/components/ChangeSponsorDialog'\n\nexport default {\n  components: {\n    PrepImpersonate,\n    ChangeSponsorDialog\n  },\n  data () {\n    return {\n      loadingSponsor: false,\n      syncing: {\n        active: false,\n        message: 'Transferring data'\n      },\n      registerLoading: false,\n      resetLoading: false,\n      sponsorChange: {\n        show: false\n      },\n      tagsBeforeEdit: [],\n      showPrepDialog: false,\n      saveSpeedDial: false,\n      saveActivator: false,\n      saving: false,\n      editing: false,\n      formattedDate: null,\n      model: {\n        address: {},\n        phone: {},\n        slug: {}\n      },\n      moment,\n      missing: false,\n      isUploading: false,\n      isSaving: false,\n      valid: true,\n      credentials: [],\n      credentialId: '',\n      identityId: null,\n      username: '',\n      memberStatus: [],\n      rules: {\n        birthdate: [\n          v => (v && moment(v).isValid()) || 'Birthday Must Be in MM/DD/YYYY Format'\n        ],\n        emailRules: [\n          v => !!v || 'E-mail is required',\n          v => /.+@.+/.test(v) || 'E-mail must be valid'\n        ],\n        slug: [\n          v => !!v || 'Field is required and cannot be changed once submitted',\n          v =>\n            (v && /^[a-zA-Z0-9]+(?:-[a-z0-9]+)*$/.test(v)) ||\n            'Store name must not have spaces or special characters',\n          v => {\n            return (\n              (v && v.length <= 20 && v.length >= 4) ||\n              'Store name must be between 4 and 20 characters'\n            )\n          }\n        ]\n      },\n      settings: {},\n      snackbar: {\n        show: false,\n        message: undefined,\n        mandatory: false\n      }\n    }\n  },\n  computed: {\n    ...mapGetters({\n      permissions: StoreGetters.permissions\n    }),\n    ...mapState({\n      availableTags: state => ({\n        loading: state.tenants.tags.loading,\n        values: state.tenants.tags.values.map(e => e.name)\n      })\n    }),\n    canEdit () { return this.editing && !this.syncing.active && !this.saving },\n    canImpersonate () {\n      return this.permissions.find(p => p.id === 11 || p.id === 12)\n    },\n    canEditStatus () {\n      return this.permissions.find(p => p.id === 16)\n    },\n    canChangeSponsor () {\n      return this.permissions.find(p => p.id === 11 || p.id === 99)\n    },\n    id () { return ~~this.$route.params.id },\n    member () { return get(this.target, 'member', {}) }\n  },\n  methods: {\n    ...mapActions({\n      adjustTags: UsersActions.ADJUST_TAGS,\n      getAddress: UsersActions.GET_ADDRESS,\n      getCredentials: UsersActions.GET_USER_CREDENTIALS,\n      getPhone: UsersActions.GET_PHONE,\n      getUser: UsersActions.GET_USER,\n      upsertUser: UsersActions.UPSERT_USER,\n      _updateSlug: UsersActions.UPDATE_SLUG,\n      createSlug: UsersActions.CREATE_SLUG\n    }),\n    ...mapMutations({\n      _updateAddress: UsersMutations.UPDATE_ADDRESS,\n      _updatePhone: UsersMutations.UPDATE_PHONE,\n      createPhone: UsersMutations.CREATE_PHONE,\n      updateMemberSubset: UsersMutations.UPDATE_SUBSET\n    }),\n    async getMemberStatus () {\n      const { data } = await this.$apollo.query({\n        query: GET_MEMBER_STATUS,\n        fetchPolicy: 'network-only'\n      })\n      this.memberStatus = data.getMemberStatus\n    },\n    async showSponsor (sponsorId) {\n      this.loadingSponsor = true\n      const { data } = await this.$apollo.query({\n        query: MEMBER_BY_ID,\n        variables: {\n          condition: {\n            tenantOids: [sponsorId]\n          }\n        }\n      })\n      const sponsor = data.members\n      if (sponsor.nodes && sponsor.nodes[0] && sponsor.nodes[0].id) {\n        this.loadingSponsor = false\n        this.$router.push(`/members/${sponsor.nodes[0].id}`)\n      }\n    },\n    async changeSponsor () {\n      this.sponsorChange.show = true\n    },\n    async sponsorChangeClose () {\n      this.sponsorChange.show = false\n      await this.sync()\n    },\n    async cancelEvent (e) {\n      e.preventDefault()\n      e.stopPropagation()\n    },\n    startEdit () {\n      this.editing = true\n      this.tagsBeforeEdit = this.model.tags\n      // this.saveActivator =\n    },\n    requiredRule (field) { return [v => !!v || `${field} is required`] },\n    prepImpersonate (id) {\n      this.credentialId = id\n      this.showPrepDialog = true\n    },\n    closeDialog () {\n      this.credentialId = ''\n      this.showPrepDialog = false\n    },\n    saveAddress () {\n      if (isEmpty(this.model.address)) return\n      return this._updateAddress({\n        id: this.model.address.id,\n        name: this.model.address.name,\n        street: this.model.address.street,\n        city: this.model.address.city,\n        province: this.model.address.province,\n        country: this.model.address.country,\n        postalCode: this.model.address.postalCode,\n        street2: this.model.address.street2 || '',\n        memberId: this.model.memberId,\n        contactId: this.model.contacts[0].id\n      })\n    },\n    saveDate (date) {\n      this.$refs.dialog.save(date)\n    },\n    async updatePhone () {\n      if (!this.model.phone.number) return\n      const { id, number } = this.model.phone\n      const contactId = this.model.contacts[0].id\n      return this.model.phone.id\n        ? this._updatePhone({ contactId, id, number })\n        : this.createPhone({ contactId, id: this.model.id, number })\n    },\n    async updateSlug () {\n      if (!this.model.slug || !this.model.slug.slug) return\n      const memberId = ~~this.$route.params.id\n      const { tenantId } = this.model\n      const { id, slug, priority } = this.model.slug\n      return priority >= 0\n        ? this._updateSlug({ id, slug, priority, memberId, tenantId })\n        : this.createSlug({ slug, memberId, tenantId })\n    },\n    async sync (mustId) {\n      this.syncing.active = true\n      this.syncing.message = 'Transferring data'\n      const memberId = ~~(mustId || this.$route.params.id)\n      if (memberId) {\n        const user = await this.getUser({ id: memberId })\n        this.credentials = await this.getCredentials(memberId)\n        this.model = {\n          ...this.model,\n          ...user,\n          contactEmail: user.contacts[0].emails[0].email,\n          slug: { ...user.slugs[0] }\n        }\n        const { contacts } = this.model\n        const address = await this.getAddress(contacts[0].id)\n        const phone = await this.getPhone(contacts[0].id)\n        this.model = {\n          ...this.model,\n          address: { ...address },\n          phone: { ...phone }\n        }\n        await this.getMemberStatus()\n        if (this.model.birthdate) {\n          this.model.birthdate = moment(this.model.birthdate).format('MM/DD/YYYY')\n        }\n        this.username = this.credentials.credentials[0].username\n        this.identityId = this.credentials.credentials[0].identityId\n        this.missing = false\n      } else {\n        this.model = undefined\n        this.missing = true\n      }\n      this.syncing.message = 'Transfer complete'\n    },\n    upsertUsername () {\n      if (!this.credentials.credentials) {\n        return null\n      }\n      const { identityId, username } = this\n      this.$apollo.mutate({\n        mutation: iamUpsertUsername,\n        variables: {\n          input: {\n            identityId,\n            username\n          }\n        }\n      })\n    },\n    async cancelEdit () {\n      this.editing = false\n      await this.sync()\n    },\n    async resetPassword (cred) {\n      this.resetLoading = true\n      try {\n        const { username } = cred\n        const { memberId, tenantId } = this.model\n        await this.$store.dispatch(ClaimActions.RESET, { memberId, tenantId, email: username })\n        this.snackbar = {\n          show: true,\n          mandatory: true,\n          message: `Reset password for ${username}`\n        }\n      } catch (error) {\n        console.warn('failed reset password', error)\n        this.snackbar = {\n          show: true,\n          mandatory: true,\n          message: `Error: ${error.message}`\n        }\n      }\n      this.resetLoading = false\n    },\n    async register (cred) {\n      this.registerLoading = true\n      try {\n        const { username } = cred\n        const { memberId, tenantId } = this.model\n        await this.$store.dispatch(ClaimActions.CLAIM, { memberId, tenantId, email: username })\n        this.snackbar = {\n          show: true,\n          mandatory: true,\n          message: `Sent claim instructions to ${username}`\n        }\n      } catch (error) {\n        console.warn('failed claim', error)\n        this.snackbar = {\n          show: true,\n          mandatory: true,\n          message: `Error: ${error.message}`\n        }\n      }\n      this.registerLoading = false\n    },\n    async saveData () {\n      const formIsValid = this.$refs.form.validate()\n      if (formIsValid) {\n        this.saving = true\n        let operation = 'member details'\n        try {\n          // update the user\n          await this.updateSlug()\n          await this.updatePhone()\n          await this.saveAddress()\n          await this.upsertUsername()\n\n          const contactId = this.model.contacts[0].id\n          const { id } = this.model.contacts[0]\n          const email = this.model.contactEmail\n\n          await this.$apollo.mutate({\n            mutation: CONTACT_EMAIL_UPSERT,\n            variables: {\n              input: {\n                id,\n                email,\n                contactId\n              }\n            }\n          })\n          await this.upsertUser({\n            displayName: this.model.displayName,\n            firstName: this.model.firstName,\n            id: this.model.id,\n            lastName: this.model.lastName,\n            name: this.model.name,\n            statusId: this.model.statusId\n          })\n          await this.updateMemberSubset({\n            birthday: this.model.birthdate ? moment(this.model.birthdate).format('YYYY-MM-DD') : null,\n            legalLocaleId: this.model.legalLocaleId,\n            languageId: this.model.languageId,\n            memberId: this.model.id,\n            timezoneId: this.model.timezoneId\n          })\n\n          this.snackbar = {\n            show: true,\n            mandatory: true,\n            message: 'Updated member details'\n          }\n          // update the tags\n          let tagsStringArray = []\n          if (this.model.tags.length > 0) {\n            for (let tag of this.model.tags) {\n              tagsStringArray.push(`${tag}`)\n            }\n          }\n          operation = 'member tags'\n          if (!isEqual(this.tagsBeforeEdit, this.model.tags)) {\n            if (tagsStringArray.length > 0) {\n              await this.adjustTags({\n                memberId: this.model.id,\n                set: tagsStringArray\n              })\n            } else {\n              await this.adjustTags({\n                memberId: this.model.id,\n                set: [],\n                add: [],\n                remove: this.tagsBeforeEdit\n              })\n            }\n          }\n          this.snackbar = {\n            show: true,\n            mandatory: true,\n            message: 'Updated member tags'\n          }\n          // sync again\n          await this.sync()\n          this.snackbar = {\n            show: true,\n            mandatory: false,\n            message: 'Updated details and tags'\n          }\n          this.editing = false\n        } catch (error) {\n          console.warn('Failed updating member / tags', { error })\n          const msg = get(error, 'message', 'No error available').split('\\n')[0]\n          this.snackbar = {\n            show: true,\n            mandatory: false,\n            message: `Failed to update ${operation}:<br/> ${msg}`\n          }\n        } finally {\n          this.saving = false\n        }\n      } else {\n        this.snackbar = {\n          show: true,\n          mandatory: true,\n          message: 'One or more fields were filled out incorrectly'\n        }\n      }\n    }\n  },\n  async beforeRouteUpdate (to, from, next) {\n    await this.sync(to.params.id)\n    next()\n  },\n  async mounted () {\n    await this.sync()\n  },\n  apollo: {\n    settings: getLocalSettings()\n  }\n}\n",{"version":3,"sources":["UserDetails.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+UA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"UserDetails.vue","sourceRoot":"src/views/users","sourcesContent":["<template>\n  <v-flex xs12 class=\"user-details\">\n    <hr />\n    <ChangeSponsorDialog :showing=\"sponsorChange.show\" @close=\"sponsorChangeClose\" />\n    <v-speed-dial\n      dark\n      fab\n      bottom\n      right\n      fixed\n      color=\"pink\"\n      v-model=\"saveSpeedDial\"\n      direction=\"top\"\n      :open-on-hover=\"true\"\n      transition=\"slide-y-transition\"\n      :disabled=\"!saving\"\n      class=\"edit-speed-dial\"\n    >\n      <v-btn\n        slot=\"activator\"\n        v-model=\"saveActivator\"\n        color=\"pink\"\n        dark\n        fab\n        @click=\"saveActivator= !saveActivator\"\n      >\n        <v-icon v-if=\"!editing\">more_vert</v-icon>\n        <v-icon v-else>save</v-icon>\n      </v-btn>\n      <v-btn v-if=\"!editing\" fab dark small color=\"green\" @click=\"startEdit()\">\n        <v-icon>edit</v-icon>\n      </v-btn>\n      <v-btn v-if=\"editing\" fab dark small color=\"green\" @click=\"saveData\">\n        <v-icon>check</v-icon>\n      </v-btn>\n      <v-btn v-if=\"editing\" fab dark small color=\"red\" @click=\"cancelEdit\">\n        <v-icon>cancel</v-icon>\n      </v-btn>\n    </v-speed-dial>\n    <PrepImpersonate\n      v-if=\"model && credentials\"\n      :credentialId=\"credentialId.toString()\"\n      :showPrepDialog=\"showPrepDialog\"\n      :memberId=\"model.id\"\n      :tenantId=\"credentials.tenantId\"\n      @closeDialog=\"closeDialog\"\n    />\n    <v-snackbar :timeout=\"8000\" :top=\"true\" :right=\"true\" v-model=\"snackbar.show\">\n      <span v-html=\"snackbar.message\" />\n      <v-btn\n        v-if=\"!snackbar.mandatory\"\n        flat\n        color=\"pink\"\n        @click.native=\"snackbar.show = false\"\n      >Close</v-btn>\n    </v-snackbar>\n    <div v-if=\"!model\">\n      <v-alert :value=\"missing\" type=\"error\">Could not load the requested user</v-alert>\n      <v-alert :value=\"!missing\" type=\"info\">Loading</v-alert>\n    </div>\n    <v-layout row wrap v-else justify-space-around>\n      <v-flex xs12 sm4 class=\"align-center\">\n        <v-flex xs12>\n          <img :src=\"model.profileUrl\" class=\"profile\" v-if=\"model.profileUrl\" />\n          <v-icon class=\"profile-icon\" v-else>person</v-icon>\n        </v-flex>\n        <v-flex xs12 sm8 class=\"margin-center\">\n          <v-select\n            :disabled=\"!canEditStatus || !canEdit\"\n            :box=\"canEditStatus && editing\"\n            v-model=\"model.statusId\"\n            :items=\"memberStatus\"\n            item-text=\"name\"\n            item-value=\"id\"\n            label=\"Status\"\n          />\n        </v-flex>\n        <v-flex xs12 sm8 class=\"margin-center\">\n          <v-combobox\n            chips\n            multiple\n            label=\"Tags\"\n            v-model=\"model.tags\"\n            :box=\"editing\"\n            :regular=\"!editing\"\n            :items=\"availableTags.values\"\n            item-text=\"blah\"\n            :disabled=\"!editing || availableTags.loading\"\n            :append-icon=\"editing ? '$vuetify.icons.dropdown' : null\"\n          ></v-combobox>\n        </v-flex>\n      </v-flex>\n\n      <v-flex xs12 sm8>\n        <v-form ref=\"form\">\n          <v-layout justify-center fill-height row wrap>\n            <v-flex sm6 xs12>\n              <v-text-field v-model=\"model.mrn\" label=\"Member Number\" required regular disabled />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field v-model=\"model.tenantOid\" label=\"Member Oid\" required regular disabled />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field\n                v-model=\"model.name\"\n                label=\"Name\"\n                required\n                :box=\"editing\"\n                :regular=\"!editing\"\n                :disabled=\"!canEdit\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field\n                v-model=\"model.firstName\"\n                label=\"First Name\"\n                required\n                :box=\"editing\"\n                :regular=\"!editing\"\n                :disabled=\"!canEdit\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field\n                v-model=\"model.slug.slug\"\n                label=\"Slug\"\n                :rules=\"(model.slug && model.slug.length) ? rules.slug : []\"\n                :box=\"editing\"\n                :regular=\"!editing\"\n                :disabled=\"!canEdit\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field\n                v-model=\"model.phone.number\"\n                label=\"Phone Number\"\n                required\n                mask=\"phone\"\n                :box=\"editing\"\n                :regular=\"!editing\"\n                :disabled=\"!canEdit\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field label=\"Claimed On\" v-model=\"model.claimedOn\" disabled />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field\n                label=\"Joined On\"\n                v-model=\"model.joinedOn\"\n                disabled\n                format=\"MM/DD/YYYY\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field v-model=\"model.id\" label=\"System ID\" regular disabled />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field\n                :disabled=\"!canEdit\"\n                v-model=\"model.birthdate\"\n                label=\"Date of Birth\"\n                placeholder=\"MM/DD/YYYY\"\n                :rules=\"model.birthdate ? rules.birthdate : []\"\n              ></v-text-field>\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field\n                v-model=\"model.displayName\"\n                label=\"Display Name\"\n                required\n                :box=\"editing\"\n                :regular=\"!editing\"\n                :disabled=\"!canEdit\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field\n                v-model=\"model.lastName\"\n                label=\"Last Name\"\n                required\n                :box=\"editing\"\n                :regular=\"!editing\"\n                :disabled=\"!canEdit\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field\n                v-model=\"model.contactEmail\"\n                :rules=\"rules.emailRules\"\n                label=\"E-mail\"\n                required\n                :box=\"editing\"\n                :regular=\"!editing\"\n                :disabled=\"!canEdit\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-select\n                :disabled=\"!canEdit\"\n                :items=\"settings.legalLocales\"\n                item-text=\"name\"\n                item-value=\"id\"\n                label=\"Select your locale\"\n                v-model=\"model.legalLocaleId\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-select\n                :disabled=\"!canEdit\"\n                :items=\"settings.languages\"\n                item-text=\"name\"\n                item-value=\"id\"\n                label=\"Select your Language\"\n                v-model=\"model.languageId\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-autocomplete\n                :disabled=\"!canEdit\"\n                :items=\"settings.timezones\"\n                item-text=\"name\"\n                item-value=\"id\"\n                label=\"Select your Timezone\"\n                v-model=\"model.timezoneId\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field\n                prepend-icon=\"vertical_align_top\"\n                @click:prepend=\"showSponsor(model.sponsorOid)\"\n                :append-outer-icon=\"canChangeSponsor ? 'edit' : null\"\n                @click=\"cancelEvent\"\n                @hover=\"cancelEvent\"\n                @click:append-outer=\"changeSponsor\"\n                v-model=\"model.sponsorOid\"\n                label=\"Sponsor Oid\"\n                required\n                regular\n                :readonly=\"true\"\n                :loading=\"loadingSponsor\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12></v-flex>\n          </v-layout>\n          <v-layout justify-center fill-height row wrap>\n            <v-flex sm6 xs12>\n              <h3 class=\"credential-header\">Address</h3>\n              <v-text-field\n                :disabled=\"!canEdit\"\n                label=\"Name\"\n                required\n                v-model=\"model.address.name\"\n              />\n              <v-text-field\n                :disabled=\"!canEdit\"\n                label=\"Street\"\n                required\n                v-model=\"model.address.street\"\n              />\n              <v-text-field :disabled=\"!canEdit\" label=\"Street 2\" v-model=\"model.address.street2\" />\n              <v-text-field\n                :disabled=\"!canEdit\"\n                label=\"City\"\n                required\n                v-model=\"model.address.city\"\n              />\n              <v-text-field\n                :disabled=\"!canEdit\"\n                label=\"State/Province\"\n                v-model=\"model.address.province\"\n                required\n              />\n              <v-text-field\n                :disabled=\"!canEdit\"\n                label=\"Postal Code\"\n                v-model=\"model.address.postalCode\"\n                required\n              />\n              <v-text-field\n                :disabled=\"!canEdit\"\n                label=\"Country\"\n                v-model=\"model.address.country\"\n                required\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <h3 class=\"credential-header\">User Credentials</h3>\n\n              <div\n                :key=\"index\"\n                class=\"credential-card\"\n                v-for=\"(data, index) in credentials.credentials\"\n              >\n                <v-text-field\n                  :box=\"editing\"\n                  :regular=\"!editing\"\n                  :disabled=\"!canEdit\"\n                  label=\"Username\"\n                  v-model=\"username\"\n                  prepend-icon=\"person\"\n                  required\n                />\n                <v-text-field v-model=\"identityId\" prepend-icon=\"lock\" required disabled />\n\n                <v-menu bottom left>\n                  <v-btn :loading=\"resetLoading || registerLoading\" slot=\"activator\">Actions</v-btn>\n                  <v-list>\n                    <v-list-tile\n                      v-if=\"canImpersonate\"\n                      @click=\"prepImpersonate(credentials.credentials[index].id)\"\n                    >\n                      <v-list-tile-title>Impersonate</v-list-tile-title>\n                    </v-list-tile>\n                    <v-list-tile @click=\"resetPassword(credentials.credentials[index])\">\n                      <v-list-tile-title>Reset Password</v-list-tile-title>\n                    </v-list-tile>\n                    <v-list-tile @click=\"register(credentials.credentials[index])\">\n                      <v-list-tile-title>Claim Account</v-list-tile-title>\n                    </v-list-tile>\n                  </v-list>\n                </v-menu>\n              </div>\n            </v-flex>\n          </v-layout>\n        </v-form>\n      </v-flex>\n    </v-layout>\n    <v-snackbar v-model=\"syncing.active\" :timeout=\"1200\" bottom vertical auto-height>\n      <span style=\"text-align: center;\">{{syncing.message}}</span>\n    </v-snackbar>\n  </v-flex>\n</template>\n\n<script>\nimport { get, isEmpty, isEqual } from 'lodash'\nimport moment from 'moment'\nimport { mapActions, mapGetters, mapMutations, mapState } from 'vuex'\n\nimport { ClaimActions } from '@/stores/ClaimStore'\nimport { UsersActions, UsersMutations } from '@/users/UsersStore'\nimport { StoreGetters } from '@/store'\n\nimport getLocalSettings from '@/graphql/GetLocaleSettings'\nimport GET_MEMBER_STATUS from '@/graphql/GetMemberStatus.gql'\nimport MEMBER_BY_ID from '@/graphql/MemberById.gql'\nimport { CONTACT_EMAIL_UPSERT } from '@/graphql/Contacts.js'\nimport iamUpsertUsername from '@/graphql/UpsertUsername.gql'\n\nimport PrepImpersonate from '@/iam/PrepImpersonate.vue'\nimport ChangeSponsorDialog from '@/components/ChangeSponsorDialog'\n\nexport default {\n  components: {\n    PrepImpersonate,\n    ChangeSponsorDialog\n  },\n  data () {\n    return {\n      loadingSponsor: false,\n      syncing: {\n        active: false,\n        message: 'Transferring data'\n      },\n      registerLoading: false,\n      resetLoading: false,\n      sponsorChange: {\n        show: false\n      },\n      tagsBeforeEdit: [],\n      showPrepDialog: false,\n      saveSpeedDial: false,\n      saveActivator: false,\n      saving: false,\n      editing: false,\n      formattedDate: null,\n      model: {\n        address: {},\n        phone: {},\n        slug: {}\n      },\n      moment,\n      missing: false,\n      isUploading: false,\n      isSaving: false,\n      valid: true,\n      credentials: [],\n      credentialId: '',\n      identityId: null,\n      username: '',\n      memberStatus: [],\n      rules: {\n        birthdate: [\n          v => (v && moment(v).isValid()) || 'Birthday Must Be in MM/DD/YYYY Format'\n        ],\n        emailRules: [\n          v => !!v || 'E-mail is required',\n          v => /.+@.+/.test(v) || 'E-mail must be valid'\n        ],\n        slug: [\n          v => !!v || 'Field is required and cannot be changed once submitted',\n          v =>\n            (v && /^[a-zA-Z0-9]+(?:-[a-z0-9]+)*$/.test(v)) ||\n            'Store name must not have spaces or special characters',\n          v => {\n            return (\n              (v && v.length <= 20 && v.length >= 4) ||\n              'Store name must be between 4 and 20 characters'\n            )\n          }\n        ]\n      },\n      settings: {},\n      snackbar: {\n        show: false,\n        message: undefined,\n        mandatory: false\n      }\n    }\n  },\n  computed: {\n    ...mapGetters({\n      permissions: StoreGetters.permissions\n    }),\n    ...mapState({\n      availableTags: state => ({\n        loading: state.tenants.tags.loading,\n        values: state.tenants.tags.values.map(e => e.name)\n      })\n    }),\n    canEdit () { return this.editing && !this.syncing.active && !this.saving },\n    canImpersonate () {\n      return this.permissions.find(p => p.id === 11 || p.id === 12)\n    },\n    canEditStatus () {\n      return this.permissions.find(p => p.id === 16)\n    },\n    canChangeSponsor () {\n      return this.permissions.find(p => p.id === 11 || p.id === 99)\n    },\n    id () { return ~~this.$route.params.id },\n    member () { return get(this.target, 'member', {}) }\n  },\n  methods: {\n    ...mapActions({\n      adjustTags: UsersActions.ADJUST_TAGS,\n      getAddress: UsersActions.GET_ADDRESS,\n      getCredentials: UsersActions.GET_USER_CREDENTIALS,\n      getPhone: UsersActions.GET_PHONE,\n      getUser: UsersActions.GET_USER,\n      upsertUser: UsersActions.UPSERT_USER,\n      _updateSlug: UsersActions.UPDATE_SLUG,\n      createSlug: UsersActions.CREATE_SLUG\n    }),\n    ...mapMutations({\n      _updateAddress: UsersMutations.UPDATE_ADDRESS,\n      _updatePhone: UsersMutations.UPDATE_PHONE,\n      createPhone: UsersMutations.CREATE_PHONE,\n      updateMemberSubset: UsersMutations.UPDATE_SUBSET\n    }),\n    async getMemberStatus () {\n      const { data } = await this.$apollo.query({\n        query: GET_MEMBER_STATUS,\n        fetchPolicy: 'network-only'\n      })\n      this.memberStatus = data.getMemberStatus\n    },\n    async showSponsor (sponsorId) {\n      this.loadingSponsor = true\n      const { data } = await this.$apollo.query({\n        query: MEMBER_BY_ID,\n        variables: {\n          condition: {\n            tenantOids: [sponsorId]\n          }\n        }\n      })\n      const sponsor = data.members\n      if (sponsor.nodes && sponsor.nodes[0] && sponsor.nodes[0].id) {\n        this.loadingSponsor = false\n        this.$router.push(`/members/${sponsor.nodes[0].id}`)\n      }\n    },\n    async changeSponsor () {\n      this.sponsorChange.show = true\n    },\n    async sponsorChangeClose () {\n      this.sponsorChange.show = false\n      await this.sync()\n    },\n    async cancelEvent (e) {\n      e.preventDefault()\n      e.stopPropagation()\n    },\n    startEdit () {\n      this.editing = true\n      this.tagsBeforeEdit = this.model.tags\n      // this.saveActivator =\n    },\n    requiredRule (field) { return [v => !!v || `${field} is required`] },\n    prepImpersonate (id) {\n      this.credentialId = id\n      this.showPrepDialog = true\n    },\n    closeDialog () {\n      this.credentialId = ''\n      this.showPrepDialog = false\n    },\n    saveAddress () {\n      if (isEmpty(this.model.address)) return\n      return this._updateAddress({\n        id: this.model.address.id,\n        name: this.model.address.name,\n        street: this.model.address.street,\n        city: this.model.address.city,\n        province: this.model.address.province,\n        country: this.model.address.country,\n        postalCode: this.model.address.postalCode,\n        street2: this.model.address.street2 || '',\n        memberId: this.model.memberId,\n        contactId: this.model.contacts[0].id\n      })\n    },\n    saveDate (date) {\n      this.$refs.dialog.save(date)\n    },\n    async updatePhone () {\n      if (!this.model.phone.number) return\n      const { id, number } = this.model.phone\n      const contactId = this.model.contacts[0].id\n      return this.model.phone.id\n        ? this._updatePhone({ contactId, id, number })\n        : this.createPhone({ contactId, id: this.model.id, number })\n    },\n    async updateSlug () {\n      if (!this.model.slug || !this.model.slug.slug) return\n      const memberId = ~~this.$route.params.id\n      const { tenantId } = this.model\n      const { id, slug, priority } = this.model.slug\n      return priority >= 0\n        ? this._updateSlug({ id, slug, priority, memberId, tenantId })\n        : this.createSlug({ slug, memberId, tenantId })\n    },\n    async sync (mustId) {\n      this.syncing.active = true\n      this.syncing.message = 'Transferring data'\n      const memberId = ~~(mustId || this.$route.params.id)\n      if (memberId) {\n        const user = await this.getUser({ id: memberId })\n        this.credentials = await this.getCredentials(memberId)\n        this.model = {\n          ...this.model,\n          ...user,\n          contactEmail: user.contacts[0].emails[0].email,\n          slug: { ...user.slugs[0] }\n        }\n        const { contacts } = this.model\n        const address = await this.getAddress(contacts[0].id)\n        const phone = await this.getPhone(contacts[0].id)\n        this.model = {\n          ...this.model,\n          address: { ...address },\n          phone: { ...phone }\n        }\n        await this.getMemberStatus()\n        if (this.model.birthdate) {\n          this.model.birthdate = moment(this.model.birthdate).format('MM/DD/YYYY')\n        }\n        this.username = this.credentials.credentials[0].username\n        this.identityId = this.credentials.credentials[0].identityId\n        this.missing = false\n      } else {\n        this.model = undefined\n        this.missing = true\n      }\n      this.syncing.message = 'Transfer complete'\n    },\n    upsertUsername () {\n      if (!this.credentials.credentials) {\n        return null\n      }\n      const { identityId, username } = this\n      this.$apollo.mutate({\n        mutation: iamUpsertUsername,\n        variables: {\n          input: {\n            identityId,\n            username\n          }\n        }\n      })\n    },\n    async cancelEdit () {\n      this.editing = false\n      await this.sync()\n    },\n    async resetPassword (cred) {\n      this.resetLoading = true\n      try {\n        const { username } = cred\n        const { memberId, tenantId } = this.model\n        await this.$store.dispatch(ClaimActions.RESET, { memberId, tenantId, email: username })\n        this.snackbar = {\n          show: true,\n          mandatory: true,\n          message: `Reset password for ${username}`\n        }\n      } catch (error) {\n        console.warn('failed reset password', error)\n        this.snackbar = {\n          show: true,\n          mandatory: true,\n          message: `Error: ${error.message}`\n        }\n      }\n      this.resetLoading = false\n    },\n    async register (cred) {\n      this.registerLoading = true\n      try {\n        const { username } = cred\n        const { memberId, tenantId } = this.model\n        await this.$store.dispatch(ClaimActions.CLAIM, { memberId, tenantId, email: username })\n        this.snackbar = {\n          show: true,\n          mandatory: true,\n          message: `Sent claim instructions to ${username}`\n        }\n      } catch (error) {\n        console.warn('failed claim', error)\n        this.snackbar = {\n          show: true,\n          mandatory: true,\n          message: `Error: ${error.message}`\n        }\n      }\n      this.registerLoading = false\n    },\n    async saveData () {\n      const formIsValid = this.$refs.form.validate()\n      if (formIsValid) {\n        this.saving = true\n        let operation = 'member details'\n        try {\n          // update the user\n          await this.updateSlug()\n          await this.updatePhone()\n          await this.saveAddress()\n          await this.upsertUsername()\n\n          const contactId = this.model.contacts[0].id\n          const { id } = this.model.contacts[0]\n          const email = this.model.contactEmail\n\n          await this.$apollo.mutate({\n            mutation: CONTACT_EMAIL_UPSERT,\n            variables: {\n              input: {\n                id,\n                email,\n                contactId\n              }\n            }\n          })\n          await this.upsertUser({\n            displayName: this.model.displayName,\n            firstName: this.model.firstName,\n            id: this.model.id,\n            lastName: this.model.lastName,\n            name: this.model.name,\n            statusId: this.model.statusId\n          })\n          await this.updateMemberSubset({\n            birthday: this.model.birthdate ? moment(this.model.birthdate).format('YYYY-MM-DD') : null,\n            legalLocaleId: this.model.legalLocaleId,\n            languageId: this.model.languageId,\n            memberId: this.model.id,\n            timezoneId: this.model.timezoneId\n          })\n\n          this.snackbar = {\n            show: true,\n            mandatory: true,\n            message: 'Updated member details'\n          }\n          // update the tags\n          let tagsStringArray = []\n          if (this.model.tags.length > 0) {\n            for (let tag of this.model.tags) {\n              tagsStringArray.push(`${tag}`)\n            }\n          }\n          operation = 'member tags'\n          if (!isEqual(this.tagsBeforeEdit, this.model.tags)) {\n            if (tagsStringArray.length > 0) {\n              await this.adjustTags({\n                memberId: this.model.id,\n                set: tagsStringArray\n              })\n            } else {\n              await this.adjustTags({\n                memberId: this.model.id,\n                set: [],\n                add: [],\n                remove: this.tagsBeforeEdit\n              })\n            }\n          }\n          this.snackbar = {\n            show: true,\n            mandatory: true,\n            message: 'Updated member tags'\n          }\n          // sync again\n          await this.sync()\n          this.snackbar = {\n            show: true,\n            mandatory: false,\n            message: 'Updated details and tags'\n          }\n          this.editing = false\n        } catch (error) {\n          console.warn('Failed updating member / tags', { error })\n          const msg = get(error, 'message', 'No error available').split('\\n')[0]\n          this.snackbar = {\n            show: true,\n            mandatory: false,\n            message: `Failed to update ${operation}:<br/> ${msg}`\n          }\n        } finally {\n          this.saving = false\n        }\n      } else {\n        this.snackbar = {\n          show: true,\n          mandatory: true,\n          message: 'One or more fields were filled out incorrectly'\n        }\n      }\n    }\n  },\n  async beforeRouteUpdate (to, from, next) {\n    await this.sync(to.params.id)\n    next()\n  },\n  async mounted () {\n    await this.sync()\n  },\n  apollo: {\n    settings: getLocalSettings()\n  }\n}\n</script>\n\n<style scoped>\n.v-input {\n  padding-right: 15px;\n}\n.user-details {\n  padding-top: 15px;\n}\n.user-details .v-text-field--box .v-input__slot {\n  background: #fff !important;\n}\n.profile {\n  width: 200px;\n  height: 200px;\n  border: 1px solid #ccc;\n}\n.profile-icon {\n  font-size: 110px !important;\n  width: 200px;\n  height: 200px;\n  border: 1px solid #ccc;\n}\n.credential-card {\n  border: 1px solid #efefef;\n  padding: 15px;\n}\n\n.credential-header {\n  padding: 10px 0px;\n}\n\n.edit-speed-dial {\n  bottom: 20px;\n  right: 30px;\n}\n</style>\n"]}]}