{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/payouts/PayoutsMember.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/payouts/PayoutsMember.vue","mtime":1574205294000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getMemberPayout } from '@/users/users.gql'\nimport { TenantsActions } from '@/tenants/TenantsStore'\nimport PayoutDialog from '@/components/PayoutDialog.vue'\nimport { mapGetters, mapState, mapActions } from 'vuex'\nimport { StoreGetters } from '@/store'\n\nexport default {\n  components: {\n    PayoutDialog\n  },\n  data () {\n    return {\n      payouts: [],\n      headers: [\n        { text: 'Id', value: 'id', sortable: false },\n        { text: 'Amount', value: 'amount', sortable: false },\n        { text: 'Currency', value: 'currency', sortable: false },\n        { text: 'Note', value: 'note', sortable: false },\n        { text: 'Status', value: 'status', sortable: false },\n        { text: 'Created', value: 'createdOn', sortable: false }\n      ],\n      addDialog: false,\n      integrationId: null,\n      supportedIntegrations: ['stripe_connect'],\n      loadingPayouts: false\n    }\n  },\n  async mounted () {\n    if (this.integrations.length === 0) {\n      await this.fetchTenantInfo()\n    }\n    const integration = this.integrations.find(i => {\n      return this.supportedIntegrations.indexOf(i.key) >= 0\n    })\n    this.integrationId = integration.id\n    this.payouts = await this.getPayoutHistory()\n  },\n  methods: {\n    ...mapActions({\n      fetchTenantInfo: TenantsActions.FETCH_TENANT_INFO\n    }),\n    async getPayoutHistory () {\n      this.loadingPayouts = true\n      const data = await this.$apollo.query({\n        query: getMemberPayout,\n        variables: {\n          ids: [this.id]\n        },\n        fetchPolicy: 'network-only'\n      })\n      this.loadingPayouts = false\n      return data.data.membersByIds[0].payouts\n    },\n    canWritePayout () {\n      return this.permissions.find(p => p.id === 15)\n    },\n    async submitted () {\n      this.payouts = await this.getPayoutHistory()\n    },\n    addPayout () {\n      this.addDialog = true\n    },\n    closeDialog () {\n      this.addDialog = false\n    }\n  },\n  computed: {\n    ...mapState({\n      integrations: state => {\n        return state.tenants.info.integrations\n      }\n    }),\n    ...mapGetters({\n      permissions: StoreGetters.permissions\n    }),\n    id () { return ~~this.$route.params.id }\n  },\n  async beforeRouteUpdate (to, from, next) {\n    const { id } = to.params\n    if (id) {\n      this.payouts = await this.getPayoutHistory()\n    }\n    next()\n  }\n}\n",{"version":3,"sources":["PayoutsMember.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PayoutsMember.vue","sourceRoot":"src/views/payouts","sourcesContent":["<template>\n  <v-layout column ma-5>\n    <h1>Payouts</h1>\n    <v-btn\n      @click=\"addPayout\"\n      color=\"pink\"\n      dark\n      absolute\n      left\n      fab\n      v-if=\"canWritePayout()\"\n    >\n      <v-icon>add</v-icon>\n    </v-btn>\n\n    <v-data-table :items=\"payouts\" :headers=\"headers\" hide-actions :loading=\"loadingPayouts\">\n      <template slot=\"items\" slot-scope=\"props\">\n        <!-- <tr @click=\"openUnit(props.item.id)\"> -->\n        <td class=\"text-xs\">{{ props.item.id}}</td>\n        <td class=\"text-xs\">{{ (props.item.amount / 100) | toCurrency(props.item.currency)}}</td>\n        <td class=\"text-xs\">{{ props.item.currency}}</td>\n        <td class=\"text-xs\">{{ props.item.note}}</td>\n        <td class=\"text-xs\">{{ props.item.status}}</td>\n        <td class=\"text-xs\">{{ props.item.createdOn}}</td>\n        <!-- </tr> -->\n      </template>\n    </v-data-table>\n    <PayoutDialog :addDialog=\"addDialog\" @closeDialog=\"closeDialog\" @submitted=\"submitted\" :integrationId=\"integrationId\"/>\n  </v-layout>\n</template>\n\n<script>\nimport { getMemberPayout } from '@/users/users.gql'\nimport { TenantsActions } from '@/tenants/TenantsStore'\nimport PayoutDialog from '@/components/PayoutDialog.vue'\nimport { mapGetters, mapState, mapActions } from 'vuex'\nimport { StoreGetters } from '@/store'\n\nexport default {\n  components: {\n    PayoutDialog\n  },\n  data () {\n    return {\n      payouts: [],\n      headers: [\n        { text: 'Id', value: 'id', sortable: false },\n        { text: 'Amount', value: 'amount', sortable: false },\n        { text: 'Currency', value: 'currency', sortable: false },\n        { text: 'Note', value: 'note', sortable: false },\n        { text: 'Status', value: 'status', sortable: false },\n        { text: 'Created', value: 'createdOn', sortable: false }\n      ],\n      addDialog: false,\n      integrationId: null,\n      supportedIntegrations: ['stripe_connect'],\n      loadingPayouts: false\n    }\n  },\n  async mounted () {\n    if (this.integrations.length === 0) {\n      await this.fetchTenantInfo()\n    }\n    const integration = this.integrations.find(i => {\n      return this.supportedIntegrations.indexOf(i.key) >= 0\n    })\n    this.integrationId = integration.id\n    this.payouts = await this.getPayoutHistory()\n  },\n  methods: {\n    ...mapActions({\n      fetchTenantInfo: TenantsActions.FETCH_TENANT_INFO\n    }),\n    async getPayoutHistory () {\n      this.loadingPayouts = true\n      const data = await this.$apollo.query({\n        query: getMemberPayout,\n        variables: {\n          ids: [this.id]\n        },\n        fetchPolicy: 'network-only'\n      })\n      this.loadingPayouts = false\n      return data.data.membersByIds[0].payouts\n    },\n    canWritePayout () {\n      return this.permissions.find(p => p.id === 15)\n    },\n    async submitted () {\n      this.payouts = await this.getPayoutHistory()\n    },\n    addPayout () {\n      this.addDialog = true\n    },\n    closeDialog () {\n      this.addDialog = false\n    }\n  },\n  computed: {\n    ...mapState({\n      integrations: state => {\n        return state.tenants.info.integrations\n      }\n    }),\n    ...mapGetters({\n      permissions: StoreGetters.permissions\n    }),\n    id () { return ~~this.$route.params.id }\n  },\n  async beforeRouteUpdate (to, from, next) {\n    const { id } = to.params\n    if (id) {\n      this.payouts = await this.getPayoutHistory()\n    }\n    next()\n  }\n}\n</script>\n\n<style>\n.addbtn.sm {\n  top: -5px !important;\n}\n.addbtn {\n  top: 15px;\n}\n</style>\n"]}]}