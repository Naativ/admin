{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/Teacher.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/Teacher.vue","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport MEMBER_BY_ID from '@/graphql/MemberById.gql'\nimport getTeamByMemberId from '@/graphql/GetTeam'\nimport UPDATE_MEMBER from '@/graphql/UpdateMember.gql'\n// import moment from 'moment'\nimport Address from '@/components/Address'\nimport MemberInfo from '@/components/MemberInfo'\nimport { Actions } from '@/store'\n// import { find, defaultTo, pathOr, map } from 'ramda'\n// import { log } from 'async'\nimport { pathOr } from 'ramda'\nexport default {\n  name: 'Teacher',\n  data() {\n    return {\n      name: null,\n      visible: false,\n      password: '',\n      isSaving: false,\n      uploadFileName: null,\n      isUploading: false,\n      currentId: ~~this.$route.params.id,\n      snackbar: false,\n      snackbarMessage: '',\n      saving: false,\n      memberInfo: {\n        id: '',\n        name: '',\n        displayName: '',\n        contactEmail: '',\n        profileUrl: ''\n      },\n      results: {}\n    }\n  },\n  components: {\n    Address,\n    MemberInfo\n  },\n  methods: {\n    async filesChange(files) {\n      const file = files[0]\n      this.isSaving = true\n      this.isUploading = true\n      const { data } = await this.$store.dispatch(Actions.FILE_UPLOAD, {\n        file\n      })\n      this.isFalse = false\n      this.isUploading = false\n      this.MemberInfo.profileUrl = data.secure_url\n      this.saveData()\n    },\n    saveData() {\n      this.saving = true\n      this.$apollo.mutate({\n        mutation: UPDATE_MEMBER,\n        variables: {\n          memberInput: {\n            memberId: this.memberInfo.memberId,\n            name: this.memberInfo.name,\n            displayName: this.memberInfo.displayName,\n            contactEmail: this.memberInfo.email,\n            profileUrl: this.memberInfo.profileUrl\n          }\n        },\n        update: (store, response) => {\n          this.saving = false\n          this.snackbar = true\n        }\n      })\n    },\n    showTeam(memberId) {\n      this.$router.push({\n        path: `/teacher/${memberId == null ? '' : memberId}`\n      })\n    },\n    onSuccess(message) {\n      this.snackbar = true\n      this.snackbarMessage = message\n    },\n    onError(errorMessage) {\n      if (typeof errorMessage === 'string') {\n        this.error = errorMessage\n      } else {\n        const errors = pathOr({}, ['response', 'data', 'errors'], errorMessage)\n        this.snackbarMessage = pathOr(\n          'There seems to be a problem. Please try again later or contact customer support.',\n          ['message'],\n          errors[0]\n        )\n      }\n      this.snackbar = true\n    }\n  },\n  computed: {\n    getAvatar() {\n      return (\n        this.memberInfo.profileUrl ||\n        'http://res.cloudinary.com/hexly/image/upload/dev/1001/avatar/undefined.jpg'\n      )\n    }\n  },\n  apollo: {\n    name: {\n      query: MEMBER_BY_ID,\n      variables() {\n        return {\n          condition: {\n            id: this.currentId\n          }\n        }\n      },\n      update({ allHierarchies }) {\n        return allHierarchies.nodes[0] ? allHierarchies.nodes[0].name : 'root'\n      },\n      skip() {\n        return this.$store.state.user.principal.tenantId === undefined\n      }\n    },\n    results() {\n      return getTeamByMemberId(\n        'currentId',\n        this.$store.state.user.principal.tenantId\n      )\n    },\n    update({ targetStats, firstLevelStats }) {\n      return targetStats.nodes.concat(firstLevelStats.nodes)\n    },\n    skip() {\n      return this.$store.state.user.principal.tenantId === undefined\n    }\n  }\n}\n",{"version":3,"sources":["Teacher.vue"],"names":[],"mappingsfile":"Teacher.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <v-flex xs12>\n    <div class=\"teacher\">\n      <h1>{{ name }}'s Profile</h1>\n      <div v-if=\"!$apollo.queries.results.loading\">\n        <v-flex xs4>\n          <div class=\"mx-auto\">\n            <h3>Profile Image</h3>\n            <img class=\"image\" :src=\"getAvatar\">\n            <form enctype=\"multipart/form-data\" novalidate>\n              <input\n                type=\"file\"\n                name=\"avatar\"\n                :disabled=\"isSaving\"\n                @change=\"filesChange($event.target.files)\"\n                accept=\"image/*\"\n              >\n              <div v-if=\"isUploading\">Uploading... please wait</div>\n            </form>\n          </div>\n        </v-flex>\n        <v-layout row wrap>\n          <v-flex lg6 v-if=\"results && results.target\">\n            <h3>Address</h3>\n            <Address :memberId=\"results.target.memberId\"/>\n          </v-flex>\n          <v-spacer></v-spacer>\n          <v-flex lg6 v-if=\"results && results.target\">\n            <h3>Profile Information</h3>\n            <MemberInfo :memberId=\"results.target.memberId\"/>\n          </v-flex>\n        </v-layout>\n      </div>\n      <div v-else>\n        <v-progress-circular indeterminate :size=\"70\" :width=\"7\" color=\"black\"/>\n      </div>\n    </div>\n    <v-snackbar :timeout=\"8000\" :top=\"true\" :right=\"true\" v-model=\"snackbar\">\n      {{snackbarMessage}}\n      <v-btn flat color=\"pink\" @click.native=\"snackbar = false\">Close</v-btn>\n    </v-snackbar>\n  </v-flex>\n</template>\n\n<script>\nimport MEMBER_BY_ID from '@/graphql/MemberById.gql'\nimport getTeamByMemberId from '@/graphql/GetTeam'\nimport UPDATE_MEMBER from '@/graphql/UpdateMember.gql'\n// import moment from 'moment'\nimport Address from '@/components/Address'\nimport MemberInfo from '@/components/MemberInfo'\nimport { Actions } from '@/store'\n// import { find, defaultTo, pathOr, map } from 'ramda'\n// import { log } from 'async'\nimport { pathOr } from 'ramda'\nexport default {\n  name: 'Teacher',\n  data() {\n    return {\n      name: null,\n      visible: false,\n      password: '',\n      isSaving: false,\n      uploadFileName: null,\n      isUploading: false,\n      currentId: ~~this.$route.params.id,\n      snackbar: false,\n      snackbarMessage: '',\n      saving: false,\n      memberInfo: {\n        id: '',\n        name: '',\n        displayName: '',\n        contactEmail: '',\n        profileUrl: ''\n      },\n      results: {}\n    }\n  },\n  components: {\n    Address,\n    MemberInfo\n  },\n  methods: {\n    async filesChange(files) {\n      const file = files[0]\n      this.isSaving = true\n      this.isUploading = true\n      const { data } = await this.$store.dispatch(Actions.FILE_UPLOAD, {\n        file\n      })\n      this.isFalse = false\n      this.isUploading = false\n      this.MemberInfo.profileUrl = data.secure_url\n      this.saveData()\n    },\n    saveData() {\n      this.saving = true\n      this.$apollo.mutate({\n        mutation: UPDATE_MEMBER,\n        variables: {\n          memberInput: {\n            memberId: this.memberInfo.memberId,\n            name: this.memberInfo.name,\n            displayName: this.memberInfo.displayName,\n            contactEmail: this.memberInfo.email,\n            profileUrl: this.memberInfo.profileUrl\n          }\n        },\n        update: (store, response) => {\n          this.saving = false\n          this.snackbar = true\n        }\n      })\n    },\n    showTeam(memberId) {\n      this.$router.push({\n        path: `/teacher/${memberId == null ? '' : memberId}`\n      })\n    },\n    onSuccess(message) {\n      this.snackbar = true\n      this.snackbarMessage = message\n    },\n    onError(errorMessage) {\n      if (typeof errorMessage === 'string') {\n        this.error = errorMessage\n      } else {\n        const errors = pathOr({}, ['response', 'data', 'errors'], errorMessage)\n        this.snackbarMessage = pathOr(\n          'There seems to be a problem. Please try again later or contact customer support.',\n          ['message'],\n          errors[0]\n        )\n      }\n      this.snackbar = true\n    }\n  },\n  computed: {\n    getAvatar() {\n      return (\n        this.memberInfo.profileUrl ||\n        'http://res.cloudinary.com/hexly/image/upload/dev/1001/avatar/undefined.jpg'\n      )\n    }\n  },\n  apollo: {\n    name: {\n      query: MEMBER_BY_ID,\n      variables() {\n        return {\n          condition: {\n            id: this.currentId\n          }\n        }\n      },\n      update({ allHierarchies }) {\n        return allHierarchies.nodes[0] ? allHierarchies.nodes[0].name : 'root'\n      },\n      skip() {\n        return this.$store.state.user.principal.tenantId === undefined\n      }\n    },\n    results() {\n      return getTeamByMemberId(\n        'currentId',\n        this.$store.state.user.principal.tenantId\n      )\n    },\n    update({ targetStats, firstLevelStats }) {\n      return targetStats.nodes.concat(firstLevelStats.nodes)\n    },\n    skip() {\n      return this.$store.state.user.principal.tenantId === undefined\n    }\n  }\n}\n</script>\n\n<style>\n.image {\n  width: 75%;\n  height: 75%;\n}\n</style>\n"]}]}