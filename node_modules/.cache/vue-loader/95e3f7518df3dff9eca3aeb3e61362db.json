{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/assets/ReviewAssets.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/assets/ReviewAssets.vue","mtime":1574205365000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport AssetList from './AssetList.vue'\n\nimport { findIndex } from 'lodash'\nimport { mapActions, mapGetters } from 'vuex'\nimport { ContentActions, ContentGetters } from '@/content/ContentStore'\n\nexport default {\n  name: 'ReviewAssets',\n  components: {\n    AssetList\n  },\n  async mounted() {\n    await this.loadMetadata()\n    this.assetSearch.allTags = this.assetMeta.approval\n      .filter(e => e.key === 'approval:pending')\n      .map(e => e.id)\n    this.goGetAssets()\n  },\n  data() {\n    return {\n      loading: true,\n      uploadDialog: false,\n      currentAsset: null,\n      filtered: [],\n      assetSearch: {\n        pageSize: 25,\n        page: 1,\n        allTags: []\n      },\n      newAssets: []\n    }\n  },\n  computed: {\n    ...mapGetters({\n      library: ContentGetters.libraryAssets,\n      assetMeta: ContentGetters.assetMeta\n    })\n  },\n  methods: {\n    ...mapActions({\n      refreshLibrary: ContentActions.REFRESH_LIBRARY_ASSETS,\n      loadMetadata: ContentActions.REFRESH_ASSET_META\n    }),\n    tagAdded() {\n      this.goGetAssets()\n    },\n    async goGetAssets() {\n      this.loading = true\n      await this.refreshLibrary(this.assetSearch)\n      this.loading = false\n    },\n    updateAsset(asset) {\n      if (asset.visibilityId !== 200) return\n      const index = findIndex(this.assets.assets, a => a.id === asset.id)\n      this.$set(this.assets.assets[index], 'visibilityId', asset.visibilityId)\n    }\n  },\n  watch: {\n    'assetSearch.page'(newVal, oldVal) {\n      this.goGetAssets()\n    },\n    async 'library.assets'(newVal) {\n      const refreshedAssets = await Promise.all(newVal.map(a => new Promise(resolve => {\n        fetch(a.url)\n          .then((response) => {\n            resolve({ ...a, url: response.url })\n          })\n      })))\n      this.newAssets = refreshedAssets\n    }\n  }\n}\n",{"version":3,"sources":["ReviewAssets.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgBA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ReviewAssets.vue","sourceRoot":"src/views/assets","sourcesContent":["<template>\n  <div>\n    <v-progress-linear v-if=\"loading\" color=\"blue\" indeterminate></v-progress-linear>\n    <AssetList\n      :assets=\"newAssets\"\n      :loading=\"library.fetching\"\n      @uploaded=\"updateAsset\"\n      @tagAdded=\"tagAdded\"\n    />\n    <div class=\"text-xs-center\">\n      <v-pagination v-model=\"assetSearch.page\" :length=\"library.totalPages\" :total-visible=\"7\"></v-pagination>\n    </div>\n  </div>\n</template>\n\n<script>\nimport AssetList from './AssetList.vue'\n\nimport { findIndex } from 'lodash'\nimport { mapActions, mapGetters } from 'vuex'\nimport { ContentActions, ContentGetters } from '@/content/ContentStore'\n\nexport default {\n  name: 'ReviewAssets',\n  components: {\n    AssetList\n  },\n  async mounted() {\n    await this.loadMetadata()\n    this.assetSearch.allTags = this.assetMeta.approval\n      .filter(e => e.key === 'approval:pending')\n      .map(e => e.id)\n    this.goGetAssets()\n  },\n  data() {\n    return {\n      loading: true,\n      uploadDialog: false,\n      currentAsset: null,\n      filtered: [],\n      assetSearch: {\n        pageSize: 25,\n        page: 1,\n        allTags: []\n      },\n      newAssets: []\n    }\n  },\n  computed: {\n    ...mapGetters({\n      library: ContentGetters.libraryAssets,\n      assetMeta: ContentGetters.assetMeta\n    })\n  },\n  methods: {\n    ...mapActions({\n      refreshLibrary: ContentActions.REFRESH_LIBRARY_ASSETS,\n      loadMetadata: ContentActions.REFRESH_ASSET_META\n    }),\n    tagAdded() {\n      this.goGetAssets()\n    },\n    async goGetAssets() {\n      this.loading = true\n      await this.refreshLibrary(this.assetSearch)\n      this.loading = false\n    },\n    updateAsset(asset) {\n      if (asset.visibilityId !== 200) return\n      const index = findIndex(this.assets.assets, a => a.id === asset.id)\n      this.$set(this.assets.assets[index], 'visibilityId', asset.visibilityId)\n    }\n  },\n  watch: {\n    'assetSearch.page'(newVal, oldVal) {\n      this.goGetAssets()\n    },\n    async 'library.assets'(newVal) {\n      const refreshedAssets = await Promise.all(newVal.map(a => new Promise(resolve => {\n        fetch(a.url)\n          .then((response) => {\n            resolve({ ...a, url: response.url })\n          })\n      })))\n      this.newAssets = refreshedAssets\n    }\n  }\n}\n</script>\n\n<style scoped>\n</style>\n"]}]}