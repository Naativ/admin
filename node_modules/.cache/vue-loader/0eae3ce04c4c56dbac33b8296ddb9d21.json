{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/Login.vue","mtime":1573196227000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport AUTHENTICATE_MUTATION from '../graphql/Authenticate.gql'\nimport { UserActions, UserMutations } from '@/stores/UserStore'\n\nexport default {\n  name: 'Login',\n  data () {\n    return {\n      form: {\n        rules: [v => !!v || 'Field is required'],\n        email: '',\n        password: '',\n        tenantId: 1001\n      }\n    }\n  },\n  methods: {\n    async onSubmit () {\n      const formValidated = this.$refs.login.validate()\n      if (formValidated) {\n        this.$store.commit(UserMutations.LOGIN_TOGGLE_LOCK, true)\n        try {\n          const { data } = await this.$apollo.mutate({\n            mutation: AUTHENTICATE_MUTATION,\n            variables: {\n              authInput: {\n                tenantId: this.form.tenantId,\n                username: this.form.email,\n                password: this.form.password\n              }\n            }\n          })\n          const result = data\n          const {\n            login: { token, principal }\n          } = result\n          if (token) {\n            this.$store.commit(UserMutations.SET_JWT, token)\n            await this.$store.dispatch(UserActions.LOGIN_SUCCESS, principal)\n            this.$router.push('/dashboard')\n          } else {\n            this.$store.commit(\n              UserMutations.LOGIN_ERROR,\n              'Invalid Username/Password.'\n            )\n            this.$store.commit(UserMutations.LOGIN_TOGGLE_LOCK, false)\n          }\n        } catch (error) {\n          console.error({ error })\n          this.$store.commit(\n            UserMutations.LOGIN_ERROR,\n            'Error communicating with server.'\n          )\n          this.$store.commit(UserMutations.LOGIN_TOGGLE_LOCK, false)\n        }\n      } else {\n        console.error('Error in form')\n      }\n    }\n  }\n}\n\n",{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwFA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Login.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <v-content>\n    <v-container\n      fluid\n      fill-height\n    >\n      <v-layout\n        align-center\n        justify-center\n      >\n        <v-flex\n          xs12\n          sm8\n        >\n          <v-card class=\"elevation-12\">\n            <v-toolbar\n              dark\n              color=\"black\"\n            >\n              <v-toolbar-title>Login</v-toolbar-title>\n            </v-toolbar>\n            <v-card-text>\n              <img\n                class=\"logo\"\n                src=\"../assets/logo.png\"\n              >\n              <div>\n                <v-alert\n                  dismissible\n                  icon=\"error\"\n                  v-model=\"$store.state.user.login.error\"\n                  v-if=\"$store.state.user.login.error\"\n                >{{ $store.state.user.login.error }}</v-alert>\n              </div>\n              <v-form\n                ref=\"login\"\n                @submit.prevent=\"onSubmit()\"\n              >\n                <v-text-field\n                  data-cy=\"Tenant Login Page\"\n                  required\n                  v-model.number=\"form.tenantId\"\n                  :rules=\"form.rules\"\n                  prepend-icon=\"business\"\n                  name=\"tenantId\"\n                  label=\"Tenant ID\"\n                ></v-text-field>\n                <v-text-field\n                  data-cy=\"Email Login Page\"\n                  required\n                  :rules=\"form.rules\"\n                  v-model=\"form.email\"\n                  prepend-icon=\"person\"\n                  name=\"login\"\n                  label=\"Login\"\n                  type=\"email\"\n                ></v-text-field>\n                <v-text-field\n                  data-cy=\"Password Login Page\"\n                  required\n                  v-model=\"form.password\"\n                  :rules=\"form.rules\"\n                  prepend-icon=\"lock\"\n                  name=\"password\"\n                  label=\"Password\"\n                  id=\"password\"\n                  type=\"password\"\n                ></v-text-field>\n                <v-card-actions>\n                  <v-spacer></v-spacer>\n                  <v-btn\n                    data-cy=\"Login Login Page\"\n                    :loading=\"$store.state.user.login.locked\"\n                    type=\"submit\"\n                    color=\"deep-purple\"\n                    dark\n                  >Login</v-btn>\n                </v-card-actions>\n              </v-form>\n            </v-card-text>\n          </v-card>\n        </v-flex>\n      </v-layout>\n    </v-container>\n  </v-content>\n</template>\n\n<script>\nimport AUTHENTICATE_MUTATION from '../graphql/Authenticate.gql'\nimport { UserActions, UserMutations } from '@/stores/UserStore'\n\nexport default {\n  name: 'Login',\n  data () {\n    return {\n      form: {\n        rules: [v => !!v || 'Field is required'],\n        email: '',\n        password: '',\n        tenantId: 1001\n      }\n    }\n  },\n  methods: {\n    async onSubmit () {\n      const formValidated = this.$refs.login.validate()\n      if (formValidated) {\n        this.$store.commit(UserMutations.LOGIN_TOGGLE_LOCK, true)\n        try {\n          const { data } = await this.$apollo.mutate({\n            mutation: AUTHENTICATE_MUTATION,\n            variables: {\n              authInput: {\n                tenantId: this.form.tenantId,\n                username: this.form.email,\n                password: this.form.password\n              }\n            }\n          })\n          const result = data\n          const {\n            login: { token, principal }\n          } = result\n          if (token) {\n            this.$store.commit(UserMutations.SET_JWT, token)\n            await this.$store.dispatch(UserActions.LOGIN_SUCCESS, principal)\n            this.$router.push('/dashboard')\n          } else {\n            this.$store.commit(\n              UserMutations.LOGIN_ERROR,\n              'Invalid Username/Password.'\n            )\n            this.$store.commit(UserMutations.LOGIN_TOGGLE_LOCK, false)\n          }\n        } catch (error) {\n          console.error({ error })\n          this.$store.commit(\n            UserMutations.LOGIN_ERROR,\n            'Error communicating with server.'\n          )\n          this.$store.commit(UserMutations.LOGIN_TOGGLE_LOCK, false)\n        }\n      } else {\n        console.error('Error in form')\n      }\n    }\n  }\n}\n\n</script>\n\n<style scoped>\n.box-card {\n  width: 480px;\n  margin: auto;\n}\n.error {\n  margin: 5px;\n  padding: 10px;\n  text-align: center;\n}\n.logo {\n  width: 100%;\n  max-width: 250px;\n  margin: auto;\n  display: block;\n}\n</style>\n"]}]}