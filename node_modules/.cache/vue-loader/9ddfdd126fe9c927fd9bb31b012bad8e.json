{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/members/MemberDetails.vue?vue&type=style&index=0&id=20139d08&scoped=true&lang=css&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/members/MemberDetails.vue","mtime":1581353753564},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.formatted-fields-container {\n  padding: 0px 155px 0px 101px;\n  margin-bottom: 45px;\n}\n\n.justify-center {\n  justify-content: center;\n}\n\n.v-subheader * {\n  margin: 0px 2px;\n}\n\n.section-subheader {\n  font-size: 18px;\n}\n\n#member-card {\n  max-height: calc(100vh - 158px);\n  contain: content;\n  overflow-y: scroll;\n  background-color: #f1f1f1;\n  width: 100%;\n}\n\n.details-text {\n  display: flex;\n  flex-wrap: wrap;\n}\n\n#loader {\n  opacity: 0;\n  position: sticky;\n  top: 0px;\n  z-index: 1;\n  transition: opacity 1000ms;\n}\n\n.member-card-container {\n  justify-content: center;\n  padding-right: 102px;\n  padding-top: 0px;\n  padding-bottom: 52px;\n}\n",{"version":3,"sources":["MemberDetails.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkRA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"MemberDetails.vue","sourceRoot":"src/views/members","sourcesContent":["<template>\n  <div>\n    <ChangeSponsorDialog\n      :showing       =\"sponsorChange.show\"\n      @close         =\"sponsorChangeClose\"\n      :defaultMember =\"defaultMember\"\n    />\n    <PrepImpersonate\n      v-if=\"model && model.credentials\"\n      :credentialId        =\"model.credentials[0].id.toString()\"\n      :showPrepDialog      =\"showPrepDialog\"\n      :memberId            =\"model.id\"\n      :tenantId            =\"model.tenantId\"\n      @closeDialog         =\"showPrepDialog = false\"\n    />\n    <v-snackbar :timeout=\"6000\" :top=\"true\" :right=\"true\" v-model=\"snackbar.show\">\n      <span v-html=\"snackbar.message\" />\n      <v-btn\n        v-if=\"!snackbar.mandatory\"\n        flat\n        color=\"pink\"\n        @click.native=\"snackbar.show = false\"\n      >Close</v-btn>\n    </v-snackbar>\n    <v-card id=\"member-card\" v-if=\"member\">\n      <v-progress-linear\n        :indeterminate =\"$apollo.loading\"\n        ref            =\"loader\"\n        id             =\"loader\"\n      />\n      <v-card-title class=\"member-card-container\" primary-title>\n        <MemberCard\n          :member              =\"member\"\n          :compStats           =\"compStats\"\n          @changeSponsorClick  =\"changeSponsor\"\n          @prepImpersonate     =\"showPrepDialog = true\"\n          @resendPasswordReset =\"resendPasswordReset\"\n          @resendClaimEmail    =\"resendClaimEmail\"\n          @click:avatar        =\"avatarClick\"\n          :linkSponsor         =\"true\"\n        />\n      </v-card-title>\n\n      <div class=\"formatted-fields-container\">\n        <MemberDetailsCard\n          @snackbarEmit=\"handleSnackbarEmit\"\n        />\n      </div>\n      <div class=\"formatted-fields-container\">\n        <MiscDetailsCard\n          @snackbarEmit=\"handleSnackbarEmit\"\n        />\n      </div>\n      <div class=\"formatted-fields-container\">\n        <v-toolbar class=\"indigo darken-1 white--text\">\n          <v-toolbar-title class=\"section-subheader\">Contact Information</v-toolbar-title>\n        </v-toolbar>\n        <v-card>\n          <v-layout row wrap>\n            <ContactCard\n              @snackbarEmit=\"handleSnackbarEmit\"\n            />\n          </v-layout>\n        </v-card>\n      </div>\n      <div class=\"formatted-fields-container\">\n        <CredentialCard\n          @snackbarEmit=\"handleSnackbarEmit\"\n        />\n      </div>\n    </v-card>\n  </div>\n</template>\n\n<script>\n\nimport { cloneDeep } from 'lodash'\nimport moment from 'moment'\nimport { mapGetters, mapState } from 'vuex'\n\nimport MemberCard from './MemberCard'\nimport MemberDetailsCard from './MemberDetailsCard'\nimport MiscDetailsCard from './MiscDetailsCard'\nimport CredentialCard from './CredentialCard'\nimport ContactCard from './ContactCard'\nimport Unwrapper from '@/components/util/Unwrapper'\nimport { StoreGetters } from '@/store'\nimport ChangeSponsorDialog from '@/components/ChangeSponsorDialog'\nimport EditButton from './EditButton'\nimport PrepImpersonate from '@/iam/PrepImpersonate.vue'\nimport { ClaimActions } from '@/stores/ClaimStore'\nconst { MemberDetailsQuery, COMP_STATS_QUERY } = require('@/users/members.gql.js')\n\nexport default {\n  components: {\n    MemberCard,\n    Unwrapper,\n    ChangeSponsorDialog,\n    EditButton,\n    CredentialCard,\n    PrepImpersonate,\n    ContactCard,\n    MemberDetailsCard,\n    MiscDetailsCard\n  },\n  data () {\n    return {\n      month: new Date().getMonth() + 1,\n      year: new Date().getFullYear(),\n      showPrepDialog: false,\n      Unwrapper,\n      memberId: ~~this.$route.params.id,\n      member: null, // the untainted data\n      defaultMember: {},\n      model: null, // the working copy for this view\n      sponsorChange: {\n        show: false\n      },\n      snackbar: {\n        show: false,\n        message: undefined,\n        mandatory: false\n      }\n    }\n  },\n  methods: {\n    async resendPasswordReset() {\n      const { id: memberId, tenantId } = this.model\n      const { username } = this.model.credentials[0]\n      try {\n        await this.$store.dispatch(ClaimActions.RESET, { memberId, tenantId, email: username })\n        this.snackbar = {\n          show: true,\n          message: `Password reset email sent to ${username}`,\n          mandatory: undefined\n        }\n      } catch (error) {\n        this.snackbar = {\n          show: true,\n          message: error.message,\n          mandatory: undefined\n        }\n        throw new Error('Password reset error')\n      }\n    },\n    async resendClaimEmail() {\n      const { id: memberId, tenantId } = this.model\n      const { username } = this.model.credentials[0]\n      try {\n        await this.$store.dispatch(ClaimActions.CLAIM, { memberId, tenantId, email: username })\n        this.snackbar = {\n          show: true,\n          message: `Account claim email sent to ${username}`,\n          mandatory: undefined\n        }\n      } catch (error) {\n        this.snackbar = {\n          show: true,\n          message: error.message,\n          mandatory: undefined\n        }\n        throw new Error('Error resending claim email')\n      }\n    },\n    async changeSponsor () {\n      if (!this.canChangeSponsor) {\n        this.snackbar = {\n          message: 'You do not have access to this feature!',\n          show: true\n        }\n      }\n      this.sponsorChange.show = true\n    },\n    async sponsorChangeClose (e) {\n      const { message } = e\n      this.sponsorChange.show = false\n      if (message) {\n        this.snackbar.message = message\n        this.snackbar.show = true\n        await this.$apollo.queries.member.refetch()\n      }\n    },\n    handleSnackbarEmit(message) {\n      this.snackbar = {\n        show: true,\n        message: message,\n        mandatory: undefined\n      }\n    },\n    avatarClick() {\n      // TODO: picture upload handling\n    }\n  },\n  watch: {\n    member (next, prev) {\n      this.model = cloneDeep(next)\n      this.model.birthdate = this.model.birthdate ? moment(this.model.birthdate).format('L') : null\n      this.defaultMember = {\n        id: 1,\n        member: next,\n        sponsor: next.sponsor,\n        newSponsor: undefined\n      }\n    },\n    '$route'(newRoute) {\n      const { params: { id } } = newRoute\n      this.memberId = ~~id\n    },\n    '$apollo.loading'(loading) {\n      switch (loading) {\n        case true:\n          if (!this.$refs.loader) break\n          this.$refs.loader.$el.style.opacity = 1\n          break\n\n        case false:\n          if (!this.$refs.loader) break\n          this.$refs.loader.$el.style.opacity = 0\n          break\n\n        default:\n          break\n      }\n    }\n  },\n  apollo: {\n    member: {\n      ...MemberDetailsQuery,\n      variables () {\n        return {\n          memberId: this.memberId\n        }\n      }\n    },\n    compStats: {\n      query: COMP_STATS_QUERY,\n      variables() {\n        return {\n          input: {\n            year: this.year,\n            month: this.month,\n            membersIn: [this.memberId]\n          }\n        }\n      },\n      update({ compStatsQuery: { results } }) {\n        this.compStatsData = results[0]\n\n        return results[0]\n      }\n    }\n  },\n  computed: {\n    ...mapState({\n      access: state => state.access\n    }),\n    ...mapGetters({\n      permissions: StoreGetters.permissions\n    }),\n    locked () {\n      return true\n    },\n    canChangeSponsor () {\n      return this.permissions.find(p => p.id === 11 || p.id === 99)\n    }\n  },\n  async beforeRouteUpdate (to, from, next) {\n    await this.$apollo.queries.member.refresh()\n    next()\n  }\n}\n</script>\n\n<style scoped>\n  .formatted-fields-container {\n    padding: 0px 155px 0px 101px;\n    margin-bottom: 45px;\n  }\n\n  .justify-center {\n    justify-content: center;\n  }\n\n  .v-subheader * {\n    margin: 0px 2px;\n  }\n\n  .section-subheader {\n    font-size: 18px;\n  }\n\n  #member-card {\n    max-height: calc(100vh - 158px);\n    contain: content;\n    overflow-y: scroll;\n    background-color: #f1f1f1;\n    width: 100%;\n  }\n\n  .details-text {\n    display: flex;\n    flex-wrap: wrap;\n  }\n\n  #loader {\n    opacity: 0;\n    position: sticky;\n    top: 0px;\n    z-index: 1;\n    transition: opacity 1000ms;\n  }\n\n  .member-card-container {\n    justify-content: center;\n    padding-right: 102px;\n    padding-top: 0px;\n    padding-bottom: 52px;\n  }\n</style>\n"]}]}