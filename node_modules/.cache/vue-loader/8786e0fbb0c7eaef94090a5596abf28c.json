{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/iam/PrepImpersonate.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/iam/PrepImpersonate.vue","mtime":1577329618149},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.box {\n  padding: 10px;\n}\n.select {\n  width: 100%;\n}\n",{"version":3,"sources":["PrepImpersonate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+GA;AACA;AACA;AACA;AACA;AACA","file":"PrepImpersonate.vue","sourceRoot":"src/iam","sourcesContent":["<template>\n  <v-dialog v-model=\"show\" max-width=\"768\" persistent>\n    <v-card class=\"box\">\n      <h3>Impersonate</h3>\n      <v-form v-if=\"!success\">\n        <v-text-field\n          v-model=\"tempPin\"\n          label=\"Enter a tempory pin\"\n          required\n        >\n        </v-text-field>\n      </v-form>\n      <v-layout justify-space-around align-center column v-if=\"success\">\n        <v-text-field :value=\"impersonate.token\" label=\"Token\" outline readonly></v-text-field>\n        <h3>The following targets are available:</h3>\n        <v-flex class=\"select\">\n          <v-select\n            :items=\"impersonate.targets\"\n            label=\"Select a target\"\n            v-model=\"selection\"\n          ></v-select>\n        </v-flex>\n      </v-layout>\n      <v-btn v-if=\"!success\" @click=\"prepImpersonate\" :loading=\"loading\">Submit</v-btn>\n      <v-btn v-if=\"selection\" @click=\"open\" :loading=\"loading\">Impersonate</v-btn>\n      <v-btn @click=\"cancel\">Cancel</v-btn>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script>\nimport { pathOr } from 'ramda'\n\nimport { PREP_IMPERSONATE } from '@/impersonation/impersonate.gql.js'\n\nexport default {\n  props: {\n    showPrepDialog: { type: Boolean, default: false },\n    credentialId: String,\n    memberId: Number,\n    tenantId: Number\n  },\n  data() {\n    return {\n      tempPin: '',\n      success: false,\n      impersonate: {},\n      loading: false,\n      selection: '',\n      parsedTargets: []\n    }\n  },\n  computed: {\n    show: {\n      get() { return this.showPrepDialog },\n      set(v) { this.$emit('closeDialog') }\n    },\n    cId: {\n      get() { return ~~this.credentialId }\n    },\n    mId: {\n      get() { return ~~this.memberId }\n    },\n    tId: {\n      get() { return ~~this.tenantId }\n    }\n  },\n  methods: {\n    async prepImpersonate() {\n      this.loading = true\n      const result = await this.$apollo.mutate({\n        mutation: PREP_IMPERSONATE,\n        variables: {\n          input: {\n            tenantId: this.tId,\n            credentialId: this.cId,\n            memberId: this.mId,\n            temporaryPin: this.tempPin\n          }\n        }\n      })\n      this.impersonate = pathOr(undefined, ['data', 'iamImpersonationPrepare'], result)\n\n      this.impersonate.targets.forEach((target, index) => {\n        const res = /\\/\\/(?<url>[^/]+)/gm.exec(target)\n        const { groups: { url } } = res\n        this.impersonate.targets[index] = {\n          text: url,\n          value: target\n        }\n      })\n\n      this.success = true\n      this.loading = false\n    },\n    cancel() {\n      this.impersonate = {}\n      this.success = false\n      this.selection = ''\n      this.tempPin = ''\n      this.$emit('closeDialog', this.form)\n    },\n    open() {\n      window.open(this.selection, '_blank')\n    }\n  }\n\n}\n</script>\n\n<style>\n.box {\n  padding: 10px;\n}\n.select {\n  width: 100%;\n}\n</style>\n"]}]}