{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/components/TeamCard.vue?vue&type=style&index=0&id=16dd8cbd&scoped=true&lang=css&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/components/TeamCard.vue","mtime":1570835920000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.team-card {\n  margin: 10px;\n  min-width: 350px;\n  max-width: 500px;\n}\n.team-card img {\n  width: 125px;\n  height: 125px;\n  margin: auto;\n}\n.team-card.active {\n  box-shadow: 0px 0px 2px 10px rgba(237, 115, 132, 0.2);\n}\n",{"version":3,"sources":["TeamCard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TeamCard.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-card class=\"team-card\" :class=\"{ active: active }\">\n    <v-container fluid grid-list-lg>\n      <v-layout row>\n        <v-flex xs7>\n          <div v-if=\"!loading\">\n            <router-link\n              :to=\"{ path: '/members/' + user.memberId, params: { id: user.memberId }}\"\n              class=\"headline\"\n            >{{user.name}}</router-link>\n            <div v-if=\"hasEmail\">Email: {{user.contacts[0].emails[0].email}}</div>\n            <div>{{user.displayName}}</div>\n            <div v-if=\"access.hasSales\">\n              <div>Team Size: {{stats.teamSize || 0}}</div>\n              <div>Front Line: {{stats.firstLevelSize || 0}}</div>\n              <div>Total Points: {{stats.totalPoints || 0}}</div>\n              <div>Total Amount: {{stats.totalAmount || 0}}</div>\n            </div>\n          </div>\n          <div v-if=\"loading\">\n            <v-progress-circular indeterminate :size=\"50\" :width=\"5\" color=\"black\"></v-progress-circular>\n          </div>\n        </v-flex>\n        <v-flex xs5>\n          <v-card-media height=\"125px\" width=\"125px\">\n            <img :src=\"getAvatar\" />\n          </v-card-media>\n        </v-flex>\n      </v-layout>\n    </v-container>\n    <v-card-actions v-if=\"actions\">\n      <v-btn v-if=\"!hideButton\" left @click=\"drillDown\">Drill Down</v-btn>\n    </v-card-actions>\n  </v-card>\n</template>\n\n<script>\n// import * as R from 'ramda'\nimport { mapGetters } from 'vuex'\nimport { StoreGetters } from '@/store'\nimport { ClaimActions } from '@/stores/ClaimStore'\nexport default {\n  name: 'TeamCard',\n  data: () => ({\n    show: false,\n    resetLoading: false,\n    registerLoading: false\n  }),\n  props: {\n    active: Boolean,\n    user: Object,\n    actions: Boolean,\n    stats: Object,\n    loading: Boolean,\n    hideButton: Boolean\n  },\n  methods: {\n    drillDown () {\n      this.$emit('drillDown', this.user)\n    },\n    viewMember () {\n      this.$emit('viewMember', this.user.memberId)\n    },\n    async resetPassword () {\n      this.resetLoading = true\n      try {\n        const { memberId, tenantId, email } = this.user\n        await this.$store.dispatch(ClaimActions.RESET, { memberId, tenantId, email })\n        this.$emit('onSuccess', 'Password Reset Email sent successfully')\n      } catch (error) {\n        this.$emit('onError', error)\n      }\n      this.resetLoading = false\n    },\n    async register () {\n      this.registerLoading = true\n      try {\n        const { memberId, tenantId, email } = this.user\n        await this.$store.dispatch(ClaimActions.CLAIM, { memberId, tenantId, email })\n        this.$emit('onSuccess', 'Register Email sent successfully')\n      } catch (error) {\n        this.$emit('onError', error)\n      }\n      this.registerLoading = false\n    }\n  },\n  computed: {\n    ...mapGetters({\n      access: StoreGetters.access\n    }),\n    getAvatar () {\n      return (\n        (this.user && this.user.profileUrl) ||\n        'https://res.cloudinary.com/hexly/image/upload/dev/1001/avatar/undefined.jpg'\n      )\n    },\n    hasEmailChangePermissions () {\n      const superAdmin = this.$store.state.user.principal.permissions.filter(\n        perm => {\n          return perm.key === 'superadmin'\n        }\n      )\n      return this.user.email.trim().length < 1 || superAdmin.length > 0\n    },\n    hasEmail () {\n      return this.user.contacts[0].emails[0].email\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.team-card {\n  margin: 10px;\n  min-width: 350px;\n  max-width: 500px;\n}\n.team-card img {\n  width: 125px;\n  height: 125px;\n  margin: auto;\n}\n.team-card.active {\n  box-shadow: 0px 0px 2px 10px rgba(237, 115, 132, 0.2);\n}\n</style>\n"]}]}