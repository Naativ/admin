{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/sales/Sales.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/sales/Sales.vue","mtime":1570835920000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport DateSelector from '@/components/DateSelector'\nimport SalesDataTable from '@/components/SalesDataTable'\nimport SEARCH_SALES_QUERY from '@/graphql/SearchSales.gql'\nimport { map } from 'ramda'\nimport moment from 'moment'\nimport { debounce } from 'lodash'\n\nexport default {\n  components: {\n    DateSelector,\n    SalesDataTable\n  },\n  data() {\n    return {\n      startDate: moment()\n        .startOf('week').subtract(5, 'weeks')\n        .format('YYYY-MM-DD'),\n      endDate: moment()\n        .endOf('week').subtract(1, 'weeks')\n        .format('YYYY-MM-DD'),\n      loading: false,\n      searchTerm: null,\n      searchInputDebounce: debounce(() => this.searchInput(), 500),\n      sales: []\n    }\n  },\n  methods: {\n    startDateChanged({ date }) {\n      this.startDate = date\n    },\n    endDateChanged({ date }) {\n      this.endDate = date\n    },\n    checkIfOrderNumber(inputString) {\n      const isNumber = /^\\d*$/gm.test(inputString)\n      return isNumber\n    },\n    async searchInput() {\n      this.sales = []\n      let result\n      let input\n      if (this.searchTerm === '') { return false }\n      this.loading = true\n      if (this.checkIfOrderNumber(this.searchTerm)) {\n        input = {\n          tenantId: this.$store.state.user.principal.tenantId,\n          endDate: this.endDate,\n          startDate: this.startDate,\n          sellerId: null,\n          providerOids: [this.searchTerm]\n        }\n      } else {\n        input = {\n          tenantId: this.$store.state.user.principal.tenantId,\n          query: this.searchTerm,\n          endDate: this.endDate,\n          startDate: this.startDate,\n          sellerId: null\n        }\n      }\n      result = await this.searchSalesQuery(input)\n      const { data: { searchSales } } = result\n      this.sales = searchSales\n      this.loading = false\n    },\n    searchSalesQuery(input) {\n      return this.$apollo.query({\n        query: SEARCH_SALES_QUERY,\n        variables: {\n          saleSearchInput: {\n            ...input\n          }\n        }\n      })\n    }\n  },\n  computed: {\n    items() {\n      return map(sale => {\n        return {\n          ...sale,\n          id: sale.saleId,\n          date: moment(sale.awardedDate, 'YYYY-MM-DD').format('MM/DD/YYYY')\n        }\n      }, this.sales)\n    }\n  }\n}\n",{"version":3,"sources":["Sales.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Sales.vue","sourceRoot":"src/views/sales","sourcesContent":["<template>\n  <v-flex xs12>\n    <div class=\"about main-container\">\n      <h1>Sales</h1>\n      <br>\n      <v-card>\n        <v-card-text>\n          <v-subheader>Range</v-subheader>\n          <v-container grid-list-md text-xs-center>\n            <v-layout row wrap>\n              <v-flex xs12 sm6>\n                <DateSelector\n                  :selectedDate=\"startDate\"\n                  :label=\"'Select Start Date'\"\n                  @date-changed=\"startDateChanged\"\n                />\n              </v-flex>\n              <v-flex xs12 sm6>\n                <DateSelector\n                  :selectedDate=\"endDate\"\n                  :label=\"'Select End Date'\"\n                  @date-changed=\"endDateChanged\"\n                />\n              </v-flex>\n            </v-layout>\n          </v-container>\n          <v-subheader>Order Search</v-subheader>\n          <v-container grid-list-md text-xs-center>\n            <v-flex xs12>\n              <v-text-field\n                v-model=\"searchTerm\"\n                @keyup=\"searchInputDebounce\"\n                append-icon=\"search\"\n                type=\"text\"\n                name=\"searchTerm\"\n                label=\"Enter Name or Order ID\"\n              ></v-text-field>\n            </v-flex>\n          </v-container>\n        </v-card-text>\n      </v-card>\n      <SalesDataTable\n        :sales=\"items\"\n        :loading=\"loading\"\n      />\n    </div>\n  </v-flex>\n</template>\n\n<script>\nimport DateSelector from '@/components/DateSelector'\nimport SalesDataTable from '@/components/SalesDataTable'\nimport SEARCH_SALES_QUERY from '@/graphql/SearchSales.gql'\nimport { map } from 'ramda'\nimport moment from 'moment'\nimport { debounce } from 'lodash'\n\nexport default {\n  components: {\n    DateSelector,\n    SalesDataTable\n  },\n  data() {\n    return {\n      startDate: moment()\n        .startOf('week').subtract(5, 'weeks')\n        .format('YYYY-MM-DD'),\n      endDate: moment()\n        .endOf('week').subtract(1, 'weeks')\n        .format('YYYY-MM-DD'),\n      loading: false,\n      searchTerm: null,\n      searchInputDebounce: debounce(() => this.searchInput(), 500),\n      sales: []\n    }\n  },\n  methods: {\n    startDateChanged({ date }) {\n      this.startDate = date\n    },\n    endDateChanged({ date }) {\n      this.endDate = date\n    },\n    checkIfOrderNumber(inputString) {\n      const isNumber = /^\\d*$/gm.test(inputString)\n      return isNumber\n    },\n    async searchInput() {\n      this.sales = []\n      let result\n      let input\n      if (this.searchTerm === '') { return false }\n      this.loading = true\n      if (this.checkIfOrderNumber(this.searchTerm)) {\n        input = {\n          tenantId: this.$store.state.user.principal.tenantId,\n          endDate: this.endDate,\n          startDate: this.startDate,\n          sellerId: null,\n          providerOids: [this.searchTerm]\n        }\n      } else {\n        input = {\n          tenantId: this.$store.state.user.principal.tenantId,\n          query: this.searchTerm,\n          endDate: this.endDate,\n          startDate: this.startDate,\n          sellerId: null\n        }\n      }\n      result = await this.searchSalesQuery(input)\n      const { data: { searchSales } } = result\n      this.sales = searchSales\n      this.loading = false\n    },\n    searchSalesQuery(input) {\n      return this.$apollo.query({\n        query: SEARCH_SALES_QUERY,\n        variables: {\n          saleSearchInput: {\n            ...input\n          }\n        }\n      })\n    }\n  },\n  computed: {\n    items() {\n      return map(sale => {\n        return {\n          ...sale,\n          id: sale.saleId,\n          date: moment(sale.awardedDate, 'YYYY-MM-DD').format('MM/DD/YYYY')\n        }\n      }, this.sales)\n    }\n  }\n}\n</script>\n\n<style scoped>\n.sale-details ul li {\n  list-style: none;\n}\n</style>\n"]}]}