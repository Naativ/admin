{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/components/UserAutocomplete.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/components/UserAutocomplete.vue","mtime":1570835920000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { pathOr } from 'ramda'\nimport { searchUsers } from '@/users/users.gql'\n\nexport default {\n  name: 'UserAutocomplete',\n  props: {\n    disabled: { type: Boolean, default: false },\n    label: { type: String, default: 'Select Time' }\n  },\n  data () {\n    return {\n      loading: false,\n      results: [],\n      term: null,\n      userSelected: {}\n    }\n  },\n  methods: {\n    getItemDisplay (item) {\n      const { displayName, contacts, id } = item\n      if (contacts === undefined) return\n      return `${displayName} (${id}) - ${contacts[0].emails[0].email}`\n    },\n    async getResults() {\n      if (!this.term || this.term.length < 3) return []\n      this.loading = true\n      const res = await this.$apollo.query({\n        query: searchUsers,\n        variables: {\n          memberCon: { ids: null, query: this.term, tags: [], first: 10, after: 0 }\n        },\n        fetchPolicy: 'network-only'\n      })\n      this.results.length = 0\n      pathOr([], ['data', 'members', 'nodes'], res).forEach(r => this.results.push(r))\n      this.loading = false\n    }\n  },\n  watch: {\n    term () { this.getResults() },\n    userSelected (val) {\n      this.$emit('selected', this.userSelected)\n    }\n  }\n}\n",{"version":3,"sources":["UserAutocomplete.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAoBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"UserAutocomplete.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <v-autocomplete\n      :label=\"label\"\n      :loading=\"loading\"\n      :item-text=\"getItemDisplay\"\n      :item-value=\"getItemDisplay\"\n      :items=\"results\"\n      :rules=\"[ v => !!v || 'Field is required' ]\"\n      :search-input.sync=\"term\"\n      hide-no-data\n      hint=\"Find A User\"\n      no-filter\n      return-object\n      v-model=\"userSelected\"\n    />\n  </div>\n</template>\n\n<script>\nimport { pathOr } from 'ramda'\nimport { searchUsers } from '@/users/users.gql'\n\nexport default {\n  name: 'UserAutocomplete',\n  props: {\n    disabled: { type: Boolean, default: false },\n    label: { type: String, default: 'Select Time' }\n  },\n  data () {\n    return {\n      loading: false,\n      results: [],\n      term: null,\n      userSelected: {}\n    }\n  },\n  methods: {\n    getItemDisplay (item) {\n      const { displayName, contacts, id } = item\n      if (contacts === undefined) return\n      return `${displayName} (${id}) - ${contacts[0].emails[0].email}`\n    },\n    async getResults() {\n      if (!this.term || this.term.length < 3) return []\n      this.loading = true\n      const res = await this.$apollo.query({\n        query: searchUsers,\n        variables: {\n          memberCon: { ids: null, query: this.term, tags: [], first: 10, after: 0 }\n        },\n        fetchPolicy: 'network-only'\n      })\n      this.results.length = 0\n      pathOr([], ['data', 'members', 'nodes'], res).forEach(r => this.results.push(r))\n      this.loading = false\n    }\n  },\n  watch: {\n    term () { this.getResults() },\n    userSelected (val) {\n      this.$emit('selected', this.userSelected)\n    }\n  }\n}\n</script>\n\n<style scoped>\n</style>\n"]}]}