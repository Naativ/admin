{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/members/ContactCardName.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/members/ContactCardName.vue","mtime":1577329618150},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { cloneDeep, get } from 'lodash'\n\nimport { ContactCardNameGQL, ContactsUpsert } from '../../users/members.gql'\nimport EditButton from './EditButton'\n\nexport default {\n  name: 'ContactCardName',\n  components: {\n    EditButton\n  },\n  data () {\n    return {\n      model: null,\n      disabled: true,\n      memberId: ~~this.$route.params.id\n    }\n  },\n  methods: {\n    editClicked () {\n      this.disabled = false\n    },\n    async saveClicked() {\n      this.disabled = true\n\n      const { memberId } = this\n      const {\n        id,\n        firstName,\n        lastName,\n        displayName\n      } = this.model\n      const input = {\n        id,\n        memberId,\n        firstName,\n        lastName,\n        displayName\n      }\n\n      try {\n        await this.$apollo.mutate({\n          mutation: ContactsUpsert,\n          variables: {\n            input\n          }\n        })\n        this.$emit('snackbarEmit', 'Contact name saved!')\n        this.$apollo.queries.contact.refetch()\n      } catch (error) {\n        this.$emit('snackbarEmit', error.message)\n        throw new Error('Error updating contact name')\n      }\n    },\n    async cancelClicked () {\n      this.disabled = true\n      this.$apollo.queries.contact.refetch()\n      this.initMember(this.contact)\n    },\n    initMember(contact) {\n      this.model = cloneDeep(contact)\n    }\n  },\n  watch: {\n    contact (next) {\n      this.initMember(next)\n    },\n    '$route'(newRoute) {\n      const { params: { id } } = newRoute\n      this.memberId = ~~id\n    }\n  },\n  apollo: {\n    contact: {\n      ...ContactCardNameGQL,\n      variables() {\n        return {\n          memberId: this.memberId\n        }\n      },\n      update(data) {\n        let member = { ...get(data, 'members.nodes.0') }\n        const { contacts } = member\n\n        if (contacts && Array.isArray(contacts) && contacts.length < 2) {\n          return contacts[0]\n        }\n        return contacts\n      }\n    }\n  }\n}\n",{"version":3,"sources":["ContactCardName.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ContactCardName.vue","sourceRoot":"src/views/members","sourcesContent":["<template>\n  <span v-if =\"model\">\n    <v-list-tile-sub-title>\n      <h4 class=\"contact-section-heading\">Name</h4>\n      <EditButton\n        :disabled      =\"disabled\"\n        @editClicked   =\"editClicked\"\n        @saveClicked   =\"saveClicked\"\n        @cancelClicked =\"cancelClicked\"\n      />\n    </v-list-tile-sub-title>\n    <v-text-field\n      label        =\"Display Name\"\n      :disabled    =\"disabled\"\n      v-model      =\"model.displayName\"\n    />\n    <v-text-field\n      label        =\"First Name\"\n      :disabled    =\"disabled\"\n      v-model      =\"model.firstName\"\n    />\n    <v-text-field\n      label        =\"Last Name\"\n      :disabled    =\"disabled\"\n      v-model      =\"model.lastName\"\n    />\n  </span>\n</template>\n\n<script>\nimport { cloneDeep, get } from 'lodash'\n\nimport { ContactCardNameGQL, ContactsUpsert } from '../../users/members.gql'\nimport EditButton from './EditButton'\n\nexport default {\n  name: 'ContactCardName',\n  components: {\n    EditButton\n  },\n  data () {\n    return {\n      model: null,\n      disabled: true,\n      memberId: ~~this.$route.params.id\n    }\n  },\n  methods: {\n    editClicked () {\n      this.disabled = false\n    },\n    async saveClicked() {\n      this.disabled = true\n\n      const { memberId } = this\n      const {\n        id,\n        firstName,\n        lastName,\n        displayName\n      } = this.model\n      const input = {\n        id,\n        memberId,\n        firstName,\n        lastName,\n        displayName\n      }\n\n      try {\n        await this.$apollo.mutate({\n          mutation: ContactsUpsert,\n          variables: {\n            input\n          }\n        })\n        this.$emit('snackbarEmit', 'Contact name saved!')\n        this.$apollo.queries.contact.refetch()\n      } catch (error) {\n        this.$emit('snackbarEmit', error.message)\n        throw new Error('Error updating contact name')\n      }\n    },\n    async cancelClicked () {\n      this.disabled = true\n      this.$apollo.queries.contact.refetch()\n      this.initMember(this.contact)\n    },\n    initMember(contact) {\n      this.model = cloneDeep(contact)\n    }\n  },\n  watch: {\n    contact (next) {\n      this.initMember(next)\n    },\n    '$route'(newRoute) {\n      const { params: { id } } = newRoute\n      this.memberId = ~~id\n    }\n  },\n  apollo: {\n    contact: {\n      ...ContactCardNameGQL,\n      variables() {\n        return {\n          memberId: this.memberId\n        }\n      },\n      update(data) {\n        let member = { ...get(data, 'members.nodes.0') }\n        const { contacts } = member\n\n        if (contacts && Array.isArray(contacts) && contacts.length < 2) {\n          return contacts[0]\n        }\n        return contacts\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.findme {\n  border: 2px solid red;\n}\n.details {\n  text-align: left;\n}\n.addresses {\n  display: flex;\n  flex-direction: column;\n  height: 39vh;\n  flex-wrap: wrap;\n  min-width: 45vw;\n  padding-top: 11px;\n  padding-top: 48px;\n  position: relative;\n}\n#contact-list {\n  width: 100%;\n}\n.address-title {\n  position: absolute;\n  top: 9px;\n}\n.contact-section-heading {\n  display: inline;\n}\n</style>\n"]}]}