{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/associations/AssociationFrame.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/associations/AssociationFrame.vue","mtime":1574205365000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters, mapMutations } from 'vuex';\nimport { StoreGetters } from '@/store';\nimport Workbench from '@/views/generic/layout/WorkbenchFrame';\nimport { getAssociation } from '@/users/users.gql';\nimport { UsersMutations } from '@/users/UsersStore';\nexport default {\n  components: {\n    Workbench: Workbench\n  },\n  methods: _objectSpread({}, mapMutations({\n    usersSetOne: UsersMutations.SET_ONE\n  }), {\n    dashboard: function dashboard() {\n      this.$router.push('/associations');\n    },\n    view: function () {\n      var _view = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(member) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.$router.push(\"/associations/member/\".concat(member.id));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function view(_x) {\n        return _view.apply(this, arguments);\n      }\n\n      return view;\n    }(),\n    getAssociations: function () {\n      var _getAssociations = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var _ref, data;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.loading = true;\n                _context2.prev = 1;\n                _context2.next = 4;\n                return this.$apollo.query({\n                  query: getAssociation,\n                  variables: {\n                    input: {\n                      ids: [this.$route.id]\n                    }\n                  },\n                  fetchPolicy: 'network-only'\n                });\n\n              case 4:\n                _ref = _context2.sent;\n                data = _ref.data;\n                _context2.next = 8;\n                return this.usersSetOne({\n                  property: 'associations',\n                  value: data.getAssociation\n                });\n\n              case 8:\n                _context2.prev = 8;\n                this.loading = false;\n                return _context2.finish(8);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1,, 8, 11]]);\n      }));\n\n      function getAssociations() {\n        return _getAssociations.apply(this, arguments);\n      }\n\n      return getAssociations;\n    }()\n  }),\n  computed: _objectSpread({}, mapGetters({\n    access: StoreGetters.access\n  })),\n  mounted: function mounted() {// this.getAssociations()\n  }\n};",{"version":3,"sources":["AssociationFrame.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAqBA,SAAA,UAAA,EAAA,YAAA,QAAA,MAAA;AACA,SAAA,YAAA,QAAA,SAAA;AACA,OAAA,SAAA,MAAA,uCAAA;AACA,SAAA,cAAA,QAAA,mBAAA;AACA,SAAA,cAAA,QAAA,oBAAA;AAEA,eAAA;AACA,cAAA;AACA;AADA,GADA;AAIA,6BACA,aAAA;AAAA,iBAAA,eAAA;AAAA,GAAA,CADA;AAEA,aAFA,uBAEA;AACA,WAAA,OAAA,CAAA,IAAA,CAAA,eAAA;AACA,KAJA;AAKA,QALA;AAAA;AAAA;AAAA,+CAKA,MALA;AAAA;AAAA;AAAA;AAAA;AAMA,qBAAA,OAAA,CAAA,IAAA,gCAAA,OAAA,EAAA;;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAQA,mBARA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASA,qBAAA,OAAA,GAAA,IAAA;AATA;AAAA;AAAA,uBAWA,KAAA,OAAA,CAAA,KAAA,CAAA;AACA,yBAAA,cADA;AAEA,6BAAA;AACA,2BAAA;AACA,2BAAA,CAAA,KAAA,MAAA,CAAA,EAAA;AADA;AADA,mBAFA;AAOA,+BAAA;AAPA,iBAAA,CAXA;;AAAA;AAAA;AAWA,oBAXA,QAWA,IAXA;AAAA;AAAA,uBAoBA,KAAA,WAAA,CAAA;AAAA,4BAAA,cAAA;AAAA,yBAAA,KAAA;AAAA,iBAAA,CApBA;;AAAA;AAAA;AAsBA,qBAAA,OAAA,GAAA,KAAA;AAtBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,IAJA;AA8BA,8BACA,WAAA;AACA,YAAA,aAAA;AADA,GAAA,CADA,CA9BA;AAmCA,SAnCA,qBAmCA,CACA;AACA;AArCA,CAAA","sourcesContent":["<template>\n  <v-layout fill-height row class=\"payouts\">\n    <v-flex>\n      <Workbench @dashboard=\"dashboard\" @view=\"view\">\n        <template slot=\"top\">\n          <v-tabs v-if=\"!!$route.params.id\" centered icons-and-text>\n            <v-tabs-slider color=\"pink\"></v-tabs-slider>\n            <v-tab key=\"1\">\n              Associations\n              <v-icon>recent_actors</v-icon>\n            </v-tab>\n          </v-tabs>\n        </template>\n\n        <router-view />\n      </Workbench>\n    </v-flex>\n  </v-layout>\n</template>\n\n<script>\nimport { mapGetters, mapMutations } from 'vuex'\nimport { StoreGetters } from '@/store'\nimport Workbench from '@/views/generic/layout/WorkbenchFrame'\nimport { getAssociation } from '@/users/users.gql'\nimport { UsersMutations } from '@/users/UsersStore'\n\nexport default {\n  components: {\n    Workbench\n  },\n  methods: {\n    ...mapMutations({ usersSetOne: UsersMutations.SET_ONE }),\n    dashboard () {\n      this.$router.push('/associations')\n    },\n    async view (member) {\n      this.$router.push(`/associations/member/${member.id}`)\n    },\n    async getAssociations () {\n      this.loading = true\n      try {\n        const { data } = await this.$apollo.query({\n          query: getAssociation,\n          variables: {\n            input: {\n              ids: [this.$route.id]\n            }\n          },\n          fetchPolicy: 'network-only'\n        })\n        await this.usersSetOne({ property: 'associations', value: data.getAssociation })\n      } finally {\n        this.loading = false\n      }\n    }\n  },\n  computed: {\n    ...mapGetters({\n      access: StoreGetters.access\n    })\n  },\n  mounted() {\n    // this.getAssociations()\n  }\n}\n</script>\n\n<style>\n.results {\n  margin-top: 5px;\n  border-color: black;\n  border-style: solid;\n  position: absolute;\n  z-index: 5;\n  width: 600px !important;\n}\n\n.search {\n  width: 350px;\n}\n\n.text {\n  padding-right: 10px;\n}\n"],"sourceRoot":"src/views/associations"}]}