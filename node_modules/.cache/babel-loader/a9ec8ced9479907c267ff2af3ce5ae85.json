{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/Actions.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/Actions.vue","mtime":1574205365000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport SEARCH_QUERY from '@/graphql/Search.gql';\nimport MERGE_MUTATION from '@/graphql/MergeAccount.gql';\nimport { UsersMutations } from '@/users/UsersStore';\nimport { pathOr } from 'ramda';\nimport UserTreePatchDialog from '@/views/users/actions/UserTreePatch.vue';\nimport { StoreGetters } from '@/store';\nimport { mapGetters } from 'vuex';\nvar mappedGetters = mapGetters({\n  access: StoreGetters.access\n});\nvar mergeAccountDefaultVals = {\n  rules: [function (v) {\n    return !!v || 'Field is required';\n  }],\n  secondName: '',\n  showDialog: false,\n  showConfirmationDialog: false,\n  searchItems1: [],\n  searchItems2: []\n};\nexport default {\n  name: 'Actions',\n  watch: {\n    searchTerm1: function () {\n      var _searchTerm = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(val) {\n        var res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!val) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.mergeSearch(val);\n\n              case 3:\n                res = _context.sent;\n                this.mergeAccount.searchItems1 = pathOr([], ['data', 'searchHierarchy', 'hierarchies'], res);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function searchTerm1(_x) {\n        return _searchTerm.apply(this, arguments);\n      }\n\n      return searchTerm1;\n    }(),\n    searchTerm2: function () {\n      var _searchTerm2 = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(val) {\n        var res;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!val) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                _context2.next = 3;\n                return this.mergeSearch(val);\n\n              case 3:\n                res = _context2.sent;\n                this.mergeAccount.searchItems2 = pathOr([], ['data', 'searchHierarchy', 'hierarchies'], res);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function searchTerm2(_x2) {\n        return _searchTerm2.apply(this, arguments);\n      }\n\n      return searchTerm2;\n    }()\n  },\n  components: {\n    UserTreePatchDialog: UserTreePatchDialog\n  },\n  props: {\n    user: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    return {\n      createMember: {\n        lastName: '',\n        email: ''\n      },\n      patching: false,\n      creatingMember: false,\n      loading: false,\n      mergeAccount: _objectSpread({}, mergeAccountDefaultVals),\n      searchTerm1: null,\n      searchTerm2: null,\n      snackbar: false,\n      snackbarMessage: ''\n    };\n  },\n  methods: {\n    secondNameReset: function secondNameReset() {\n      this.mergeAccount.secondName = '';\n      this.mergeAccount.searchItems2 = [];\n    },\n    mergeInit: function mergeInit() {\n      for (var element in this.mergeAccount) {\n        this.mergeAccount[element] = mergeAccountDefaultVals[element];\n      }\n    },\n    mergeBtnClick: function mergeBtnClick() {\n      this.$refs.mergeForm.resetValidation();\n      this.mergeInit();\n      this.secondNameReset();\n      this.mergeAccount.showDialog = true;\n    },\n    merge: function () {\n      var _merge = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var firstId, secondId, viewing;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                firstId = this.user.id;\n                secondId = this.mergeAccount.secondName.id;\n                viewing = this.$store.state.users.viewing;\n                viewing.forEach(function (user, index) {\n                  if (user.id === secondId) {\n                    viewing.splice(index, 1);\n                  }\n                });\n                _context3.prev = 4;\n                this.loading = true;\n                _context3.next = 8;\n                return this.$store.commit(UsersMutations.SET_ONE, {\n                  property: 'viewing',\n                  value: viewing\n                });\n\n              case 8:\n                _context3.next = 10;\n                return this.$apollo.mutate({\n                  mutation: MERGE_MUTATION,\n                  variables: {\n                    input: {\n                      accountToKeep: firstId,\n                      accountToDelete: secondId\n                    }\n                  }\n                });\n\n              case 10:\n                this.loading = false;\n                this.mergeAccount.showDialog = this.mergeAccount.showConfirmationDialog = false;\n                this.snackbar = true;\n                this.snackbarMessage = 'Accounts Successfully Merged!';\n                _context3.next = 22;\n                break;\n\n              case 16:\n                _context3.prev = 16;\n                _context3.t0 = _context3[\"catch\"](4);\n                console.error(_context3.t0);\n                this.loading = false;\n                this.mergeAccount.showDialog = this.mergeAccount.showConfirmationDialog = false;\n                this.onError('Account merge unsuccessful. Please try again later or contact customer support.');\n\n              case 22:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[4, 16]]);\n      }));\n\n      function merge() {\n        return _merge.apply(this, arguments);\n      }\n\n      return merge;\n    }(),\n    mergeConfirmation: function mergeConfirmation() {\n      var formIsValid = this.$refs.mergeForm.validate();\n\n      if (formIsValid) {\n        this.$router.push('/members/' + this.user.id + '/actions');\n        this.mergeAccount.showDialog = false;\n        this.mergeAccount.showConfirmationDialog = true;\n      }\n    },\n    mergeConfirmationCancel: function mergeConfirmationCancel() {\n      this.mergeAccount.showDialog = true;\n      this.mergeAccount.showConfirmationDialog = false;\n    },\n    mergeCancel: function mergeCancel() {\n      this.mergeAccount.showDialog = this.mergeAccount.showConfirmationDialog = false;\n    },\n    mergeSearch: function () {\n      var _mergeSearch = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(searchTerm) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!searchTerm) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                _context4.prev = 1;\n                _context4.next = 4;\n                return this.$apollo.query({\n                  query: SEARCH_QUERY,\n                  variables: {\n                    searchInput: {\n                      search: searchTerm\n                    }\n                  }\n                });\n\n              case 4:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](1);\n                console.error({\n                  error: _context4.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 7]]);\n      }));\n\n      function mergeSearch(_x3) {\n        return _mergeSearch.apply(this, arguments);\n      }\n\n      return mergeSearch;\n    }(),\n    onSuccess: function onSuccess(message) {\n      this.snackbar = true;\n      this.snackbarMessage = message;\n    },\n    onError: function onError(errorMessage) {\n      if (typeof errorMessage === 'string') {\n        this.error = this.snackbarMessage = errorMessage;\n      } else {\n        var errors = pathOr({}, ['response', 'data', 'errors'], errorMessage);\n        this.snackbarMessage = pathOr('There seems to be a problem. Please try again later or contact customer support.', ['message'], errors[0]);\n      }\n\n      this.snackbar = true;\n    }\n  },\n  computed: _objectSpread({}, mappedGetters, {\n    security: function security() {\n      return this.access || {};\n    }\n  })\n};",{"version":3,"sources":["Actions.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <v-layout justify-center align-center row class=\"main-container\">\n      <v-flex>\n        <v-card>\n          <v-card-title>\n            <h1>Actions</h1>\n          </v-card-title>\n          <v-card-actions>\n            <v-layout justify-center>\n              <v-btn color=\"primary\" style=\"align-self: center;\" @click=\"mergeBtnClick\" v-if=\"security.hasMerge\">\n                <v-icon>call_merge</v-icon>Merge Accounts\n              </v-btn>\n              <v-btn color=\"primary\" style=\"align-self: center;\" @click=\"patching = true\" v-if=\"security.hasSponsorChange\">\n                <v-icon>compare_arrows</v-icon>Patch Member Out\n              </v-btn>\n            </v-layout>\n          </v-card-actions>\n        </v-card>\n      </v-flex>\n    <v-snackbar :timeout=\"8000\" :top=\"true\" :right=\"true\" v-model=\"snackbar\">\n      {{snackbarMessage}}\n      <v-btn flat color=\"pink\" @click.native=\"snackbar = false\">Close</v-btn>\n    </v-snackbar>\n    <UserTreePatchDialog :show=\"patching\" :user=\"user\" @cancel=\"patching = false\"/>\n    <v-dialog v-if=\"user\" v-model=\"mergeAccount.showDialog\" :hide-overlay=\"true\" width=\"56%\">\n      <v-card>\n        <v-card-title>\n          <h1>Merge Accounts</h1>\n        </v-card-title>\n        <v-card-text>\n          <v-form ref=\"mergeForm\">\n            <v-layout row fill-height justify-space-around>\n              <v-flex xs-12 sm-6 style=\"flex: 1 1; padding: 0px 4px;\">\n                <v-text-field label=\"Destination account to keep\" :value=\"user.id\" readonly/>\n                <v-icon>person</v-icon>\n                {{user.name}}\n                <br>\n                <v-icon>email</v-icon>\n                {{user.contactEmail}}\n              </v-flex>\n              <v-flex xs-12 sm-6 style=\"flex: 1 1; padding: 0px 4px;\">\n                <v-autocomplete\n                  v-model=\"mergeAccount.secondName\"\n                  :items=\"mergeAccount.searchItems2\"\n                  :search-input.sync=\"searchTerm2\"\n                  item-text=\"name\"\n                  item-value=\"id\"\n                  hide-no-data\n                  return-object\n                  :rules=\"mergeAccount.rules\"\n                  label=\"Target Account to remove & merge details into Destination\"\n                >\n                  <template slot=\"selection\" slot-scope=\"data\">\n                    <v-icon>person</v-icon>\n                    <v-list-tile-content v-text=\"data.item.id\"></v-list-tile-content>\n                    <v-icon @click=\"secondNameReset()\">close</v-icon>\n                  </template>\n                  <template slot=\"item\" slot-scope=\"data\">\n                    <v-flex xs4>\n                      <v-icon left>person</v-icon>\n                      {{data.item.displayName}}\n                    </v-flex>\n                    <v-flex xs4>{{data.item.contactEmail}}</v-flex>\n                    <v-flex xs4>{{data.item.id}}</v-flex>\n                  </template>\n                </v-autocomplete>\n                <div v-if=\"mergeAccount.secondName\">\n                  <v-icon>person</v-icon>\n                  {{mergeAccount.secondName.name}}\n                  <br>\n                  <v-icon>email</v-icon>\n                  {{mergeAccount.secondName.contactEmail}}\n                </div>\n              </v-flex>\n            </v-layout>\n          </v-form>\n        </v-card-text>\n        <v-card-actions>\n          <v-layout row justify-center>\n            <v-btn color=\"dark pink\" class=\"white--text\" @click=\"mergeConfirmation\">Merge</v-btn>\n            <v-btn @click=\"mergeCancel\">Cancel</v-btn>\n          </v-layout>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n    <v-dialog\n      v-if=\"user\"\n      v-model=\"mergeAccount.showConfirmationDialog\"\n      width=\"50%\"\n      :hide-overlay=\"true\"\n    >\n      <v-card>\n        <v-flex justify-space-around align-center>\n          <v-card-title>\n            <h1 style=\"margin: auto;\">Are you sure?</h1>\n          </v-card-title>\n          <v-card-text>This process is irreversible!</v-card-text>\n          <v-layout fill-height row justify-space-around>\n            <v-card color=\"grey lighten-4\" style=\"width: 30%;\">\n              <v-icon large left>person</v-icon>\n              <v-card-text>{{user.displayName}}</v-card-text>\n              <v-card-text>{{user.contactEmail}}</v-card-text>\n              <v-card-text>{{user.id}}</v-card-text>\n            </v-card>\n            <v-icon x-large>arrow_back</v-icon>\n            <v-card color=\"dark pink\" class=\"white--text\" style=\"width: 30%;\">\n              <v-icon class=\"white--text\" large left>person</v-icon>\n              <v-card-text>{{mergeAccount.secondName.displayName}}</v-card-text>\n              <v-card-text>{{mergeAccount.secondName.contactEmail}}</v-card-text>\n              <v-card-text>{{mergeAccount.secondName.id}}</v-card-text>\n            </v-card>\n          </v-layout>\n          <v-card-actions>\n            <v-layout row justify-center>\n              <v-btn color=\"dark pink\" class=\"white--text\" @click=\"merge\" :loading=\"loading\">Merge</v-btn>\n              <v-btn :disabled=\"loading\" @click=\"mergeConfirmationCancel\">Back</v-btn>\n            </v-layout>\n          </v-card-actions>\n        </v-flex>\n      </v-card>\n    </v-dialog>\n  </v-layout>\n</template>\n\n<script>\nimport SEARCH_QUERY from '@/graphql/Search.gql'\nimport MERGE_MUTATION from '@/graphql/MergeAccount.gql'\nimport { UsersMutations } from '@/users/UsersStore'\nimport { pathOr } from 'ramda'\nimport UserTreePatchDialog from '@/views/users/actions/UserTreePatch.vue'\n\nimport { StoreGetters } from '@/store'\nimport { mapGetters } from 'vuex'\nconst mappedGetters = mapGetters({\n  access: StoreGetters.access\n})\n\nconst mergeAccountDefaultVals = {\n  rules: [\n    v => !!v || 'Field is required'\n  ],\n  secondName: '',\n  showDialog: false,\n  showConfirmationDialog: false,\n  searchItems1: [],\n  searchItems2: []\n}\n\nexport default {\n  name: 'Actions',\n  watch: {\n    searchTerm1: async function (val) {\n      if (val) {\n        const res = await this.mergeSearch(val)\n        this.mergeAccount.searchItems1 = pathOr([], ['data', 'searchHierarchy', 'hierarchies'], res)\n      }\n    },\n    searchTerm2: async function (val) {\n      if (val) {\n        const res = await this.mergeSearch(val)\n        this.mergeAccount.searchItems2 = pathOr([], ['data', 'searchHierarchy', 'hierarchies'], res)\n      }\n    }\n  },\n  components: {\n    UserTreePatchDialog\n  },\n  props: {\n    user: {\n      type: Object,\n      default () { return {} }\n    }\n  },\n  data: () => ({\n    createMember: {\n      lastName: '',\n      email: ''\n    },\n    patching: false,\n    creatingMember: false,\n    loading: false,\n    mergeAccount: { ...mergeAccountDefaultVals },\n    searchTerm1: null,\n    searchTerm2: null,\n    snackbar: false,\n    snackbarMessage: ''\n  }),\n  methods: {\n    secondNameReset: function () {\n      this.mergeAccount.secondName = ''\n      this.mergeAccount.searchItems2 = []\n    },\n    mergeInit: function () {\n      for (let element in this.mergeAccount) {\n        this.mergeAccount[element] = mergeAccountDefaultVals[element]\n      }\n    },\n    mergeBtnClick () {\n      this.$refs.mergeForm.resetValidation()\n      this.mergeInit()\n      this.secondNameReset()\n      this.mergeAccount.showDialog = true\n    },\n    async merge () {\n      const firstId = this.user.id\n      const secondId = this.mergeAccount.secondName.id\n      let viewing = this.$store.state.users.viewing\n      viewing.forEach((user, index) => {\n        if (user.id === secondId) {\n          viewing.splice(index, 1)\n        }\n      })\n      try {\n        this.loading = true\n        await this.$store.commit(\n          UsersMutations.SET_ONE,\n          { property: 'viewing', value: viewing })\n        await this.$apollo.mutate({\n          mutation: MERGE_MUTATION,\n          variables: {\n            input: {\n              accountToKeep: firstId,\n              accountToDelete: secondId\n            }\n          }\n        })\n        this.loading = false\n        this.mergeAccount.showDialog = this.mergeAccount.showConfirmationDialog = false\n        this.snackbar = true\n        this.snackbarMessage = 'Accounts Successfully Merged!'\n      } catch (error) {\n        console.error(error)\n        this.loading = false\n        this.mergeAccount.showDialog = this.mergeAccount.showConfirmationDialog = false\n        this.onError('Account merge unsuccessful. Please try again later or contact customer support.')\n      }\n    },\n    mergeConfirmation () {\n      const formIsValid = this.$refs.mergeForm.validate()\n      if (formIsValid) {\n        this.$router.push('/members/' + this.user.id + '/actions')\n        this.mergeAccount.showDialog = false\n        this.mergeAccount.showConfirmationDialog = true\n      }\n    },\n    mergeConfirmationCancel () {\n      this.mergeAccount.showDialog = true\n      this.mergeAccount.showConfirmationDialog = false\n    },\n    mergeCancel () {\n      this.mergeAccount.showDialog = this.mergeAccount.showConfirmationDialog = false\n    },\n    async mergeSearch (searchTerm) {\n      if (searchTerm) {\n        try {\n          return await this.$apollo.query({\n            query: SEARCH_QUERY,\n            variables: {\n              searchInput: {\n                search: searchTerm\n              }\n            }\n          })\n        } catch (error) {\n          console.error({ error })\n        }\n      }\n    },\n    onSuccess (message) {\n      this.snackbar = true\n      this.snackbarMessage = message\n    },\n    onError (errorMessage) {\n      if (typeof errorMessage === 'string') {\n        this.error = this.snackbarMessage = errorMessage\n      } else {\n        const errors = pathOr({}, ['response', 'data', 'errors'], errorMessage)\n        this.snackbarMessage = pathOr(\n          'There seems to be a problem. Please try again later or contact customer support.',\n          ['message'],\n          errors[0]\n        )\n      }\n      this.snackbar = true\n    }\n  },\n  computed: {\n    ...mappedGetters,\n    security () {\n      return this.access || {}\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src/views"}]}