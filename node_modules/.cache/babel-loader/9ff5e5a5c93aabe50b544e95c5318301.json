{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/eslint-loader/index.js??ref--13-0!/Users/narfdre/Code/hexly/admin/src/tenants/TenantsStore.js","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/tenants/TenantsStore.js","mtime":1573196227000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\n\nvar _mutations, _actions;\n\nimport * as R from 'ramda';\nimport * as Tenants from '@/tenants/TenantsService';\nimport * as Mutations from '@/store.mutations';\nexport var TenantsActions = {\n  FETCH_MEMBER_TAGS: 'tenantFetchMemberTags',\n  FETCH_TENANT_INFO: 'tenantFetchInfo'\n};\nexport var TenantsMutations = {\n  SET_ONE: 'tenantSetOne',\n  SET_ALL: 'tenantSetAll'\n};\nexport var TenantsStore = {\n  state: {\n    info: {\n      id: null,\n      baseUrl: null,\n      name: null,\n      slug: null,\n      integrations: []\n    },\n    tags: {\n      loading: false,\n      values: []\n    }\n  },\n  mutations: (_mutations = {}, _defineProperty(_mutations, TenantsMutations.SET_ONE, function (state, _ref) {\n    var property = _ref.property,\n        value = _ref.value;\n    return state[property] = value;\n  }), _defineProperty(_mutations, TenantsMutations.SET_ALL, function (state, _ref2) {\n    var property = _ref2.property,\n        value = _ref2.value;\n    console.log(value);\n    state[property] = _objectSpread({}, value);\n    console.log(state);\n  }), _defineProperty(_mutations, Mutations.INIT, function (state) {\n    state.tags.loading = false;\n    return state;\n  }), _mutations),\n  actions: (_actions = {}, _defineProperty(_actions, TenantsActions.FETCH_MEMBER_TAGS, function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(_ref3, filter) {\n      var commit, state, result;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref3.commit, state = _ref3.state;\n              commit(TenantsMutations.SET_ONE, {\n                property: 'tags',\n                value: {\n                  loading: true,\n                  values: R.pathOr([], ['tags', 'values'], state)\n                }\n              });\n              _context.next = 4;\n              return Tenants.getMemberTags();\n\n            case 4:\n              result = _context.sent;\n              commit(TenantsMutations.SET_ONE, {\n                property: 'tags',\n                value: {\n                  loading: false,\n                  values: result\n                }\n              });\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }()), _defineProperty(_actions, TenantsActions.FETCH_TENANT_INFO, function () {\n    var _ref6 = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee2(_ref5, filter) {\n      var commit, state, _ref7, tenant;\n\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref5.commit, state = _ref5.state;\n              _context2.next = 3;\n              return Tenants.getTenantInfo();\n\n            case 3:\n              _ref7 = _context2.sent;\n              tenant = _ref7.data.tenant;\n              commit(TenantsMutations.SET_ALL, {\n                property: 'info',\n                value: tenant\n              });\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x3, _x4) {\n      return _ref6.apply(this, arguments);\n    };\n  }()), _actions)\n};",{"version":3,"sources":["/Users/narfdre/Code/hexly/admin/src/tenants/TenantsStore.js"],"names":["R","Tenants","Mutations","TenantsActions","FETCH_MEMBER_TAGS","FETCH_TENANT_INFO","TenantsMutations","SET_ONE","SET_ALL","TenantsStore","state","info","id","baseUrl","name","slug","integrations","tags","loading","values","mutations","property","value","console","log","INIT","actions","filter","commit","pathOr","getMemberTags","result","getTenantInfo","tenant","data"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,CAAZ,MAAmB,OAAnB;AACA,OAAO,KAAKC,OAAZ,MAAyB,0BAAzB;AACA,OAAO,KAAKC,SAAZ,MAA2B,mBAA3B;AAEA,OAAO,IAAMC,iBAAiB;AAC5BC,qBAAmB,uBADS;AAE5BC,qBAAmB;AAFS,CAAvB;AAKP,OAAO,IAAMC,mBAAmB;AAC9BC,WAAS,cADqB;AAE9BC,WAAS;AAFqB,CAAzB;AAKP,OAAO,IAAMC,eAAe;AAC1BC,SAAO;AACLC,UAAM;AACJC,UAAI,IADA;AAEJC,eAAS,IAFL;AAGJC,YAAM,IAHF;AAIJC,YAAM,IAJF;AAKJC,oBAAc;AALV,KADD;AAQLC,UAAM;AACJC,eAAS,KADL;AAEJC,cAAQ;AAFJ;AARD,GADmB;AAc1BC,2DACGd,iBAAiBC,OADpB,EAC8B,UAACG,KAAD;AAAA,QAAUW,QAAV,QAAUA,QAAV;AAAA,QAAoBC,KAApB,QAAoBA,KAApB;AAAA,WACzBZ,MAAMW,QAAN,IAAkBC,KADO;AAAA,GAD9B,+BAGGhB,iBAAiBE,OAHpB,EAG8B,UAACE,KAAD,SAAgC;AAAA,QAAtBW,QAAsB,SAAtBA,QAAsB;AAAA,QAAZC,KAAY,SAAZA,KAAY;AAC1DC,YAAQC,GAAR,CAAYF,KAAZ;AACAZ,UAAMW,QAAN,sBAAuBC,KAAvB;AACAC,YAAQC,GAAR,CAAYd,KAAZ;AACD,GAPH,+BAQGR,UAAUuB,IARb,EAQoB,iBAAS;AACzBf,UAAMO,IAAN,CAAWC,OAAX,GAAqB,KAArB;AACA,WAAOR,KAAP;AACD,GAXH,cAd0B;AA2B1BgB,qDACGvB,eAAeC,iBADlB;AAAA;AAAA;AAAA,4BACsC,wBAA0BuB,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,oBAAT,SAASA,MAAT,EAAiBlB,KAAjB,SAAiBA,KAAjB;AAClCkB,qBAAOtB,iBAAiBC,OAAxB,EAAiC;AAC/Bc,0BAAU,MADqB;AAE/BC,uBAAO;AACLJ,2BAAS,IADJ;AAELC,0BAAQnB,EAAE6B,MAAF,CAAS,EAAT,EAAa,CAAC,MAAD,EAAS,QAAT,CAAb,EAAiCnB,KAAjC;AAFH;AAFwB,eAAjC;AADkC;AAAA,qBAQbT,QAAQ6B,aAAR,EARa;;AAAA;AAQ5BC,oBAR4B;AASlCH,qBAAOtB,iBAAiBC,OAAxB,EAAiC;AAC/Bc,0BAAU,MADqB;AAE/BC,uBAAO;AACLJ,2BAAS,KADJ;AAELC,0BAAQY;AAFH;AAFwB,eAAjC;;AATkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADtC;;AAAA;AAAA;AAAA;AAAA,kCAkBG5B,eAAeE,iBAlBlB;AAAA;AAAA;AAAA,4BAkBsC,yBAA0BsB,MAA1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,oBAAT,SAASA,MAAT,EAAiBlB,KAAjB,SAAiBA,KAAjB;AAAA;AAAA,qBACCT,QAAQ+B,aAAR,EADD;;AAAA;AAAA;AAClBC,oBADkB,SAC1BC,IAD0B,CAClBD,MADkB;AAElCL,qBAAOtB,iBAAiBE,OAAxB,EAAiC;AAAEa,0BAAU,MAAZ;AAAoBC,uBAAOW;AAA3B,eAAjC;;AAFkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlBtC;;AAAA;AAAA;AAAA;AAAA;AA3B0B,CAArB","sourcesContent":["import * as R from 'ramda'\nimport * as Tenants from '@/tenants/TenantsService'\nimport * as Mutations from '@/store.mutations'\n\nexport const TenantsActions = {\n  FETCH_MEMBER_TAGS: 'tenantFetchMemberTags',\n  FETCH_TENANT_INFO: 'tenantFetchInfo'\n}\n\nexport const TenantsMutations = {\n  SET_ONE: 'tenantSetOne',\n  SET_ALL: 'tenantSetAll'\n}\n\nexport const TenantsStore = {\n  state: {\n    info: {\n      id: null,\n      baseUrl: null,\n      name: null,\n      slug: null,\n      integrations: []\n    },\n    tags: {\n      loading: false,\n      values: []\n    }\n  },\n  mutations: {\n    [TenantsMutations.SET_ONE]: (state, { property, value }) =>\n      (state[property] = value),\n    [TenantsMutations.SET_ALL]: (state, { property, value }) => {\n      console.log(value)\n      state[property] = { ...value }\n      console.log(state)\n    },\n    [Mutations.INIT]: state => {\n      state.tags.loading = false\n      return state\n    }\n  },\n  actions: {\n    [TenantsActions.FETCH_MEMBER_TAGS]: async ({ commit, state }, filter) => {\n      commit(TenantsMutations.SET_ONE, {\n        property: 'tags',\n        value: {\n          loading: true,\n          values: R.pathOr([], ['tags', 'values'], state)\n        }\n      })\n      const result = await Tenants.getMemberTags()\n      commit(TenantsMutations.SET_ONE, {\n        property: 'tags',\n        value: {\n          loading: false,\n          values: result\n        }\n      })\n    },\n    [TenantsActions.FETCH_TENANT_INFO]: async ({ commit, state }, filter) => {\n      const { data: { tenant } } = await Tenants.getTenantInfo()\n      commit(TenantsMutations.SET_ALL, { property: 'info', value: tenant })\n    }\n  }\n}\n"]}]}