{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/eslint-loader/index.js??ref--13-0!/Users/narfdre/Code/hexly/admin/src/graphql/Awards.gql.js","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/graphql/Awards.gql.js","mtime":1581109049512},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _taggedTemplateLiteral from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation recognitionCreateAward($input: RecognitionAwardInput!) {\\n    recognitionCreateAward(input: $input) {\\n      id,\\n      key,\\n      name,\\n      priority,\\n      config,\\n      metadata\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getAllAwards {\\n    recognitionGetAllAwards {\\n      id,\\n      key,\\n      name,\\n      priority,\\n      config,\\n      metadata\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nexport var GET_ALL_AWARDS = gql(_templateObject());\nexport var SAVE_AWARD = gql(_templateObject2());",{"version":3,"sources":["/Users/narfdre/Code/hexly/admin/src/graphql/Awards.gql.js"],"names":["gql","GET_ALL_AWARDS","SAVE_AWARD"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAO,IAAMC,iBAAiBD,GAAjB,mBAAN;AAaP,OAAO,IAAME,aAAaF,GAAb,oBAAN","sourcesContent":["import gql from 'graphql-tag'\n\nexport const GET_ALL_AWARDS = gql`\n  query getAllAwards {\n    recognitionGetAllAwards {\n      id,\n      key,\n      name,\n      priority,\n      config,\n      metadata\n    }\n  }\n`\n\nexport const SAVE_AWARD = gql`\n  mutation recognitionCreateAward($input: RecognitionAwardInput!) {\n    recognitionCreateAward(input: $input) {\n      id,\n      key,\n      name,\n      priority,\n      config,\n      metadata\n    }\n  }\n`\n"]}]}