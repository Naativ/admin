{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/eslint-loader/index.js??ref--13-0!/Users/narfdre/Code/hexly/admin/src/content/ContentStore.js","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/content/ContentStore.js","mtime":1554331296000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\n\nvar _mutations, _actions, _getters;\n\nimport store from '@/store';\nimport moment from 'moment';\nimport * as Content from '@/content/ContentService';\nimport * as Mutations from '@/store.mutations';\nexport var ContentActions = {\n  REFRESH_ASSET_META: 'content:RefreshAssetMeta',\n  REFRESH_LIBRARY_ASSETS: 'content:RefreshLibraryAssets',\n  UPDATE_ASSET: 'content:UpdateAsset',\n  REMOVE_ASSET: 'content:RemoveAsset',\n  ADD_ASSET_TAG: 'content:AddAssetTag'\n};\nexport var ContentMutations = {\n  SET_ONE: 'contentSetOne',\n  SET: 'contentSet',\n  UPDATE: 'contentUpdate',\n  REMOVE: 'removeUpdate'\n};\nexport var ContentGetters = {\n  assetMeta: 'contentAssetMeta',\n  libraryAssets: 'libraryAssets'\n};\nvar META_DEFAULT = {\n  fetching: false,\n  approval: [],\n  tags: [],\n  audiences: [],\n  types: [],\n  refreshed: null,\n  error: undefined\n};\nvar ASSET_DEFAULT = {\n  fetching: false,\n  assets: [],\n  page: 1,\n  pageSize: 25,\n  totalResults: 0,\n  totalPages: 0,\n  refreshed: null\n};\nvar DEFAULT_STATE = {\n  meta: {\n    asset: _objectSpread({}, META_DEFAULT)\n  },\n  assets: {\n    library: _objectSpread({}, ASSET_DEFAULT)\n  }\n};\nexport var ContentStore = {\n  state: DEFAULT_STATE,\n  mutations: (_mutations = {}, _defineProperty(_mutations, ContentMutations.SET, function (state, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        value = _ref2[0],\n        fn = _ref2[1];\n\n    return fn(state, value);\n  }), _defineProperty(_mutations, ContentMutations.SET_ONE, function (state, _ref3) {\n    var property = _ref3.property,\n        value = _ref3.value;\n    return state[property] = value;\n  }), _defineProperty(_mutations, Mutations.INIT, function (state) {\n    Object.assign(state, DEFAULT_STATE);\n  }), _defineProperty(_mutations, ContentMutations.REMOVE, function (state, asset) {\n    var assets = state.assets.library.assets;\n    state.assets.library.assets = assets.filter(function (a) {\n      return a.id !== asset.id;\n    });\n  }), _mutations),\n  actions: (_actions = {}, _defineProperty(_actions, ContentActions.ADD_ASSET_TAG, function () {\n    var _ref6 = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(_ref4, _ref5) {\n      var commit, state, asset, tags;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref4.commit, state = _ref4.state;\n              asset = _ref5.asset, tags = _ref5.tags;\n              _context.next = 4;\n              return Content.setAssetTags(asset.id, tags);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref6.apply(this, arguments);\n    };\n  }()), _defineProperty(_actions, ContentActions.REFRESH_ASSET_META, function () {\n    var _ref8 = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee2(_ref7) {\n      var commit, state, assetMeta;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref7.commit, state = _ref7.state;\n              // reset state\n              commit(ContentMutations.SET, [_objectSpread({}, state.meta.asset, {\n                fetching: true,\n                error: null\n              }), function (state, value) {\n                return Object.assign(state.meta.asset, value);\n              }]);\n              _context2.next = 4;\n              return Content.getAssetMeta();\n\n            case 4:\n              assetMeta = _context2.sent;\n              commit(ContentMutations.SET, [_objectSpread({}, META_DEFAULT, assetMeta, {\n                refreshed: moment().toISOString()\n              }), function (state, value) {\n                return Object.assign(state.meta.asset, value);\n              }]);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x3) {\n      return _ref8.apply(this, arguments);\n    };\n  }()), _defineProperty(_actions, ContentActions.REFRESH_LIBRARY_ASSETS, function () {\n    var _ref10 = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee3(_ref9, searchQuery) {\n      var dispatch, commit, state, jwt, meta, filter, libraryAssets;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              dispatch = _ref9.dispatch, commit = _ref9.commit, state = _ref9.state;\n              // reset state\n              commit(ContentMutations.SET, [_objectSpread({}, state.assets.library, {\n                fetching: true,\n                error: null\n              }), function (state, value) {\n                return Object.assign(state.assets.library, value);\n              }]);\n              jwt = store.state.jwt;\n              meta = state.meta.asset; // load if meta not initialized\n\n              if (meta.refreshed) {\n                _context3.next = 7;\n                break;\n              }\n\n              _context3.next = 7;\n              return dispatch(ContentActions.REFRESH_ASSET_META);\n\n            case 7:\n              filter = _objectSpread({\n                visibilityIds: [200, 201, 202, 203, 204]\n              }, searchQuery);\n\n              if (searchQuery.owners && searchQuery.owners.length === 0) {\n                delete filter.owners;\n              }\n\n              if (searchQuery.anyTags && searchQuery.anyTags.length === 0) {\n                delete filter.anyTags;\n              }\n\n              _context3.next = 12;\n              return Content.searchAssets('library', _objectSpread({}, filter, {\n                includeThumbnails: false,\n                includeSources: false\n              }), jwt);\n\n            case 12:\n              libraryAssets = _context3.sent;\n              commit(ContentMutations.SET, [_objectSpread({}, ASSET_DEFAULT, libraryAssets, {\n                refreshed: moment().toISOString()\n              }), function (state, value) {\n                return Object.assign(state.assets.library, value);\n              }]);\n\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x4, _x5) {\n      return _ref10.apply(this, arguments);\n    };\n  }()), _defineProperty(_actions, ContentActions.UPDATE_ASSET, function () {\n    var _ref12 = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee4(_ref11, asset) {\n      var commit, state;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              commit = _ref11.commit, state = _ref11.state;\n              commit(ContentMutations.UPDATE, asset);\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x6, _x7) {\n      return _ref12.apply(this, arguments);\n    };\n  }()), _defineProperty(_actions, ContentActions.REMOVE_ASSET, function () {\n    var _ref14 = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee5(_ref13, asset) {\n      var commit, state;\n      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              commit = _ref13.commit, state = _ref13.state;\n              commit(ContentMutations.REMOVE, asset);\n\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function (_x8, _x9) {\n      return _ref14.apply(this, arguments);\n    };\n  }()), _actions),\n  getters: (_getters = {}, _defineProperty(_getters, ContentGetters.assetMeta, function (state) {\n    return state.meta.asset;\n  }), _defineProperty(_getters, ContentGetters.libraryAssets, function (state) {\n    return state.assets.library;\n  }), _getters)\n};",{"version":3,"sources":["/Users/narfdre/Code/hexly/admin/src/content/ContentStore.js"],"names":["store","moment","Content","Mutations","ContentActions","REFRESH_ASSET_META","REFRESH_LIBRARY_ASSETS","UPDATE_ASSET","REMOVE_ASSET","ADD_ASSET_TAG","ContentMutations","SET_ONE","SET","UPDATE","REMOVE","ContentGetters","assetMeta","libraryAssets","META_DEFAULT","fetching","approval","tags","audiences","types","refreshed","error","undefined","ASSET_DEFAULT","assets","page","pageSize","totalResults","totalPages","DEFAULT_STATE","meta","asset","library","ContentStore","state","mutations","value","fn","property","INIT","Object","assign","filter","a","id","actions","commit","setAssetTags","getAssetMeta","toISOString","searchQuery","dispatch","jwt","visibilityIds","owners","length","anyTags","searchAssets","includeThumbnails","includeSources","getters"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,KAAKC,OAAZ,MAAyB,0BAAzB;AACA,OAAO,KAAKC,SAAZ,MAA2B,mBAA3B;AAEA,OAAO,IAAMC,iBAAiB;AAC5BC,sBAAoB,0BADQ;AAE5BC,0BAAwB,8BAFI;AAG5BC,gBAAc,qBAHc;AAI5BC,gBAAc,qBAJc;AAK5BC,iBAAe;AALa,CAAvB;AAQP,OAAO,IAAMC,mBAAmB;AAC9BC,WAAS,eADqB;AAE9BC,OAAK,YAFyB;AAG9BC,UAAQ,eAHsB;AAI9BC,UAAQ;AAJsB,CAAzB;AAOP,OAAO,IAAMC,iBAAiB;AAC5BC,aAAW,kBADiB;AAE5BC,iBAAe;AAFa,CAAvB;AAKP,IAAMC,eAAe;AACnBC,YAAU,KADS;AAEnBC,YAAU,EAFS;AAGnBC,QAAM,EAHa;AAInBC,aAAW,EAJQ;AAKnBC,SAAO,EALY;AAMnBC,aAAW,IANQ;AAOnBC,SAAOC;AAPY,CAArB;AASA,IAAMC,gBAAgB;AACpBR,YAAU,KADU;AAEpBS,UAAQ,EAFY;AAGpBC,QAAM,CAHc;AAIpBC,YAAU,EAJU;AAKpBC,gBAAc,CALM;AAMpBC,cAAY,CANQ;AAOpBR,aAAW;AAPS,CAAtB;AASA,IAAMS,gBAAgB;AACpBC,QAAM;AACJC,6BAAYjB,YAAZ;AADI,GADc;AAIpBU,UAAQ;AACNQ,+BAAcT,aAAd;AADM;AAJY,CAAtB;AAQA,OAAO,IAAMU,eAAe;AAC1BC,SAAOL,aADmB;AAE1BM,2DACG7B,iBAAiBE,GADpB,EAC0B,UAAC0B,KAAD;AAAA;AAAA,QAASE,KAAT;AAAA,QAAgBC,EAAhB;;AAAA,WAAwBA,GAAGH,KAAH,EAAUE,KAAV,CAAxB;AAAA,GAD1B,+BAEG9B,iBAAiBC,OAFpB,EAE8B,UAAC2B,KAAD;AAAA,QAAUI,QAAV,SAAUA,QAAV;AAAA,QAAoBF,KAApB,SAAoBA,KAApB;AAAA,WACzBF,MAAMI,QAAN,IAAkBF,KADO;AAAA,GAF9B,+BAIGrC,UAAUwC,IAJb,EAIoB,iBAAS;AACzBC,WAAOC,MAAP,CAAcP,KAAd,EAAqBL,aAArB;AACD,GANH,+BAOGvB,iBAAiBI,MAPpB,EAO6B,UAACwB,KAAD,EAAQH,KAAR,EAAkB;AAAA,QACnCP,MADmC,GACxBU,MAAMV,MAAN,CAAaQ,OADW,CACnCR,MADmC;AAE3CU,UAAMV,MAAN,CAAaQ,OAAb,CAAqBR,MAArB,GAA8BA,OAAOkB,MAAP,CAAc;AAAA,aAAKC,EAAEC,EAAF,KAASb,MAAMa,EAApB;AAAA,KAAd,CAA9B;AACD,GAVH,cAF0B;AAc1BC,qDACG7C,eAAeK,aADlB;AAAA;AAAA;AAAA,4BACkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAASyC,oBAAT,SAASA,MAAT,EAAiBZ,KAAjB,SAAiBA,KAAjB;AAA4BH,mBAA5B,SAA4BA,KAA5B,EAAmCd,IAAnC,SAAmCA,IAAnC;AAAA;AAAA,qBACxBnB,QAAQiD,YAAR,CAAqBhB,MAAMa,EAA3B,EAA+B3B,IAA/B,CADwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADlC;;AAAA;AAAA;AAAA;AAAA,kCAIGjB,eAAeC,kBAJlB;AAAA;AAAA;AAAA,4BAIuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAS6C,oBAAT,SAASA,MAAT,EAAiBZ,KAAjB,SAAiBA,KAAjB;AACnC;AACAY,qBAAOxC,iBAAiBE,GAAxB,EAA6B,mBAEtB0B,MAAMJ,IAAN,CAAWC,KAFW;AAGzBhB,0BAAU,IAHe;AAIzBM,uBAAO;AAJkB,kBAM3B,UAACa,KAAD,EAAQE,KAAR;AAAA,uBAAkBI,OAAOC,MAAP,CAAcP,MAAMJ,IAAN,CAAWC,KAAzB,EAAgCK,KAAhC,CAAlB;AAAA,eAN2B,CAA7B;AAFmC;AAAA,qBAWXtC,QAAQkD,YAAR,EAXW;;AAAA;AAW7BpC,uBAX6B;AAanCkC,qBAAOxC,iBAAiBE,GAAxB,EAA6B,mBAEtBM,YAFsB,EAGtBF,SAHsB;AAIzBQ,2BAAWvB,SAASoD,WAAT;AAJc,kBAM3B,UAACf,KAAD,EAAQE,KAAR;AAAA,uBAAkBI,OAAOC,MAAP,CAAcP,MAAMJ,IAAN,CAAWC,KAAzB,EAAgCK,KAAhC,CAAlB;AAAA,eAN2B,CAA7B;;AAbmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJvC;;AAAA;AAAA;AAAA;AAAA,kCA0BGpC,eAAeE,sBA1BlB;AAAA;AAAA;AAAA,4BA0B2C,yBAItCgD,WAJsC;AAAA;AAAA;AAAA;AAAA;AAAA;AACvCC,sBADuC,SACvCA,QADuC,EAEvCL,MAFuC,SAEvCA,MAFuC,EAGvCZ,KAHuC,SAGvCA,KAHuC;AAKvC;AACAY,qBAAOxC,iBAAiBE,GAAxB,EAA6B,mBAEtB0B,MAAMV,MAAN,CAAaQ,OAFS;AAGzBjB,0BAAU,IAHe;AAIzBM,uBAAO;AAJkB,kBAM3B,UAACa,KAAD,EAAQE,KAAR;AAAA,uBAAkBI,OAAOC,MAAP,CAAcP,MAAMV,MAAN,CAAaQ,OAA3B,EAAoCI,KAApC,CAAlB;AAAA,eAN2B,CAA7B;AASQgB,iBAf+B,GAevBxD,MAAMsC,KAfiB,CAe/BkB,GAf+B;AAgBnCtB,kBAhBmC,GAgB5BI,MAAMJ,IAAN,CAAWC,KAhBiB,EAiBvC;;AAjBuC,kBAkBlCD,KAAKV,SAlB6B;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAmB/B+B,SAASnD,eAAeC,kBAAxB,CAnB+B;;AAAA;AAsBjCyC,oBAtBiC;AAuBrCW,+BAAe,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB;AAvBsB,iBAwBlCH,WAxBkC;;AA0BvC,kBAAIA,YAAYI,MAAZ,IAAsBJ,YAAYI,MAAZ,CAAmBC,MAAnB,KAA8B,CAAxD,EAA2D;AACzD,uBAAOb,OAAOY,MAAd;AACD;;AACD,kBAAIJ,YAAYM,OAAZ,IAAuBN,YAAYM,OAAZ,CAAoBD,MAApB,KAA+B,CAA1D,EAA6D;AAC3D,uBAAOb,OAAOc,OAAd;AACD;;AA/BsC;AAAA,qBAiCX1D,QAAQ2D,YAAR,CAC1B,SAD0B,oBAErBf,MAFqB;AAGxBgB,mCAAmB,KAHK;AAIxBC,gCAAgB;AAJQ,kBAM1BP,GAN0B,CAjCW;;AAAA;AAiCjCvC,2BAjCiC;AAyCvCiC,qBAAOxC,iBAAiBE,GAAxB,EAA6B,mBAEtBe,aAFsB,EAGtBV,aAHsB;AAIzBO,2BAAWvB,SAASoD,WAAT;AAJc,kBAM3B,UAACf,KAAD,EAAQE,KAAR;AAAA,uBAAkBI,OAAOC,MAAP,CAAcP,MAAMV,MAAN,CAAaQ,OAA3B,EAAoCI,KAApC,CAAlB;AAAA,eAN2B,CAA7B;;AAzCuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1B3C;;AAAA;AAAA;AAAA;AAAA,kCA4EGpC,eAAeG,YA5ElB;AAAA;AAAA;AAAA,4BA4EiC,0BAA0B4B,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAASe,oBAAT,UAASA,MAAT,EAAiBZ,KAAjB,UAAiBA,KAAjB;AAC7BY,qBAAOxC,iBAAiBG,MAAxB,EAAgCsB,KAAhC;;AAD6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5EjC;;AAAA;AAAA;AAAA;AAAA,kCA+EG/B,eAAeI,YA/ElB;AAAA;AAAA;AAAA,4BA+EiC,0BAA0B2B,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAASe,oBAAT,UAASA,MAAT,EAAiBZ,KAAjB,UAAiBA,KAAjB;AAC7BY,qBAAOxC,iBAAiBI,MAAxB,EAAgCqB,KAAhC;;AAD6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/EjC;;AAAA;AAAA;AAAA;AAAA,iBAd0B;AAiG1B6B,qDACGjD,eAAeC,SADlB,EAC8B;AAAA,WAASsB,MAAMJ,IAAN,CAAWC,KAApB;AAAA,GAD9B,6BAEGpB,eAAeE,aAFlB,EAEkC,iBAAS;AACvC,WAAOqB,MAAMV,MAAN,CAAaQ,OAApB;AACD,GAJH;AAjG0B,CAArB","sourcesContent":["import store from '@/store'\nimport moment from 'moment'\nimport * as Content from '@/content/ContentService'\nimport * as Mutations from '@/store.mutations'\n\nexport const ContentActions = {\n  REFRESH_ASSET_META: 'content:RefreshAssetMeta',\n  REFRESH_LIBRARY_ASSETS: 'content:RefreshLibraryAssets',\n  UPDATE_ASSET: 'content:UpdateAsset',\n  REMOVE_ASSET: 'content:RemoveAsset',\n  ADD_ASSET_TAG: 'content:AddAssetTag'\n}\n\nexport const ContentMutations = {\n  SET_ONE: 'contentSetOne',\n  SET: 'contentSet',\n  UPDATE: 'contentUpdate',\n  REMOVE: 'removeUpdate'\n}\n\nexport const ContentGetters = {\n  assetMeta: 'contentAssetMeta',\n  libraryAssets: 'libraryAssets'\n}\n\nconst META_DEFAULT = {\n  fetching: false,\n  approval: [],\n  tags: [],\n  audiences: [],\n  types: [],\n  refreshed: null,\n  error: undefined\n}\nconst ASSET_DEFAULT = {\n  fetching: false,\n  assets: [],\n  page: 1,\n  pageSize: 25,\n  totalResults: 0,\n  totalPages: 0,\n  refreshed: null\n}\nconst DEFAULT_STATE = {\n  meta: {\n    asset: { ...META_DEFAULT }\n  },\n  assets: {\n    library: { ...ASSET_DEFAULT }\n  }\n}\nexport const ContentStore = {\n  state: DEFAULT_STATE,\n  mutations: {\n    [ContentMutations.SET]: (state, [value, fn]) => fn(state, value),\n    [ContentMutations.SET_ONE]: (state, { property, value }) =>\n      (state[property] = value),\n    [Mutations.INIT]: state => {\n      Object.assign(state, DEFAULT_STATE)\n    },\n    [ContentMutations.REMOVE]: (state, asset) => {\n      const { assets } = state.assets.library\n      state.assets.library.assets = assets.filter(a => a.id !== asset.id)\n    }\n  },\n  actions: {\n    [ContentActions.ADD_ASSET_TAG]: async ({ commit, state }, { asset, tags }) => {\n      await Content.setAssetTags(asset.id, tags)\n    },\n    [ContentActions.REFRESH_ASSET_META]: async ({ commit, state }) => {\n      // reset state\n      commit(ContentMutations.SET, [\n        {\n          ...state.meta.asset,\n          fetching: true,\n          error: null\n        },\n        (state, value) => Object.assign(state.meta.asset, value)\n      ])\n\n      const assetMeta = await Content.getAssetMeta()\n\n      commit(ContentMutations.SET, [\n        {\n          ...META_DEFAULT,\n          ...assetMeta,\n          refreshed: moment().toISOString()\n        },\n        (state, value) => Object.assign(state.meta.asset, value)\n      ])\n    },\n    [ContentActions.REFRESH_LIBRARY_ASSETS]: async ({\n      dispatch,\n      commit,\n      state\n    }, searchQuery) => {\n      // reset state\n      commit(ContentMutations.SET, [\n        {\n          ...state.assets.library,\n          fetching: true,\n          error: null\n        },\n        (state, value) => Object.assign(state.assets.library, value)\n      ])\n\n      const { jwt } = store.state\n      let meta = state.meta.asset\n      // load if meta not initialized\n      if (!meta.refreshed) {\n        await dispatch(ContentActions.REFRESH_ASSET_META)\n      }\n\n      const filter = {\n        visibilityIds: [200, 201, 202, 203, 204],\n        ...searchQuery\n      }\n      if (searchQuery.owners && searchQuery.owners.length === 0) {\n        delete filter.owners\n      }\n      if (searchQuery.anyTags && searchQuery.anyTags.length === 0) {\n        delete filter.anyTags\n      }\n\n      const libraryAssets = await Content.searchAssets(\n        'library',\n        { ...filter,\n          includeThumbnails: false,\n          includeSources: false\n        },\n        jwt\n      )\n      commit(ContentMutations.SET, [\n        {\n          ...ASSET_DEFAULT,\n          ...libraryAssets,\n          refreshed: moment().toISOString()\n        },\n        (state, value) => Object.assign(state.assets.library, value)\n      ])\n    },\n    [ContentActions.UPDATE_ASSET]: async ({ commit, state }, asset) => {\n      commit(ContentMutations.UPDATE, asset)\n    },\n    [ContentActions.REMOVE_ASSET]: async ({ commit, state }, asset) => {\n      commit(ContentMutations.REMOVE, asset)\n    }\n  },\n  getters: {\n    [ContentGetters.assetMeta]: state => state.meta.asset,\n    [ContentGetters.libraryAssets]: state => {\n      return state.assets.library\n    }\n  }\n}\n"]}]}