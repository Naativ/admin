{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/members/ContactCardAddresses.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/members/ContactCardAddresses.vue","mtime":1581353753562},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.fill\";\nimport _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { cloneDeep, get } from 'lodash';\nimport { ContactCardAddressesGQL, UpdateAddressesMutation } from \"../../users/members.gql\";\nimport EditButton from \"./EditButton\";\nvar blankAddress = {\n  name: null,\n  street: null,\n  street2: null,\n  city: null,\n  province: null,\n  country: null,\n  postalCode: null,\n  lat: null,\n  long: null\n};\nexport default {\n  name: 'ContactCardAddresses',\n  components: {\n    EditButton: EditButton\n  },\n  data: function data() {\n    return {\n      model: {},\n      disabled: [],\n      memberId: ~~this.$route.params.id,\n      contactId: null\n    };\n  },\n  methods: {\n    editClicked: function editClicked(index) {\n      this.setDisabled(index, false);\n    },\n    saveClicked: function () {\n      var _saveClicked = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(index) {\n        var contactId, _ref, id, type, input, addressUpdateRes;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.setDisabled(index, true);\n                contactId = this.contactId;\n                _ref = this.addresses.addresses[index] ? this.addresses.addresses[index] : {\n                  id: undefined\n                }, id = _ref.id;\n                type = this.model.type[index].type;\n                input = {\n                  id: id,\n                  contactId: contactId,\n                  name: this.model.addresses[index].name,\n                  type: type ? type.toUpperCase() : type,\n                  street: this.model.addresses[index].street,\n                  street2: this.model.addresses[index].street2,\n                  city: this.model.addresses[index].city,\n                  province: this.model.addresses[index].province,\n                  postalCode: this.model.addresses[index].postalCode,\n                  country: this.model.addresses[index].country,\n                  lat: this.model.addresses[index].lat,\n                  long: this.model.addresses[index].long\n                };\n                _context.prev = 5;\n                _context.next = 8;\n                return this.$apollo.mutate({\n                  mutation: UpdateAddressesMutation,\n                  variables: {\n                    input: input\n                  }\n                });\n\n              case 8:\n                addressUpdateRes = _context.sent;\n                this.$emit('snackbarEmit', 'Address saved!');\n                this.$apollo.queries.addresses.refetch();\n                this.initMember(this.addresses);\n                return _context.abrupt(\"return\", addressUpdateRes);\n\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](5);\n                this.$emit('snackbarEmit', 'Error updating address!');\n                throw new Error(_context.t0.message);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[5, 15]]);\n      }));\n\n      function saveClicked(_x) {\n        return _saveClicked.apply(this, arguments);\n      }\n\n      return saveClicked;\n    }(),\n    cancelClicked: function () {\n      var _cancelClicked = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(index) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.setDisabled(index, true);\n                this.initMember(this.addresses);\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function cancelClicked(_x2) {\n        return _cancelClicked.apply(this, arguments);\n      }\n\n      return cancelClicked;\n    }(),\n    initMember: function initMember(contact) {\n      var _this = this;\n\n      this.model = cloneDeep(contact);\n      this.model.type = [];\n      this.model.addresses.forEach(function (address, index) {\n        delete _this.model.addresses[index].id;\n        delete _this.model.addresses[index].contactId;\n        delete _this.model.addresses[index].type;\n        delete _this.model.addresses[index].__typename;\n\n        _this.model.type.push({\n          id: _this.addresses.addresses[index].id,\n          type: _this.addresses.addresses[index].type\n        });\n      });\n\n      if (!this.model.addresses.length) {\n        this.model = _objectSpread({}, this.model, {\n          addresses: [blankAddress]\n        });\n      }\n\n      var disabled = Array(this.model.addresses.length).fill(true);\n      this.$apollo.queries.addresses.refetch();\n      this.disabled = disabled;\n    },\n    setDisabled: function setDisabled(index, value) {\n      var disabled = Array(this.model.addresses.length).fill(true);\n      disabled[index] = value;\n      this.disabled = disabled;\n    },\n    addAddress: function addAddress() {\n      this.model.addresses.push(blankAddress);\n      this.model.type.push({\n        type: undefined,\n        id: undefined\n      });\n      this.disabled.push(false);\n    }\n  },\n  watch: {\n    addresses: function addresses(next) {\n      this.contactId = next.id;\n      this.initMember(next);\n    },\n    '$route': function $route(newRoute) {\n      var id = newRoute.params.id;\n      this.memberId = ~~id;\n      this.disabled.fill(true);\n    }\n  },\n  apollo: {\n    addresses: _objectSpread({}, ContactCardAddressesGQL, {\n      variables: function variables() {\n        return {\n          memberId: this.memberId\n        };\n      },\n      update: function update(data) {\n        var member = _objectSpread({}, get(data, 'members.nodes.0'));\n\n        var contacts = member.contacts;\n\n        if (contacts && Array.isArray(contacts) && contacts.length < 2) {\n          return contacts[0];\n        }\n\n        return contacts;\n      }\n    })\n  }\n};",{"version":3,"sources":["ContactCardAddresses.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div\n    v-if  =\"model && model.addresses\"\n  >\n    <v-list-tile-sub-title\n      v-for =\"(address, index) in model.addresses\"\n      :key  =\"index\"\n    >\n      <div class=\"header-container\">\n        <h4 class=\"address-title\">Address {{model.addresses.length > 1 ? index+1 : null}}</h4>\n        <EditButton\n          class          =\"edit-button-address\"\n          :index         =\"index\"\n          :disabled      =\"disabled[index]\"\n          @editClicked   =\"editClicked(index)\"\n          @saveClicked   =\"saveClicked(index)\"\n          @cancelClicked =\"cancelClicked(index)\"\n        />\n      </div>\n      <div class=\"addresses\">\n        <v-select\n          prepend-icon =\"house\"\n          label   =\"Type\"\n          :disabled    =\"disabled[index]\"\n          :items  =\"[{text:'Shipping', value: 'shipping'}, {text: 'Billing', value: 'billing'}]\"\n          v-model =\"model.type[index].type\"\n        />\n        <v-text-field\n          :label       =\"addressField\"\n          prepend-icon =\"house\"\n          :disabled    =\"disabled[index]\"\n          v-model      =\"model.addresses[index][addressField]\"\n          v-for        =\"(addressField, addressIndex) in Object.keys(model.addresses[index])\"\n          :key         =\"`address-field-${addressIndex}`\"\n        >\n        </v-text-field>\n      </div>\n    </v-list-tile-sub-title>\n    <v-card-actions>\n      <v-tooltip bottom>\n        <template slot=\"activator\">\n          <v-btn class=\"indigo lighten-1 white--text\" @click=\"addAddress\" round>\n            <v-icon>add</v-icon>\n          </v-btn>\n        </template>\n        <span>Add New Address</span>\n      </v-tooltip>\n    </v-card-actions>\n  </div>\n</template>\n\n<script>\nimport { cloneDeep, get } from 'lodash'\n\nimport { ContactCardAddressesGQL, UpdateAddressesMutation } from '../../users/members.gql'\nimport EditButton from './EditButton'\n\nconst blankAddress = {\n  name: null,\n  street: null,\n  street2: null,\n  city: null,\n  province: null,\n  country: null,\n  postalCode: null,\n  lat: null,\n  long: null\n}\n\nexport default {\n  name: 'ContactCardAddresses',\n  components: {\n    EditButton\n  },\n  data () {\n    return {\n      model: {},\n      disabled: [],\n      memberId: ~~this.$route.params.id,\n      contactId: null\n    }\n  },\n  methods: {\n    editClicked (index) {\n      this.setDisabled(index, false)\n    },\n    async saveClicked(index) {\n      this.setDisabled(index, true)\n\n      const { contactId } = this\n      const { id } = this.addresses.addresses[index] ? this.addresses.addresses[index] : { id: undefined }\n      const { type } = this.model.type[index]\n\n      const input = {\n        id,\n        contactId,\n        name: this.model.addresses[index].name,\n        type: type ? type.toUpperCase() : type,\n        street: this.model.addresses[index].street,\n        street2: this.model.addresses[index].street2,\n        city: this.model.addresses[index].city,\n        province: this.model.addresses[index].province,\n        postalCode: this.model.addresses[index].postalCode,\n        country: this.model.addresses[index].country,\n        lat: this.model.addresses[index].lat,\n        long: this.model.addresses[index].long\n      }\n\n      try {\n        const addressUpdateRes = await this.$apollo.mutate({\n          mutation: UpdateAddressesMutation,\n          variables: {\n            input\n          }\n        })\n        this.$emit('snackbarEmit', 'Address saved!')\n\n        this.$apollo.queries.addresses.refetch()\n        this.initMember(this.addresses)\n\n        return addressUpdateRes\n      } catch (error) {\n        this.$emit('snackbarEmit', 'Error updating address!')\n        throw new Error(error.message)\n      }\n    },\n    async cancelClicked (index) {\n      this.setDisabled(index, true)\n      this.initMember(this.addresses)\n    },\n    initMember(contact) {\n      this.model = cloneDeep(contact)\n      this.model.type = []\n\n      this.model.addresses.forEach((address, index) => {\n        delete this.model.addresses[index].id\n        delete this.model.addresses[index].contactId\n        delete this.model.addresses[index].type\n        delete this.model.addresses[index].__typename\n\n        this.model.type.push({\n          id: this.addresses.addresses[index].id,\n          type: this.addresses.addresses[index].type\n        })\n      })\n\n      if (!this.model.addresses.length) {\n        this.model = {\n          ...this.model,\n          addresses: [blankAddress]\n        }\n      }\n\n      const disabled = Array(this.model.addresses.length).fill(true)\n      this.$apollo.queries.addresses.refetch()\n      this.disabled = disabled\n    },\n    setDisabled(index, value) {\n      const disabled = Array(this.model.addresses.length).fill(true)\n\n      disabled[index] = value\n      this.disabled = disabled\n    },\n    addAddress() {\n      this.model.addresses.push(blankAddress)\n      this.model.type.push({ type: undefined, id: undefined })\n      this.disabled.push(false)\n    }\n  },\n  watch: {\n    addresses (next) {\n      this.contactId = next.id\n      this.initMember(next)\n    },\n    '$route'(newRoute) {\n      const { params: { id } } = newRoute\n      this.memberId = ~~id\n      this.disabled.fill(true)\n    }\n  },\n  apollo: {\n    addresses: {\n      ...ContactCardAddressesGQL,\n      variables() {\n        return {\n          memberId: this.memberId\n        }\n      },\n      update(data) {\n        let member = { ...get(data, 'members.nodes.0') }\n        const { contacts } = member\n\n        if (contacts && Array.isArray(contacts) && contacts.length < 2) {\n          return contacts[0]\n        }\n        return contacts\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.findme {\n  border: 2px solid red;\n}\n.details {\n  text-align: left;\n}\n.addresses {\n  display: flex;\n  flex-direction: column;\n  height: 39vh;\n  flex-wrap: wrap;\n  min-width: 45vw;\n  padding-top: 11px;\n  padding-top: 48px;\n  position: relative;\n}\n#contact-list {\n  width: 100%;\n}\n.contact-section-heading {\n  display: inline;\n}\n.header-container {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 19px;\n  align-items: center;\n}\n</style>\n"],"sourceRoot":"src/views/members"}]}