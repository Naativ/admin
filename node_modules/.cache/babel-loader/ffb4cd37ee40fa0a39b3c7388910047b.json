{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/eslint-loader/index.js??ref--13-0!/Users/narfdre/Code/hexly/admin/src/users/UserService.js","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/users/UserService.js","mtime":1572467114000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { get as _get } from 'lodash';\nimport { apolloClient } from '@/vue-apollo';\nimport * as gql from \"./users.gql\";\n\nvar doQuery = function doQuery(query, args) {\n  return apolloClient.query({\n    query: query,\n    variables: args,\n    fetchPolicy: 'no-cache'\n  });\n};\n\nvar doMutate = function doMutate(mutation, args) {\n  return apolloClient.mutate({\n    mutation: mutation,\n    variables: args\n  });\n};\n\nexport var search =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(_ref) {\n    var ids, term, tags, first, after, result;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ids = _ref.ids, term = _ref.term, tags = _ref.tags, first = _ref.first, after = _ref.after;\n            _context.next = 3;\n            return doQuery(gql.searchUsers, {\n              memberCon: {\n                ids: ids,\n                query: term,\n                tags: tags,\n                first: first,\n                after: after\n              }\n            });\n\n          case 3:\n            result = _context.sent;\n            return _context.abrupt(\"return\", _get(result, 'data.members', []));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function search(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var get =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee2(_ref3) {\n    var id, result;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            id = _ref3.id;\n            _context2.next = 3;\n            return doQuery(gql.searchUsers, {\n              memberCon: {\n                ids: [~~id]\n              }\n            });\n\n          case 3:\n            result = _context2.sent;\n            return _context2.abrupt(\"return\", _get(result, 'data.members.nodes[0]', undefined));\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function get(_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var upsert =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee3(params) {\n    var statusId, result;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            statusId = _get(params, 'statusId');\n            _context3.next = 3;\n            return doMutate(gql.updateMember, {\n              input: {\n                contactEmail: _get(params, 'contactEmail'),\n                displayName: _get(params, 'displayName'),\n                firstName: _get(params, 'firstName'),\n                id: ~~_get(params, 'id'),\n                lastName: _get(params, 'lastName'),\n                name: _get(params, 'name'),\n                slug: _get(params, 'slug'),\n                statusId: ~~statusId\n              }\n            });\n\n          case 3:\n            result = _context3.sent;\n            return _context3.abrupt(\"return\", _get(result, 'data.updateMember', undefined));\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function upsert(_x3) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var updateMemberSubset = function updateMemberSubset(params) {\n  return doMutate(gql.updateMemberSubset, {\n    input: {\n      birthday: params.birthday,\n      id: params.memberId,\n      legalLocaleId: params.legalLocaleId,\n      languageId: params.languageId,\n      timezoneId: params.timezoneId\n    }\n  });\n};\nexport var adjustTags =\n/*#__PURE__*/\nfunction () {\n  var _ref7 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee4(_ref6) {\n    var memberId, set, add, remove, result;\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            memberId = _ref6.memberId, set = _ref6.set, add = _ref6.add, remove = _ref6.remove;\n            _context4.next = 3;\n            return doMutate(gql.adjustTags, {\n              input: {\n                memberId: memberId,\n                set: set,\n                add: add,\n                remove: remove\n              }\n            });\n\n          case 3:\n            result = _context4.sent;\n            return _context4.abrupt(\"return\", _get(result, 'data.adjustTags.tags', undefined));\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function adjustTags(_x4) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var getCredentials =\n/*#__PURE__*/\nfunction () {\n  var _ref8 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee5(memberId) {\n    var result;\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return doQuery(gql.getMemberCredentials, {\n              input: {\n                memberId: ~~memberId\n              }\n            });\n\n          case 2:\n            result = _context5.sent;\n            return _context5.abrupt(\"return\", _get(result, 'data.getMemberCredentials', undefined));\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function getCredentials(_x5) {\n    return _ref8.apply(this, arguments);\n  };\n}();\nexport var getPhone = function getPhone(contactId) {\n  return doQuery(gql.getPhone, {\n    input: {\n      contactId: contactId\n    }\n  }).then(function (res) {\n    return _get(res, 'data.phoneNumberByContact[0]', {});\n  });\n};\nexport var createPhone = function createPhone(_ref9) {\n  var contactId = _ref9.contactId,\n      number = _ref9.number,\n      id = _ref9.id;\n  return doMutate(gql.createPhone, {\n    input: {\n      contactId: contactId,\n      number: number,\n      id: id\n    }\n  });\n};\nexport var updatePhone = function updatePhone(_ref10) {\n  var contactId = _ref10.contactId,\n      id = _ref10.id,\n      number = _ref10.number;\n  return doMutate(gql.updatePhone, {\n    input: {\n      contactId: contactId,\n      id: id,\n      number: number\n    }\n  });\n};\nexport var getAddress =\n/*#__PURE__*/\nfunction () {\n  var _ref11 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee6(contactId) {\n    return regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            return _context6.abrupt(\"return\", doQuery(gql.getAddress, {\n              addressByContactOrTenant: {\n                contactId: contactId\n              }\n            }).then(function (res) {\n              return _get(res, 'data.addressByContactOrTenant[0]', {});\n            }));\n\n          case 1:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function getAddress(_x6) {\n    return _ref11.apply(this, arguments);\n  };\n}();\nexport var updateAddress = function updateAddress(addressInput) {\n  return doMutate(gql.updateAddress, {\n    addressInput: addressInput\n  });\n};\nexport var updateSlug = function updateSlug(updateSlugInput) {\n  return doMutate(gql.updateSlug, {\n    updateSlugInput: updateSlugInput\n  });\n};\nexport var createSlug = function createSlug(createSlugInput) {\n  return doMutate(gql.createSlug, {\n    createSlugInput: createSlugInput\n  });\n};",{"version":3,"sources":["/Users/narfdre/Code/hexly/admin/src/users/UserService.js"],"names":["get","_get","apolloClient","gql","doQuery","query","args","variables","fetchPolicy","doMutate","mutation","mutate","search","ids","term","tags","first","after","searchUsers","memberCon","result","id","undefined","upsert","params","statusId","updateMember","input","contactEmail","displayName","firstName","lastName","name","slug","updateMemberSubset","birthday","memberId","legalLocaleId","languageId","timezoneId","adjustTags","set","add","remove","getCredentials","getMemberCredentials","getPhone","contactId","then","res","createPhone","number","updatePhone","getAddress","addressByContactOrTenant","updateAddress","addressInput","updateSlug","updateSlugInput","createSlug","createSlugInput"],"mappings":"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","sourcesContent":["import { get as _get } from 'lodash'\n\nimport { apolloClient } from '@/vue-apollo'\n\nimport * as gql from './users.gql'\n\nconst doQuery = (query, args) =>\n  apolloClient.query({\n    query,\n    variables: args,\n    fetchPolicy: 'no-cache'\n  })\n\nconst doMutate = (mutation, args) =>\n  apolloClient.mutate({\n    mutation,\n    variables: args\n  })\n\nexport const search = async ({ ids, term, tags, first, after }) => {\n  const result = await doQuery(gql.searchUsers, {\n    memberCon: { ids, query: term, tags, first, after }\n  })\n  return _get(result, 'data.members', [])\n}\n\nexport const get = async ({ id }) => {\n  const result = await doQuery(gql.searchUsers, { memberCon: { ids: [~~id] } })\n  return _get(result, 'data.members.nodes[0]', undefined)\n}\n\nexport const upsert = async params => {\n  const statusId = _get(params, 'statusId')\n  const result = await doMutate(gql.updateMember, {\n    input: {\n      contactEmail: _get(params, 'contactEmail'),\n      displayName: _get(params, 'displayName'),\n      firstName: _get(params, 'firstName'),\n      id: ~~_get(params, 'id'),\n      lastName: _get(params, 'lastName'),\n      name: _get(params, 'name'),\n      slug: _get(params, 'slug'),\n      statusId: ~~statusId\n    }\n  })\n  return _get(result, 'data.updateMember', undefined)\n}\n\nexport const updateMemberSubset = params => {\n  return doMutate(gql.updateMemberSubset, {\n    input: {\n      birthday: params.birthday,\n      id: params.memberId,\n      legalLocaleId: params.legalLocaleId,\n      languageId: params.languageId,\n      timezoneId: params.timezoneId\n    }\n  })\n}\n\nexport const adjustTags = async ({ memberId, set, add, remove }) => {\n  const result = await doMutate(gql.adjustTags, {\n    input: { memberId, set, add, remove }\n  })\n  return _get(result, 'data.adjustTags.tags', undefined)\n}\n\nexport const getCredentials = async memberId => {\n  const result = await doQuery(gql.getMemberCredentials, {\n    input: { memberId: ~~memberId }\n  })\n  return _get(result, 'data.getMemberCredentials', undefined)\n}\n\nexport const getPhone = contactId => {\n  return doQuery(gql.getPhone, { input: { contactId } })\n    .then(res => _get(res, 'data.phoneNumberByContact[0]', {}))\n}\n\nexport const createPhone = ({ contactId, number, id }) => {\n  return doMutate(gql.createPhone, {\n    input: { contactId, number, id }\n  })\n}\n\nexport const updatePhone = ({ contactId, id, number }) => {\n  return doMutate(gql.updatePhone, { input: { contactId, id, number } })\n}\n\nexport const getAddress = async contactId => {\n  return doQuery(gql.getAddress, { addressByContactOrTenant: { contactId } })\n    .then(res => _get(res, 'data.addressByContactOrTenant[0]', {}))\n}\n\nexport const updateAddress = addressInput => {\n  return doMutate(gql.updateAddress, { addressInput })\n}\n\nexport const updateSlug = updateSlugInput => {\n  return doMutate(gql.updateSlug, { updateSlugInput })\n}\n\nexport const createSlug = createSlugInput => {\n  return doMutate(gql.createSlug, { createSlugInput })\n}\n"]}]}