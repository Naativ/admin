{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/payouts/PayoutsMember.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/payouts/PayoutsMember.vue","mtime":1574205294000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.array.find\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getMemberPayout } from '@/users/users.gql';\nimport { TenantsActions } from '@/tenants/TenantsStore';\nimport PayoutDialog from '@/components/PayoutDialog.vue';\nimport { mapGetters, mapState, mapActions } from 'vuex';\nimport { StoreGetters } from '@/store';\nexport default {\n  components: {\n    PayoutDialog: PayoutDialog\n  },\n  data: function data() {\n    return {\n      payouts: [],\n      headers: [{\n        text: 'Id',\n        value: 'id',\n        sortable: false\n      }, {\n        text: 'Amount',\n        value: 'amount',\n        sortable: false\n      }, {\n        text: 'Currency',\n        value: 'currency',\n        sortable: false\n      }, {\n        text: 'Note',\n        value: 'note',\n        sortable: false\n      }, {\n        text: 'Status',\n        value: 'status',\n        sortable: false\n      }, {\n        text: 'Created',\n        value: 'createdOn',\n        sortable: false\n      }],\n      addDialog: false,\n      integrationId: null,\n      supportedIntegrations: ['stripe_connect'],\n      loadingPayouts: false\n    };\n  },\n  mounted: function () {\n    var _mounted = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      var _this = this;\n\n      var integration;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(this.integrations.length === 0)) {\n                _context.next = 3;\n                break;\n              }\n\n              _context.next = 3;\n              return this.fetchTenantInfo();\n\n            case 3:\n              integration = this.integrations.find(function (i) {\n                return _this.supportedIntegrations.indexOf(i.key) >= 0;\n              });\n              this.integrationId = integration.id;\n              _context.next = 7;\n              return this.getPayoutHistory();\n\n            case 7:\n              this.payouts = _context.sent;\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }(),\n  methods: _objectSpread({}, mapActions({\n    fetchTenantInfo: TenantsActions.FETCH_TENANT_INFO\n  }), {\n    getPayoutHistory: function () {\n      var _getPayoutHistory = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var data;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.loadingPayouts = true;\n                _context2.next = 3;\n                return this.$apollo.query({\n                  query: getMemberPayout,\n                  variables: {\n                    ids: [this.id]\n                  },\n                  fetchPolicy: 'network-only'\n                });\n\n              case 3:\n                data = _context2.sent;\n                this.loadingPayouts = false;\n                return _context2.abrupt(\"return\", data.data.membersByIds[0].payouts);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getPayoutHistory() {\n        return _getPayoutHistory.apply(this, arguments);\n      }\n\n      return getPayoutHistory;\n    }(),\n    canWritePayout: function canWritePayout() {\n      return this.permissions.find(function (p) {\n        return p.id === 15;\n      });\n    },\n    submitted: function () {\n      var _submitted = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.getPayoutHistory();\n\n              case 2:\n                this.payouts = _context3.sent;\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function submitted() {\n        return _submitted.apply(this, arguments);\n      }\n\n      return submitted;\n    }(),\n    addPayout: function addPayout() {\n      this.addDialog = true;\n    },\n    closeDialog: function closeDialog() {\n      this.addDialog = false;\n    }\n  }),\n  computed: _objectSpread({}, mapState({\n    integrations: function integrations(state) {\n      return state.tenants.info.integrations;\n    }\n  }), mapGetters({\n    permissions: StoreGetters.permissions\n  }), {\n    id: function id() {\n      return ~~this.$route.params.id;\n    }\n  }),\n  beforeRouteUpdate: function () {\n    var _beforeRouteUpdate = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee4(to, from, next) {\n      var id;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              id = to.params.id;\n\n              if (!id) {\n                _context4.next = 5;\n                break;\n              }\n\n              _context4.next = 4;\n              return this.getPayoutHistory();\n\n            case 4:\n              this.payouts = _context4.sent;\n\n            case 5:\n              next();\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function beforeRouteUpdate(_x, _x2, _x3) {\n      return _beforeRouteUpdate.apply(this, arguments);\n    }\n\n    return beforeRouteUpdate;\n  }()\n};",{"version":3,"sources":["PayoutsMember.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-layout column ma-5>\n    <h1>Payouts</h1>\n    <v-btn\n      @click=\"addPayout\"\n      color=\"pink\"\n      dark\n      absolute\n      left\n      fab\n      v-if=\"canWritePayout()\"\n    >\n      <v-icon>add</v-icon>\n    </v-btn>\n\n    <v-data-table :items=\"payouts\" :headers=\"headers\" hide-actions :loading=\"loadingPayouts\">\n      <template slot=\"items\" slot-scope=\"props\">\n        <!-- <tr @click=\"openUnit(props.item.id)\"> -->\n        <td class=\"text-xs\">{{ props.item.id}}</td>\n        <td class=\"text-xs\">{{ (props.item.amount / 100) | toCurrency(props.item.currency)}}</td>\n        <td class=\"text-xs\">{{ props.item.currency}}</td>\n        <td class=\"text-xs\">{{ props.item.note}}</td>\n        <td class=\"text-xs\">{{ props.item.status}}</td>\n        <td class=\"text-xs\">{{ props.item.createdOn}}</td>\n        <!-- </tr> -->\n      </template>\n    </v-data-table>\n    <PayoutDialog :addDialog=\"addDialog\" @closeDialog=\"closeDialog\" @submitted=\"submitted\" :integrationId=\"integrationId\"/>\n  </v-layout>\n</template>\n\n<script>\nimport { getMemberPayout } from '@/users/users.gql'\nimport { TenantsActions } from '@/tenants/TenantsStore'\nimport PayoutDialog from '@/components/PayoutDialog.vue'\nimport { mapGetters, mapState, mapActions } from 'vuex'\nimport { StoreGetters } from '@/store'\n\nexport default {\n  components: {\n    PayoutDialog\n  },\n  data () {\n    return {\n      payouts: [],\n      headers: [\n        { text: 'Id', value: 'id', sortable: false },\n        { text: 'Amount', value: 'amount', sortable: false },\n        { text: 'Currency', value: 'currency', sortable: false },\n        { text: 'Note', value: 'note', sortable: false },\n        { text: 'Status', value: 'status', sortable: false },\n        { text: 'Created', value: 'createdOn', sortable: false }\n      ],\n      addDialog: false,\n      integrationId: null,\n      supportedIntegrations: ['stripe_connect'],\n      loadingPayouts: false\n    }\n  },\n  async mounted () {\n    if (this.integrations.length === 0) {\n      await this.fetchTenantInfo()\n    }\n    const integration = this.integrations.find(i => {\n      return this.supportedIntegrations.indexOf(i.key) >= 0\n    })\n    this.integrationId = integration.id\n    this.payouts = await this.getPayoutHistory()\n  },\n  methods: {\n    ...mapActions({\n      fetchTenantInfo: TenantsActions.FETCH_TENANT_INFO\n    }),\n    async getPayoutHistory () {\n      this.loadingPayouts = true\n      const data = await this.$apollo.query({\n        query: getMemberPayout,\n        variables: {\n          ids: [this.id]\n        },\n        fetchPolicy: 'network-only'\n      })\n      this.loadingPayouts = false\n      return data.data.membersByIds[0].payouts\n    },\n    canWritePayout () {\n      return this.permissions.find(p => p.id === 15)\n    },\n    async submitted () {\n      this.payouts = await this.getPayoutHistory()\n    },\n    addPayout () {\n      this.addDialog = true\n    },\n    closeDialog () {\n      this.addDialog = false\n    }\n  },\n  computed: {\n    ...mapState({\n      integrations: state => {\n        return state.tenants.info.integrations\n      }\n    }),\n    ...mapGetters({\n      permissions: StoreGetters.permissions\n    }),\n    id () { return ~~this.$route.params.id }\n  },\n  async beforeRouteUpdate (to, from, next) {\n    const { id } = to.params\n    if (id) {\n      this.payouts = await this.getPayoutHistory()\n    }\n    next()\n  }\n}\n</script>\n\n<style>\n.addbtn.sm {\n  top: -5px !important;\n}\n.addbtn {\n  top: 15px;\n}\n</style>\n"],"sourceRoot":"src/views/payouts"}]}