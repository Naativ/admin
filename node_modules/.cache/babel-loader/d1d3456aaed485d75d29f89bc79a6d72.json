{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/Reports.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/Reports.vue","mtime":1570835920000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _taggedTemplateLiteral from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n            mutation Report($input: ReportInput) {\\n              reportExecute(input:$input){\\n                id\\n                reportId\\n                rowCount\\n                name\\n                description\\n                url\\n                createdOn\\n              }\\n            }\\n          \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as R from 'ramda'; // import { reports } from '@/api/reports'\n\nimport ReportParameterInput from '@/components/ReportParameterInput.vue';\nimport GET_REPORTS from '@/graphql/Reports.gql';\nimport GET_REPORT_EXECUTIONS from '@/graphql/ReportExecutions.gql';\nimport gql from 'graphql-tag';\nexport default {\n  name: 'Reports',\n  components: {\n    ReportParameterInput: ReportParameterInput\n  },\n  methods: {\n    runReport: function () {\n      var _runReport = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(report) {\n        var params, result, exe, jwt, url, err;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                params = this.inputs[report.id] || {}; // const tenantId = this.$store.state.user.principal.tenantId\n\n                this.locked = true;\n                _context.prev = 2;\n                _context.next = 5;\n                return this.$apollo.mutate({\n                  mutation: gql(_templateObject()),\n                  variables: {\n                    input: {\n                      id: report.id,\n                      parameters: params\n                    }\n                  },\n                  fetchPolicy: 'no-cache'\n                });\n\n              case 5:\n                result = _context.sent;\n                exe = R.path(['data', 'reportExecute'], result);\n\n                if (!exe) {\n                  _context.next = 13;\n                  break;\n                }\n\n                // TODO clean this up. use cookies?\n                jwt = R.path(['$store', 'state', 'user', 'jwt'], this);\n                url = \"\".concat(exe.url).concat(jwt ? '?__jwt=' + jwt : '');\n                window.open(url, '_blank');\n                _context.next = 16;\n                break;\n\n              case 13:\n                err = new Error('No report execution returned');\n                err.gql = result;\n                throw err;\n\n              case 16:\n                _context.next = 22;\n                break;\n\n              case 18:\n                _context.prev = 18;\n                _context.t0 = _context[\"catch\"](2);\n                console.warn('error running report', _context.t0);\n                window.alert('Something has gone very wrong. Please contact support'); // error handling here!\n\n              case 22:\n                _context.prev = 22;\n                this.locked = false;\n                return _context.finish(22);\n\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 18, 22, 25]]);\n      }));\n\n      function runReport(_x) {\n        return _runReport.apply(this, arguments);\n      }\n\n      return runReport;\n    }(),\n    getReportExecutions: function () {\n      var _getReportExecutions = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(report) {\n        var _ref, data;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return this.$apollo.query({\n                  query: GET_REPORT_EXECUTIONS,\n                  variables: {\n                    input: {\n                      reportIds: [report.id],\n                      limit: 5\n                    }\n                  },\n                  fetchPolicy: 'network-only'\n                });\n\n              case 3:\n                _ref = _context2.sent;\n                data = _ref.data;\n                this.reportExecutions = data.reportExecutions;\n                _context2.next = 11;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.warn('Error grabbing report execution', _context2.t0);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 8]]);\n      }));\n\n      function getReportExecutions(_x2) {\n        return _getReportExecutions.apply(this, arguments);\n      }\n\n      return getReportExecutions;\n    }(),\n    expandRow: function () {\n      var _expandRow = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(props) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.reportExecutions = [];\n                props.expanded = !props.expanded;\n\n                if (!props.expanded) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                this.loading = true;\n                _context3.next = 6;\n                return this.getReportExecutions(props.item);\n\n              case 6:\n                this.loading = false;\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function expandRow(_x3) {\n        return _expandRow.apply(this, arguments);\n      }\n\n      return expandRow;\n    }(),\n    paramChanged: function paramChanged(report, _ref2) {\n      var parameter = _ref2.parameter,\n          value = _ref2.value;\n      var input = this.inputs[report.id] = this.inputs[report.id] || {};\n      input[parameter.key] = value;\n    }\n  },\n  data: function data() {\n    return {\n      locked: false,\n      headers: [{\n        text: 'ID',\n        value: 'id'\n      }, {\n        text: 'Name',\n        value: 'name'\n      }, {\n        text: 'Description',\n        value: 'description',\n        sortable: false\n      }, {\n        text: 'Parameters',\n        value: 'params',\n        sortable: false\n      }],\n      items: [],\n      inputs: {},\n      reportExecutions: [],\n      loading: false\n    };\n  },\n  apollo: {\n    items: {\n      query: GET_REPORTS,\n      variables: function variables() {\n        return {\n          input: {}\n        };\n      },\n      update: function update(res) {\n        this.inputs = {};\n        return res.reports;\n      }\n    }\n  }\n};",{"version":3,"sources":["Reports.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-flex xs12>\n    <div class=\"reports main-container\">\n      <h1>Reports</h1>\n    </div>\n    <v-data-table :headers=\"headers\" :items=\"items\" hide-actions class=\"elevation-1\">\n      <template slot=\"items\" slot-scope=\"props\">\n        <tr @click=\"expandRow(props)\">\n          <td>{{ props.item.id }}</td>\n          <td>{{ props.item.name }}</td>\n          <td>{{ props.item.description }}</td>\n          <td>\n            {{ props.item.parameters.length }}\n            {{ props.item.parameters.length == 1 ? 'Parameter' : 'Parameters' }}\n          </td>\n        </tr>\n      </template>\n      <template slot=\"expand\" slot-scope=\"props\">\n        <v-container grid-list-md fluid class=\"drawer\">\n          <v-layout row wrap>\n            <v-flex xs4 px-2 py-4>\n              <h3>{{props.item.name}}</h3>\n              <p>{{props.item.description || 'No Description Available'}}</p>\n            </v-flex>\n            <v-flex xs7>\n              <v-layout row wrap>\n                <v-flex xs4 v-for=\"param in props.item.parameters\" :key=\"param.id\">\n                  <ReportParameterInput\n                    :parameter=\"param\"\n                    @change=\"paramChanged(props.item, $event)\"\n                  />\n                </v-flex>\n              </v-layout>\n            </v-flex>\n            <v-flex xs1 py-4>\n              <div class=\"text-xs-center\">\n                <v-btn\n                  fab\n                  dark\n                  small\n                  color=\"primary\"\n                  @click=\"runReport(props.item)\"\n                  :disabled=\"locked\"\n                >\n                  <v-icon dark v-if=\"!locked\">play_arrow</v-icon>\n                  <v-icon dark v-if=\"locked\">pause</v-icon>\n                </v-btn>\n              </div>\n            </v-flex>\n          </v-layout>\n            <v-layout>\n          <v-layout column v-if=\"reportExecutions.length > 0 && !loading\">\n            <v-flex xs4 px-2 py-4>\n              <h3>Previous Reports</h3>\n            </v-flex>\n              <template v-for=\"(data, index) in reportExecutions\">\n                <v-layout row :key=\"index\">\n                  <v-text-field\n                    label=\"Date generated\"\n                    v-model=\"reportExecutions[index].createdOn\"\n                    disabled\n                    class=\"report\"\n                  />\n                  <template v-for=\"(item, i) in reportExecutions[index].parameters\">\n                    <v-text-field :key=\"`${i}-param-${index}`\"\n                      :label=\"i\"\n                      v-model=\"reportExecutions[index].parameters[i]\"\n                      disabled\n                      class=\"report\"\n                    />\n                  </template>\n                  <a class=\"download\" :href=\"reportExecutions[index].url\">Download</a>\n                </v-layout>\n              </template>\n            </v-layout>\n            <v-layout v-else-if=\"loading\">\n              <v-progress-circular class=\"loader\" indeterminate :size=\"50\" :width=\"5\" color=\"black\"></v-progress-circular>\n            </v-layout>\n            <v-layout v-else>\n              <v-flex xs4 px-2 py-4>\n                <h3>No previously run reports</h3>\n              </v-flex>\n            </v-layout>\n          </v-layout>\n        </v-container>\n      </template>\n    </v-data-table>\n  </v-flex>\n</template>\n<script>\nimport * as R from 'ramda'\n// import { reports } from '@/api/reports'\nimport ReportParameterInput from '@/components/ReportParameterInput.vue'\nimport GET_REPORTS from '@/graphql/Reports.gql'\nimport GET_REPORT_EXECUTIONS from '@/graphql/ReportExecutions.gql'\nimport gql from 'graphql-tag'\n\nexport default {\n  name: 'Reports',\n  components: {\n    ReportParameterInput\n  },\n  methods: {\n    async runReport(report) {\n      const params = this.inputs[report.id] || {}\n      // const tenantId = this.$store.state.user.principal.tenantId\n      this.locked = true\n      try {\n        // await reports.run(report, tenantId, params)\n        const result = await this.$apollo.mutate({\n          mutation: gql`\n            mutation Report($input: ReportInput) {\n              reportExecute(input:$input){\n                id\n                reportId\n                rowCount\n                name\n                description\n                url\n                createdOn\n              }\n            }\n          `,\n          variables: { input: {\n            id: report.id,\n            parameters: params\n          } },\n          fetchPolicy: 'no-cache'\n        })\n        const exe = R.path(['data', 'reportExecute'], result)\n        if (exe) {\n          // TODO clean this up. use cookies?\n          const jwt = R.path(['$store', 'state', 'user', 'jwt'], this)\n          const url = `${exe.url}${jwt ? '?__jwt=' + jwt : ''}`\n          window.open(url, '_blank')\n        } else {\n          const err = new Error('No report execution returned')\n          err.gql = result\n          throw err\n        }\n      } catch (err) {\n        console.warn('error running report', err)\n        window.alert('Something has gone very wrong. Please contact support')\n        // error handling here!\n      } finally {\n        this.locked = false\n      }\n    },\n    async getReportExecutions(report) {\n      try {\n        const { data } = await this.$apollo.query({\n          query: GET_REPORT_EXECUTIONS,\n          variables: {\n            input: {\n              reportIds: [report.id],\n              limit: 5\n            }\n          },\n          fetchPolicy: 'network-only'\n        })\n        this.reportExecutions = data.reportExecutions\n      } catch (err) {\n        console.warn('Error grabbing report execution', err)\n      }\n    },\n    async expandRow(props) {\n      this.reportExecutions = []\n      props.expanded = !props.expanded\n      if (props.expanded) {\n        this.loading = true\n        await this.getReportExecutions(props.item)\n        this.loading = false\n      }\n    },\n    paramChanged(report, { parameter, value }) {\n      const input = (this.inputs[report.id] = this.inputs[report.id] || {})\n      input[parameter.key] = value\n    }\n  },\n  data() {\n    return {\n      locked: false,\n      headers: [\n        { text: 'ID', value: 'id' },\n        { text: 'Name', value: 'name' },\n        { text: 'Description', value: 'description', sortable: false },\n        { text: 'Parameters', value: 'params', sortable: false }\n      ],\n      items: [],\n      inputs: {},\n      reportExecutions: [],\n      loading: false\n    }\n  },\n  apollo: {\n    items: {\n      query: GET_REPORTS,\n      variables() {\n        return {\n          input: {}\n        }\n      },\n      update(res) {\n        this.inputs = {}\n        return res.reports\n      }\n    }\n  }\n}\n</script>\n\n<style>\n.drawer {\n  background: #eeeeef !important;\n}\n\n.report {\n  margin: 0 10px;\n}\n\n.download {\n  margin: auto 10px;\n}\n\n.loader {\n  margin: auto;\n}\n</style>\n"],"sourceRoot":"src/views"}]}