{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/Members.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/Members.vue","mtime":1581353753561},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.find\";\nimport _toConsumableArray from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport MonthSelector from '@/components/MonthSelector';\nimport CreateMemberDialog from '@/components/CreateMemberDialog';\nimport MemberSearch from \"../components/MemberSearch\";\nimport ChangeSponsorDialog from '@/components/ChangeSponsorDialog';\nimport TeamCard from \"../components/TeamCard\";\nimport getTeamByMemberId from '@/graphql/GetTeam';\nimport MONTHLY_STATS_QUERY from '@/graphql/GetMonthlyStats.gql';\nimport { COMP_STATS_QUERY } from '@/users/members.gql.js';\nimport CREATE_MEMBER from '@/graphql/CreateMember.gql';\nimport SET_EMAIL from '@/graphql/SetEmail.gql';\nimport MEMBER_BY_ID from '@/graphql/MemberById.gql';\nimport { getHierarchies as _getHierarchies } from '@/graphql/MemberUpline.gql.js';\nimport { find, defaultTo, pathOr } from 'ramda';\nimport { mapState } from 'vuex';\nimport { Promise } from 'q';\nvar TEAM_LIMIT = 300;\nexport default {\n  name: 'Team',\n  mounted: function () {\n    var _mounted = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.getHierarchies();\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }(),\n  computed: _objectSpread({\n    cards: function cards() {\n      return pathOr([], 'results.target.upline'.split('.'), this); // .filter(e => e.id !== this.currentId)\n    },\n    breadcrumbs: function breadcrumbs() {\n      var breadcrumbs = [];\n      var routeId = this.$route.params.id;\n      this.upline.forEach(function (row) {\n        var obj = {};\n        obj.text = row.displayName;\n        obj.disabled = true;\n\n        if (parseInt(routeId) !== row.id) {\n          obj.to = '/members/' + row.id + '/team';\n          obj.disabled = false;\n        }\n\n        breadcrumbs.push(obj);\n      });\n      return breadcrumbs;\n    },\n    currentId: {\n      get: function get() {\n        var id = this.$route.params.id;\n        return parseInt(id);\n      },\n      set: function set() {}\n    }\n  }, mapState({\n    state: function state(_state) {\n      return _state;\n    }\n  })),\n  watch: {\n    results: function results(newVal) {\n      if (!newVal || !newVal.team) {\n        return;\n      }\n\n      var team = newVal.team,\n          target = newVal.target;\n      this.teamIdArr = [].concat(_toConsumableArray(team.map(function (t) {\n        return t.memberId;\n      })), [target.memberId]);\n    },\n    compStats: function compStats(newVal) {\n      if (!newVal || !newVal.length || !this.teamIdArr || !this.teamIdArr.length) {\n        return;\n      }\n\n      var hashTable = {};\n      var teamIdArr = this.teamIdArr;\n      var newValIdArr = newVal.map(function (nv) {\n        return nv.memberId;\n      });\n      teamIdArr.forEach(function (tId) {\n        var newValIndex = newValIdArr.indexOf(tId);\n        hashTable[tId] = newValIndex;\n      });\n      this.statsHashTable = _objectSpread({}, hashTable);\n    }\n  },\n  beforeUpdate: function beforeUpdate() {\n    if (this.lineage.length < 1 && this.results.target) {\n      this.lineage.push(this.results.target);\n    }\n  },\n  data: function data() {\n    return {\n      pathOr: pathOr,\n      displayName: 'root',\n      lineage: [],\n      month: new Date().getMonth() + 1,\n      year: new Date().getFullYear(),\n      results: {\n        target: undefined,\n        team: []\n      },\n      upline: [],\n      selection: '',\n      stats: [],\n      snackbar: false,\n      snackbarMessage: '',\n      resetLoading: false,\n      registerLoading: false,\n      dialog: false,\n      sponsorChange: {\n        show: false\n      },\n      emailDialog: {\n        memberId: undefined,\n        showing: false,\n        email: ''\n      },\n      creatingMember: false,\n      createMember: {\n        firstName: '',\n        lastName: '',\n        email: ''\n      },\n      teamIdArr: [],\n      statsHashTable: {}\n    };\n  },\n  components: {\n    TeamCard: TeamCard,\n    MonthSelector: MonthSelector,\n    MemberSearch: MemberSearch,\n    ChangeSponsorDialog: ChangeSponsorDialog,\n    CreateMemberDialog: CreateMemberDialog\n  },\n  methods: {\n    getHierarchies: function () {\n      var _getHierarchies2 = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var res, data;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.$apollo.query({\n                  query: _getHierarchies,\n                  variables: {\n                    condition: {\n                      id: ~~this.$route.params.id\n                    }\n                  },\n                  fetchPolicy: 'network-only'\n                });\n\n              case 2:\n                res = _context2.sent;\n                data = pathOr(undefined, ['data', 'allHierarchies', 'nodes'], res);\n                this.upline = data[0].upline;\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getHierarchies() {\n        return _getHierarchies2.apply(this, arguments);\n      }\n\n      return getHierarchies;\n    }(),\n    click: function click(index) {\n      var _this = this;\n\n      var val = this.upline.find(function (e) {\n        return e.displayName === _this.selection;\n      });\n      this.$router.push('/members/' + val.id + '/team');\n    },\n    showCreate: function showCreate() {\n      this.creatingMember = true;\n    },\n    close: function close() {\n      this.creatingMember = false;\n    },\n    toggleSponsorChange: function toggleSponsorChange() {\n      this.sponsorChange.show = !this.sponsorChange.show;\n    },\n    sponsorChangeClose: function sponsorChangeClose(cfg) {\n      if (cfg && cfg.message) {\n        this.snackbarMessage = cfg.message;\n        this.snackbar = true;\n      }\n\n      this.sponsorChange.show = false;\n    },\n    setEmail: function setEmail(memberId) {\n      this.emailDialog = {\n        memberId: memberId,\n        showing: true,\n        email: ''\n      };\n    },\n    doSetEmail: function doSetEmail() {\n      var _this2 = this;\n\n      var tenantId = this.$store.state.user.principal.tenantId;\n      var _this$emailDialog = this.emailDialog,\n          email = _this$emailDialog.email,\n          memberId = _this$emailDialog.memberId;\n      this.$apollo.mutate({\n        mutation: SET_EMAIL,\n        variables: {\n          SetEmailInput: {\n            tenantId: tenantId,\n            email: email,\n            memberId: memberId\n          }\n        },\n        update: function () {\n          var _update = _asyncToGenerator(\n          /*#__PURE__*/\n          regeneratorRuntime.mark(function _callee3(store, _ref) {\n            var member;\n            return regeneratorRuntime.wrap(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    member = _ref.data.setEmail.member;\n                    _this2.snackbarMessage = 'Successfully set email ' + member.contactEmail;\n                    _this2.snackbar = true;\n                    _this2.emailDialog.showing = false;\n\n                    _this2.$apollo.queries.results.refetch();\n\n                    _this2.emailDialog = {\n                      memberId: undefined,\n                      showing: false,\n                      email: '' // TODO navigate to them?\n                      // TODO Set to current target sponsor?\n\n                    };\n\n                  case 6:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee3);\n          }));\n\n          function update(_x, _x2) {\n            return _update.apply(this, arguments);\n          }\n\n          return update;\n        }()\n      }).catch(function (error) {\n        console.error('errored', error);\n\n        _this2.onError({\n          response: {\n            data: {\n              errors: [error]\n            }\n          }\n        });\n      });\n    },\n    clickCreate: function clickCreate() {\n      var _this3 = this;\n\n      var _this$createMember = this.createMember,\n          firstName = _this$createMember.firstName,\n          lastName = _this$createMember.lastName,\n          email = _this$createMember.email;\n      var tenantId = this.$store.state.user.principal.tenantId;\n      var that = this;\n      this.$apollo.mutate({\n        mutation: CREATE_MEMBER,\n        variables: {\n          createMemberInput: {\n            tenantId: tenantId,\n            firstName: firstName,\n            lastName: lastName,\n            email: email\n          }\n        },\n        update: function () {\n          var _update2 = _asyncToGenerator(\n          /*#__PURE__*/\n          regeneratorRuntime.mark(function _callee4(store, _ref2) {\n            var member;\n            return regeneratorRuntime.wrap(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    member = _ref2.data.createMember.member;\n                    that.snackbarMessage = 'Successfully created ' + member.name;\n                    _this3.snackbar = true;\n                    _context4.next = 5;\n                    return new Promise(function (resolve) {\n                      return setTimeout(resolve, 2000);\n                    });\n\n                  case 5:\n                    that.creatingMember = false;\n                    _context4.next = 8;\n                    return that.$apollo.queries.results.refetch();\n\n                  case 8:\n                    that.createMember = {\n                      firstName: '',\n                      lastName: '',\n                      email: ''\n                    };\n\n                    _this3.$router.push(\"/members/\".concat(member.id));\n\n                  case 10:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee4);\n          }));\n\n          function update(_x3, _x4) {\n            return _update2.apply(this, arguments);\n          }\n\n          return update;\n        }()\n      }).catch(function (error) {\n        console.error('errored', error);\n        that.onError({\n          response: {\n            data: {\n              errors: [error]\n            }\n          }\n        });\n      }); // */\n    },\n    drillDown: function drillDown(user) {\n      var newPath = \"/members/\".concat(user.memberId == null ? '' : user.memberId, \"/team\");\n      this.$router.push(newPath);\n      this.getHierarchies();\n    },\n    updateLineage: function updateLineage(user, index) {\n      var newPath = \"/members/\".concat(user.memberId == null ? '' : user.memberId, \"/team\");\n      this.lineage = this.lineage.slice(0, index + 1);\n      this.$router.push(newPath);\n    },\n    viewMember: function viewMember(memberId) {\n      var newPath = \"/members/\".concat(memberId == null ? '' : memberId, \"/team\");\n      this.lineage.length = 0;\n      this.$router.push(newPath);\n    },\n    getStats: function getStats(target) {\n      return defaultTo({}, find(function (_) {\n        return target && _.sellerId === target.memberId;\n      }, this.stats));\n    },\n    dateChanged: function dateChanged(_ref3) {\n      var date = _ref3.date;\n      var dateSplit = date.split('-');\n      this.month = dateSplit[1];\n      this.year = dateSplit[0];\n    },\n    onSuccess: function onSuccess(message) {\n      this.snackbar = true;\n      this.snackbarMessage = message;\n    },\n    onError: function onError(errorMessage) {\n      if (typeof errorMessage === 'string') {\n        this.error = errorMessage;\n      } else {\n        var errors = pathOr({}, ['response', 'data', 'errors'], errorMessage);\n        this.snackbarMessage = pathOr('There seems to be a problem. Please try again later or contact customer support.', ['message'], errors[0]);\n      }\n\n      this.snackbar = true;\n    }\n  },\n  apollo: {\n    displayName: {\n      query: MEMBER_BY_ID,\n      variables: function variables() {\n        return {\n          condition: {\n            ids: [this.currentId]\n          }\n        };\n      },\n      update: function update(_ref4) {\n        var members = _ref4.members;\n        return members.nodes[0] ? members.nodes[0].displayName : 'root';\n      },\n      skip: function skip() {\n        return this.currentId === null;\n      }\n    },\n    results: function results() {\n      var result = getTeamByMemberId('currentId', this.$store.state.user.principal.tenantId, TEAM_LIMIT);\n      return result;\n    },\n    stats: {\n      query: MONTHLY_STATS_QUERY,\n      variables: function variables() {\n        return {\n          targetCondition: {\n            tenantId: this.$store.state.user.principal.tenantId,\n            sellerId: this.currentId,\n            month: ~~this.month,\n            year: ~~this.year\n          },\n          firstLevelCondition: {\n            tenantId: this.$store.state.user.principal.tenantId,\n            sponsorId: this.currentId,\n            month: ~~this.month,\n            year: ~~this.year\n          }\n        };\n      },\n      update: function update(_ref5) {\n        var targetStats = _ref5.targetStats,\n            firstLevelStats = _ref5.firstLevelStats;\n        return targetStats.nodes.concat(firstLevelStats.nodes);\n      }\n    },\n    compStats: {\n      query: COMP_STATS_QUERY,\n      variables: function variables() {\n        return {\n          input: {\n            year: this.year,\n            month: this.month,\n            membersIn: this.teamIdArr\n          }\n        };\n      },\n      update: function update(_ref6) {\n        var results = _ref6.compStatsQuery.results;\n        return results;\n      }\n    }\n  }\n};",{"version":3,"sources":["Members.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-flex xs12>\n    <div class=\"team main-container\">\n      <h1 v-bind:target=\"currentId\">Team</h1>\n      <v-layout row wrap>\n        <v-flex xs4 md3 lg2>\n          <MonthSelector :year=\"year\" :month=\"month\" @date-changed=\"dateChanged\"/>\n          </v-flex>\n          <v-flex xs4 md3 lg2>\n          <v-menu right>\n            <template slot=\"activator\">\n            <v-tooltip top>\n            <v-btn slot=\"activator\" icon>\n              <v-icon class=\"borderIcon\">more_vert</v-icon>\n            </v-btn>\n            <span>Actions</span>\n            </v-tooltip>\n            </template>\n            <v-list class=\"borderMenu\">\n              <v-list-tile @click=\"showCreate\">\n                <v-list-tile-title>Create a Member</v-list-tile-title>\n              </v-list-tile>\n              <v-divider/>\n              <v-list-tile @click=\"toggleSponsorChange\">\n                <v-list-tile-title>Change Sponsors</v-list-tile-title>\n              </v-list-tile>\n            </v-list>\n          </v-menu>\n          </v-flex>\n      </v-layout>\n      <div>\n        <v-breadcrumbs :items=\"breadcrumbs\" divider=\" / \"></v-breadcrumbs>\n        <div v-if=\"!$apollo.queries.results.loading\">\n          <v-layout row wrap>\n            <v-flex lg4 v-if=\"results && results.target\">\n              <TeamCard\n                :compStats =\"compStats[statsHashTable[results.target.memberId]]\"\n                :active=\"true\"\n                :loading=\"$apollo.queries.stats.loading\"\n                @drillDown=\"drillDown\"\n                @viewMember=\"viewMember\"\n                @onSuccess=\"onSuccess\"\n                @onError=\"onError\"\n                :user=\"results.target\"\n                :actions=\"true\"\n                :stats=\"getStats(results.target)\"\n                hideButton\n              />\n            </v-flex>\n            <v-flex lg4 v-for=\"i in results.team\" :key=\"i.memberId\">\n              <TeamCard\n                :compStats =\"compStats[statsHashTable[i.memberId]]\"\n                :loading=\"$apollo.queries.stats.loading\"\n                @drillDown=\"drillDown\"\n                @viewMember=\"viewMember\"\n                @onSuccess=\"onSuccess\"\n                @onError=\"onError\"\n                :user=\"i\"\n                :actions=\"true\"\n                :stats=\"getStats(i)\"\n              />\n            </v-flex>\n          </v-layout>\n        </div>\n        <div v-if=\"$apollo.queries.results.loading\">\n          <v-progress-circular indeterminate :size=\"70\" :width=\"7\" color=\"black\"></v-progress-circular>\n        </div>\n      </div>\n      <v-snackbar :timeout=\"8000\" v-model=\"snackbar\">\n        {{snackbarMessage}}\n        <v-btn flat color=\"pink\" @click.native=\"snackbar = false\">Close</v-btn>\n      </v-snackbar>\n      <CreateMemberDialog\n        :creatingMember=\"creatingMember\"\n        :createMember=\"createMember\"\n        @clickCreate=\"clickCreate\"\n        @close=\"close\"\n      />\n      <v-dialog v-model=\"emailDialog.showing\">\n        <v-card>\n          <v-card-text>\n            <v-form>\n              <v-text-field label=\"E-mail\" v-model=\"emailDialog.email\" required></v-text-field>\n              <v-btn color=\"success\" @click=\"doSetEmail()\">Set Email</v-btn>\n            </v-form>\n          </v-card-text>\n        </v-card>\n      </v-dialog>\n      <ChangeSponsorDialog :showing=\"sponsorChange.show\" @close=\"sponsorChangeClose\"/>\n    </div>\n  </v-flex>\n</template>\n\n<script>\nimport MonthSelector from '@/components/MonthSelector'\nimport CreateMemberDialog from '@/components/CreateMemberDialog'\nimport MemberSearch from '../components/MemberSearch'\nimport ChangeSponsorDialog from '@/components/ChangeSponsorDialog'\nimport TeamCard from '../components/TeamCard'\nimport getTeamByMemberId from '@/graphql/GetTeam'\nimport MONTHLY_STATS_QUERY from '@/graphql/GetMonthlyStats.gql'\nimport { COMP_STATS_QUERY } from '@/users/members.gql.js'\n\nimport CREATE_MEMBER from '@/graphql/CreateMember.gql'\nimport SET_EMAIL from '@/graphql/SetEmail.gql'\nimport MEMBER_BY_ID from '@/graphql/MemberById.gql'\nimport { getHierarchies } from '@/graphql/MemberUpline.gql.js'\nimport { find, defaultTo, pathOr } from 'ramda'\nimport { mapState } from 'vuex'\nimport { Promise } from 'q'\n\nconst TEAM_LIMIT = 300\n\nexport default {\n  name: 'Team',\n  async mounted() {\n    this.getHierarchies()\n  },\n  computed: {\n    cards() {\n      return pathOr([], 'results.target.upline'.split('.'), this) // .filter(e => e.id !== this.currentId)\n    },\n    breadcrumbs() {\n      let breadcrumbs = []\n      const routeId = this.$route.params.id\n      this.upline.forEach(row => {\n        let obj = {}\n        obj.text = row.displayName\n        obj.disabled = true\n        if (parseInt(routeId) !== row.id) {\n          obj.to = '/members/' + row.id + '/team'\n          obj.disabled = false\n        }\n        breadcrumbs.push(obj)\n      })\n      return breadcrumbs\n    },\n    currentId: {\n      get: function () {\n        const id = this.$route.params.id\n        return parseInt(id)\n      },\n      set: function () {\n      }\n    },\n    ...mapState({ state: state => state })\n  },\n  watch: {\n    results(newVal) {\n      if (!newVal || !newVal.team) {\n        return\n      }\n\n      const { team, target } = newVal\n\n      this.teamIdArr = [...team.map(t => t.memberId), target.memberId]\n    },\n    compStats(newVal) {\n      if (!newVal || !newVal.length || !this.teamIdArr || !this.teamIdArr.length) {\n        return\n      }\n\n      let hashTable = {}\n      const { teamIdArr } = this\n      const newValIdArr = newVal.map(nv => nv.memberId)\n\n      teamIdArr.forEach(tId => {\n        const newValIndex = newValIdArr.indexOf(tId)\n        hashTable[tId] = newValIndex\n      })\n\n      this.statsHashTable = { ...hashTable }\n    }\n  },\n  beforeUpdate() {\n    if (this.lineage.length < 1 && this.results.target) {\n      this.lineage.push(this.results.target)\n    }\n  },\n  data: () => ({\n    pathOr,\n    displayName: 'root',\n    lineage: [],\n    month: new Date().getMonth() + 1,\n    year: new Date().getFullYear(),\n    results: {\n      target: undefined,\n      team: []\n    },\n    upline: [],\n    selection: '',\n    stats: [],\n    snackbar: false,\n    snackbarMessage: '',\n    resetLoading: false,\n    registerLoading: false,\n    dialog: false,\n    sponsorChange: {\n      show: false\n    },\n    emailDialog: {\n      memberId: undefined,\n      showing: false,\n      email: ''\n    },\n    creatingMember: false,\n    createMember: {\n      firstName: '',\n      lastName: '',\n      email: ''\n    },\n    teamIdArr: [],\n    statsHashTable: {}\n  }),\n  components: {\n    TeamCard,\n    MonthSelector,\n    MemberSearch,\n    ChangeSponsorDialog,\n    CreateMemberDialog\n  },\n  methods: {\n    async getHierarchies () {\n      const res = await this.$apollo.query({\n        query: getHierarchies,\n        variables: {\n          condition: { id: ~~this.$route.params.id }\n        },\n        fetchPolicy: 'network-only'\n      })\n      const data = pathOr(undefined, ['data', 'allHierarchies', 'nodes'], res)\n      this.upline = data[0].upline\n    },\n    click(index) {\n      const val = this.upline.find(e => e.displayName === this.selection)\n      this.$router.push('/members/' + val.id + '/team')\n    },\n    showCreate() {\n      this.creatingMember = true\n    },\n    close() {\n      this.creatingMember = false\n    },\n    toggleSponsorChange() {\n      this.sponsorChange.show = !this.sponsorChange.show\n    },\n    sponsorChangeClose(cfg) {\n      if (cfg && cfg.message) {\n        this.snackbarMessage = cfg.message\n        this.snackbar = true\n      }\n      this.sponsorChange.show = false\n    },\n    setEmail(memberId) {\n      this.emailDialog = {\n        memberId,\n        showing: true,\n        email: ''\n      }\n    },\n    doSetEmail() {\n      const { tenantId } = this.$store.state.user.principal\n      const { email, memberId } = this.emailDialog\n\n      this.$apollo\n        .mutate({\n          mutation: SET_EMAIL,\n          variables: {\n            SetEmailInput: {\n              tenantId,\n              email,\n              memberId\n            }\n          },\n          update: async (\n            store,\n            {\n              data: {\n                setEmail: { member }\n              }\n            }\n          ) => {\n            this.snackbarMessage =\n              'Successfully set email ' + member.contactEmail\n            this.snackbar = true\n            this.emailDialog.showing = false\n            this.$apollo.queries.results.refetch()\n            this.emailDialog = {\n              memberId: undefined,\n              showing: false,\n              email: ''\n            }\n            // TODO navigate to them?\n            // TODO Set to current target sponsor?\n          }\n        })\n        .catch(error => {\n          console.error('errored', error)\n          this.onError({\n            response: {\n              data: {\n                errors: [error]\n              }\n            }\n          })\n        })\n    },\n    clickCreate() {\n      const { firstName, lastName, email } = this.createMember\n      const { tenantId } = this.$store.state.user.principal\n\n      const that = this\n\n      this.$apollo\n        .mutate({\n          mutation: CREATE_MEMBER,\n          variables: {\n            createMemberInput: {\n              tenantId,\n              firstName,\n              lastName,\n              email\n            }\n          },\n          update: async (\n            store,\n            {\n              data: {\n                createMember: { member }\n              }\n            }\n          ) => {\n            that.snackbarMessage = 'Successfully created ' + member.name\n            this.snackbar = true\n            await new Promise(resolve => setTimeout(resolve, 2000))\n            that.creatingMember = false\n            await that.$apollo.queries.results.refetch()\n            that.createMember = {\n              firstName: '',\n              lastName: '',\n              email: ''\n            }\n            this.$router.push(`/members/${member.id}`)\n          }\n        })\n        .catch(error => {\n          console.error('errored', error)\n          that.onError({\n            response: {\n              data: {\n                errors: [error]\n              }\n            }\n          })\n        })\n      // */\n    },\n    drillDown(user) {\n      const newPath = `/members/${user.memberId == null ? '' : user.memberId}/team`\n      this.$router.push(newPath)\n      this.getHierarchies()\n    },\n    updateLineage (user, index) {\n      const newPath = `/members/${user.memberId == null ? '' : user.memberId}/team`\n      this.lineage = this.lineage.slice(0, index + 1)\n      this.$router.push(newPath)\n    },\n    viewMember(memberId) {\n      const newPath = `/members/${memberId == null ? '' : memberId}/team`\n      this.lineage.length = 0\n      this.$router.push(newPath)\n    },\n    getStats(target) {\n      return defaultTo(\n        {},\n        find(_ => target && _.sellerId === target.memberId, this.stats)\n      )\n    },\n    dateChanged({ date }) {\n      const dateSplit = date.split('-')\n      this.month = dateSplit[1]\n      this.year = dateSplit[0]\n    },\n    onSuccess(message) {\n      this.snackbar = true\n      this.snackbarMessage = message\n    },\n    onError(errorMessage) {\n      if (typeof errorMessage === 'string') {\n        this.error = errorMessage\n      } else {\n        const errors = pathOr({}, ['response', 'data', 'errors'], errorMessage)\n        this.snackbarMessage = pathOr(\n          'There seems to be a problem. Please try again later or contact customer support.',\n          ['message'],\n          errors[0]\n        )\n      }\n      this.snackbar = true\n    }\n  },\n  apollo: {\n    displayName: {\n      query: MEMBER_BY_ID,\n      variables() {\n        return {\n          condition: {\n            ids: [this.currentId]\n          }\n        }\n      },\n      update({ members }) {\n        return members.nodes[0]\n          ? members.nodes[0].displayName\n          : 'root'\n      },\n      skip() {\n        return this.currentId === null\n      }\n    },\n    results() {\n      const result = getTeamByMemberId(\n        'currentId',\n        this.$store.state.user.principal.tenantId,\n        TEAM_LIMIT\n      )\n      return result\n    },\n    stats: {\n      query: MONTHLY_STATS_QUERY,\n      variables() {\n        return {\n          targetCondition: {\n            tenantId: this.$store.state.user.principal.tenantId,\n            sellerId: this.currentId,\n            month: ~~this.month,\n            year: ~~this.year\n          },\n          firstLevelCondition: {\n            tenantId: this.$store.state.user.principal.tenantId,\n            sponsorId: this.currentId,\n            month: ~~this.month,\n            year: ~~this.year\n          }\n        }\n      },\n      update({ targetStats, firstLevelStats }) {\n        return targetStats.nodes.concat(firstLevelStats.nodes)\n      }\n    },\n    compStats: {\n      query: COMP_STATS_QUERY,\n      variables() {\n        return {\n          input: {\n            year: this.year,\n            month: this.month,\n            membersIn: this.teamIdArr\n          }\n        }\n      },\n      update({ compStatsQuery: { results } }) {\n        return results\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.borderMenu {\n  padding: 10px 0;\n}\n.borderIcon {\n  padding: 10px 0;\n}\n</style>\n"],"sourceRoot":"src/views"}]}