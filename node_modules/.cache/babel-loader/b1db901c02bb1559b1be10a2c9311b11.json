{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/associations/AssociationDetails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/associations/AssociationDetails.vue","mtime":1575760925479},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { GET_MEMBERS_OF_ASSN } from '@/users/users.gql';\nimport AssociationsDataTable from '@/components/AssociationsDataTable.vue';\nimport { mapGetters, mapActions } from 'vuex';\nimport { StoreGetters } from '@/store';\nimport { UsersActions } from '@/users/UsersStore';\nexport default {\n  components: {\n    AssociationsDataTable: AssociationsDataTable\n  },\n  data: function data() {\n    return {\n      association: {},\n      headers: [{\n        text: 'Id',\n        value: 'id',\n        sortable: false\n      }, {\n        text: 'Member Name',\n        value: 'name',\n        sortable: false\n      }, {\n        text: 'Role',\n        value: 'role',\n        sortable: false\n      }, {\n        text: 'Rate',\n        value: 'metadata',\n        sortable: false,\n        width: '18%'\n      }, {\n        text: 'Actions',\n        sortable: false,\n        width: '20%'\n      }],\n      key: this.$route.params.key,\n      addDialog: false,\n      displayName: null,\n      type: null\n    };\n  },\n  apollo: {\n    associations: {\n      query: GET_MEMBERS_OF_ASSN,\n      variables: function variables() {\n        return {\n          input: {\n            key: this.key,\n            tenantId: this.$store.state.user.principal.tenantId\n          }\n        };\n      },\n      update: function update(data) {\n        if (!data) {\n          throw new Error(\"Failed to retrieve membership of associationKey: \".concat(this.key));\n        }\n\n        var _data$getMemberAssoci = data.getMemberAssociation,\n            memberships = _data$getMemberAssoci.memberships,\n            name = _data$getMemberAssoci.name,\n            type = _data$getMemberAssoci.type.name;\n        this.displayName = name;\n        this.type = type;\n\n        if (Array.isArray(memberships)) {\n          var parsedMemberships = memberships.map(function (member) {\n            var name = member.member.displayName,\n                id = member.memberId,\n                role = member.role.name,\n                metadata = member.metadata;\n            return {\n              name: name,\n              id: id,\n              role: role,\n              metadata: metadata\n            };\n          });\n          return parsedMemberships;\n        }\n      },\n      fetchPolicy: 'network-only'\n    }\n  },\n  methods: _objectSpread({}, mapActions({\n    userStartViewing: UsersActions.START_VIEWING\n  }), {\n    view: function () {\n      var _view = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(props) {\n        var id;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                id = props.item.id;\n                this.$router.push(\"/members/\".concat(id));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function view(_x) {\n        return _view.apply(this, arguments);\n      }\n\n      return view;\n    }()\n  }),\n  computed: _objectSpread({}, mapGetters({\n    permissions: StoreGetters.permissions\n  })),\n  watch: {\n    '$route': function $route(to, from) {\n      var toKey = to.params.key;\n      this.key = toKey;\n    }\n  }\n};",{"version":3,"sources":["AssociationDetails.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAoBA,SAAA,mBAAA,QAAA,mBAAA;AACA,OAAA,qBAAA,MAAA,wCAAA;AACA,SAAA,UAAA,EAAA,UAAA,QAAA,MAAA;AACA,SAAA,YAAA,QAAA,SAAA;AACA,SAAA,YAAA,QAAA,oBAAA;AAEA,eAAA;AACA,cAAA;AACA;AADA,GADA;AAIA,MAJA,kBAIA;AACA,WAAA;AACA,mBAAA,EADA;AAEA,eAAA,CACA;AAAA,cAAA,IAAA;AAAA,eAAA,IAAA;AAAA,kBAAA;AAAA,OADA,EAEA;AAAA,cAAA,aAAA;AAAA,eAAA,MAAA;AAAA,kBAAA;AAAA,OAFA,EAGA;AAAA,cAAA,MAAA;AAAA,eAAA,MAAA;AAAA,kBAAA;AAAA,OAHA,EAIA;AAAA,cAAA,MAAA;AAAA,eAAA,UAAA;AAAA,kBAAA,KAAA;AAAA,eAAA;AAAA,OAJA,EAKA;AAAA,cAAA,SAAA;AAAA,kBAAA,KAAA;AAAA,eAAA;AAAA,OALA,CAFA;AASA,WAAA,KAAA,MAAA,CAAA,MAAA,CAAA,GATA;AAUA,iBAAA,KAVA;AAWA,mBAAA,IAXA;AAYA,YAAA;AAZA,KAAA;AAcA,GAnBA;AAoBA,UAAA;AACA,kBAAA;AACA,aAAA,mBADA;AAEA,eAFA,uBAEA;AACA,eAAA;AACA,iBAAA;AACA,iBAAA,KAAA,GADA;AAEA,sBAAA,KAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA;AAFA;AADA,SAAA;AAMA,OATA;AAUA,YAVA,kBAUA,IAVA,EAUA;AACA,YAAA,CAAA,IAAA,EAAA;AACA,gBAAA,IAAA,KAAA,4DAAA,KAAA,GAAA,EAAA;AACA;;AAHA,oCAIA,KAAA,oBAJA;AAAA,YAIA,WAJA,yBAIA,WAJA;AAAA,YAIA,IAJA,yBAIA,IAJA;AAAA,YAIA,IAJA,yBAIA,IAJA,CAIA,IAJA;AAMA,aAAA,WAAA,GAAA,IAAA;AACA,aAAA,IAAA,GAAA,IAAA;;AAEA,YAAA,MAAA,OAAA,CAAA,WAAA,CAAA,EAAA;AACA,cAAA,oBAAA,YAAA,GAAA,CAAA,kBAAA;AAAA,gBACA,IADA,GACA,MADA,CACA,MADA,CACA,WADA;AAAA,gBACA,EADA,GACA,MADA,CACA,QADA;AAAA,gBACA,IADA,GACA,MADA,CACA,IADA,CACA,IADA;AAAA,gBACA,QADA,GACA,MADA,CACA,QADA;AAGA,mBAAA;AACA,wBADA;AAEA,oBAFA;AAGA,wBAHA;AAIA;AAJA,aAAA;AAMA,WATA,CAAA;AAUA,iBAAA,iBAAA;AACA;AACA,OAhCA;AAiCA,mBAAA;AAjCA;AADA,GApBA;AAyDA,6BACA,WAAA;AACA,sBAAA,aAAA;AADA,GAAA,CADA;AAIA,QAJA;AAAA;AAAA;AAAA,+CAIA,KAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,kBALA,GAKA,KALA,CAKA,IALA,CAKA,EALA;AAMA,qBAAA,OAAA,CAAA,IAAA,oBAAA,EAAA;;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,IAzDA;AAkEA,8BACA,WAAA;AACA,iBAAA,aAAA;AADA,GAAA,CADA,CAlEA;AAuEA,SAAA;AACA,YADA,kBACA,EADA,EACA,IADA,EACA;AAAA,UACA,KADA,GACA,EADA,CACA,MADA,CACA,GADA;AAEA,WAAA,GAAA,GAAA,KAAA;AACA;AAJA;AAvEA,CAAA","sourcesContent":["<template>\n  <v-layout column ma-5>\n    <v-card>\n      <v-card-title class=\"secondary white--text\" primary-title style=\"justify-content: center;\">\n        <h1>\n          <span v-if=\"associations\">{{displayName ? 'Members of ' + type + ' ' + displayName : ''}}</span>\n        </h1>\n      </v-card-title>\n\n      <AssociationsDataTable\n        v-if=\"associations\"\n        :associations=\"associations\"\n        :currentScreen=\"'membersInAssociation'\"\n        @view=\"view\"\n      />\n    </v-card>\n  </v-layout>\n</template>\n\n<script>\nimport { GET_MEMBERS_OF_ASSN } from '@/users/users.gql'\nimport AssociationsDataTable from '@/components/AssociationsDataTable.vue'\nimport { mapGetters, mapActions } from 'vuex'\nimport { StoreGetters } from '@/store'\nimport { UsersActions } from '@/users/UsersStore'\n\nexport default {\n  components: {\n    AssociationsDataTable\n  },\n  data () {\n    return {\n      association: {},\n      headers: [\n        { text: 'Id', value: 'id', sortable: false },\n        { text: 'Member Name', value: 'name', sortable: false },\n        { text: 'Role', value: 'role', sortable: false },\n        { text: 'Rate', value: 'metadata', sortable: false, width: '18%' },\n        { text: 'Actions', sortable: false, width: '20%' }\n      ],\n      key: this.$route.params.key,\n      addDialog: false,\n      displayName: null,\n      type: null\n    }\n  },\n  apollo: {\n    associations: {\n      query: GET_MEMBERS_OF_ASSN,\n      variables() {\n        return {\n          input: {\n            key: this.key,\n            tenantId: this.$store.state.user.principal.tenantId\n          }\n        }\n      },\n      update(data) {\n        if (!data) {\n          throw new Error(`Failed to retrieve membership of associationKey: ${this.key}`)\n        }\n        const { memberships, name, type: { name: type } } = data.getMemberAssociation\n\n        this.displayName = name\n        this.type = type\n\n        if (Array.isArray(memberships)) {\n          const parsedMemberships = memberships.map(member => {\n            const { member: { displayName: name }, memberId: id, role: { name: role }, metadata } = member\n\n            return {\n              name,\n              id,\n              role,\n              metadata\n            }\n          })\n          return parsedMemberships\n        }\n      },\n      fetchPolicy: 'network-only'\n    }\n  },\n  methods: {\n    ...mapActions({\n      userStartViewing: UsersActions.START_VIEWING\n    }),\n    async view(props) {\n      const { item: { id } } = props\n      this.$router.push(`/members/${id}`)\n    }\n  },\n  computed: {\n    ...mapGetters({\n      permissions: StoreGetters.permissions\n    })\n  },\n  watch: {\n    '$route' (to, from) {\n      const { params: { key: toKey } } = to\n      this.key = toKey\n    }\n  }\n}\n</script>\n\n<style>\ninput {\n  padding: 0 !important;\n}\n\n.v-input__slot {\n  margin-bottom: 0;\n}\n\n.association-table {\n  cursor: default;\n}\n.addbtn.sm {\n  top: -5px !important;\n}\n.addbtn {\n  top: 15px;\n}\n</style>\n"],"sourceRoot":"src/views/associations"}]}