{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/curriculum/Lessons.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/curriculum/Lessons.vue","mtime":1570835920000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport _toConsumableArray from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.find-index\";\nimport _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapActions } from 'vuex';\nimport { CurriculumActions } from '@/curriculum/CurriculumStore';\nimport Sortable from 'sortablejs';\nimport { cloneDeep } from 'lodash';\nimport { uploadLessonForm } from '@/components/courses/forms';\nimport AddDialog from '@/components/courses/AddDialog.vue';\nexport default {\n  components: {\n    AddDialog: AddDialog\n  },\n  data: function data() {\n    return {\n      lessons: [],\n      headers: [{\n        text: '',\n        sortable: false\n      }, {\n        text: 'Priority',\n        value: 'priority'\n      }, {\n        text: 'ID',\n        value: 'id'\n      }, {\n        text: 'Block ID',\n        value: 'block_id'\n      }, {\n        text: 'Key',\n        value: 'key'\n      }, {\n        text: 'Name',\n        value: 'name'\n      }, {\n        text: 'Description',\n        value: 'description'\n      }, {\n        text: 'Next Lesson',\n        value: 'next_lesson'\n      }],\n      orderChanged: false,\n      loading: false,\n      nextLesson: 123,\n      editted: [],\n      showDialog: false,\n      lessonForm: uploadLessonForm,\n      progression: [],\n      pageLoading: true\n    };\n  },\n  mounted: function () {\n    var _mounted = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      var _ref, results, table;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.getLessons(this.blockId);\n\n            case 2:\n              _ref = _context.sent;\n              results = _ref.results;\n              this.pageLoading = false;\n              this.lessons = cloneDeep(results).sort(function (a, b) {\n                return a.priority - b.priority;\n              });\n              this.editted = Array(this.lessons.length);\n              table = document.querySelector('.v-datatable tbody');\n              Sortable.create(table, {\n                onEnd: this.updateLessons,\n                handle: '.sortHandle'\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }(),\n  computed: {\n    courseId: function courseId() {\n      return ~~this.$route.params.courseId ? ~~this.$route.params.courseId : '';\n    },\n    unitId: function unitId() {\n      return ~~this.$route.params.unitId ? ~~this.$route.params.unitId : '';\n    },\n    blockId: function blockId() {\n      return ~~this.$route.params.blockId ? ~~this.$route.params.blockId : '';\n    }\n  },\n  methods: _objectSpread({}, mapActions([CurriculumActions.GET_LESSONS, CurriculumActions.UPSERT_LESSON, CurriculumActions.LESSON_PROGRESSION]), {\n    openLesson: function openLesson(item) {\n      this.$router.push('/curriculum/courses/' + this.courseId + '/unit/' + this.unitId + '/block/' + this.blockId + '/lesson/' + item);\n    },\n    findProgression: function findProgression(row) {\n      return row.progressions.findIndex(function (r) {\n        return r.fromId === row.id;\n      });\n    },\n    openLessonDetails: function openLessonDetails(lessonId) {\n      this.$router.push('/curriculum/courses/' + this.courseId + '/unit/' + this.unitId + '/block/' + this.blockId + '/lesson/' + lessonId);\n    },\n    hasEditted: function hasEditted(index) {\n      var _this = this;\n\n      this.$nextTick(function () {\n        _this.editted[index] = true;\n      });\n    },\n    saveRow: function () {\n      var _saveRow = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(row) {\n        var val;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                val = {\n                  toId: this.findProgression(row) > -1 ? ~~row.progressions[this.findProgression(row)].toId : ~~row.nextLessonId,\n                  fromId: row.id\n                };\n\n                if (row.progressions.length && this.findProgression(row) > -1) {\n                  val.id = row.progressions[this.findProgression(row)].id;\n                }\n\n                _context2.next = 4;\n                return this.lessonProgression(val);\n\n              case 4:\n                this.editted = Array(this.lessons.length);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function saveRow(_x) {\n        return _saveRow.apply(this, arguments);\n      }\n\n      return saveRow;\n    }(),\n    saveOrder: function () {\n      var _saveOrder = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var arr;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.loading = true;\n                arr = [];\n                this.lessons.forEach(function (row, index) {\n                  _this2.upsertLesson(row);\n\n                  if (index < _this2.lessons.length - 1) {\n                    var next = index + 1;\n                    var val = {\n                      toId: _this2.lessons[next].id,\n                      fromId: row.id\n                    };\n\n                    if (row.progressions.length && _this2.findProgression(row) > -1) {\n                      val.id = row.progressions[_this2.findProgression(row)].id;\n                    }\n\n                    row.progression = _this2.lessonProgression(val);\n                    arr.push(row);\n                  }\n                });\n                this.loading = false;\n                this.orderChanged = false;\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function saveOrder() {\n        return _saveOrder.apply(this, arguments);\n      }\n\n      return saveOrder;\n    }(),\n    updateLessons: function updateLessons(_ref2) {\n      var _this3 = this;\n\n      var newIndex = _ref2.newIndex,\n          oldIndex = _ref2.oldIndex;\n      this.orderChanged = true;\n\n      var test = _toConsumableArray(this.lessons);\n\n      this.lessons = [];\n      var rowSelected = test.splice(oldIndex, 1)[0];\n      test.splice(newIndex, 0, rowSelected);\n      test.forEach(function (t, index) {\n        if (index < test.length - 1) {\n          var next = index + 1;\n\n          if (t.progressions.length && _this3.findProgression(t) > -1) {\n            t.progressions[_this3.findProgression(t)].toId = test[next].id;\n          } else {\n            t.nextLessonId = test[next].id;\n          }\n        }\n\n        t.priority = index;\n        return t;\n      });\n      this.$nextTick(function () {\n        _this3.lessons = _toConsumableArray(test);\n      });\n    },\n    openDialog: function openDialog() {\n      this.showDialog = true;\n    },\n    closeDialog: function closeDialog() {\n      this.showDialog = false;\n    },\n    submitForm: function () {\n      var _submitForm = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(val) {\n        var _this4 = this;\n\n        var wordList, objectivesArr, objectives, form, _ref3, results;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                val.blockId = this.blockId;\n                wordList = val.metadata[0].value.join(', ');\n                objectivesArr = val.metadata[1].value;\n                objectives = this.prepObjectives(objectivesArr);\n                form = _objectSpread({}, val, {\n                  metadata: {\n                    wordList: wordList,\n                    objectives: objectives\n                  }\n                });\n                _context4.next = 7;\n                return this.upsertLesson(form);\n\n              case 7:\n                Object.keys(this.lessonForm).forEach(function (index) {\n                  if (index !== 'metadata' && index !== 'blockId') {\n                    _this4.lessonForm[index] = '';\n                  }\n                });\n                Object.keys(this.lessonForm.metadata).forEach(function (index) {\n                  _this4.lessonForm.metadata[index].value = [];\n                });\n                delete this.lessonForm.blockId;\n                this.showDialog = false;\n                _context4.next = 13;\n                return this.getLessons(this.blockId);\n\n              case 13:\n                _ref3 = _context4.sent;\n                results = _ref3.results;\n                this.lessons = cloneDeep(results).sort(function (a, b) {\n                  return a.priority - b.priority;\n                });\n\n              case 16:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function submitForm(_x2) {\n        return _submitForm.apply(this, arguments);\n      }\n\n      return submitForm;\n    }(),\n    prepObjectives: function prepObjectives(objectives) {\n      var objectiveOpener = '<div> At completion of this lesson, students will be able to: </div>';\n      var objectiveList = objectives.reduce(function (prev, cur) {\n        return prev + ' <li>' + cur + '</li>';\n      }, '');\n      objectiveList = ' <div> <ul>' + objectiveList + '</ul></div>';\n      var val = objectiveOpener + objectiveList;\n      return val;\n    }\n  })\n};",{"version":3,"sources":["Lessons.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-layout justify-space-around align-center column>\n    <v-progress-circular v-if=\"pageLoading\" color=\"blue\" indeterminate></v-progress-circular>\n    <h3>Lessons for Block {{blockId}}</h3>\n    <v-container class=\"table\">\n      <v-btn @click=\"openDialog\" color=\"pink\" dark absolute right fab>\n        <v-icon>add</v-icon>\n      </v-btn>\n      <v-data-table :items=\"lessons\" :headers=\"headers\" hide-actions>\n        <template slot=\"items\" slot-scope=\"props\">\n          <td class=\"px-1\" style=\"width: 0.1%\">\n            <v-btn style=\"cursor: move\" icon class=\"sortHandle\">\n              <v-icon>drag_handle</v-icon>\n            </v-btn>\n          </td>\n          <td @click=\"openLesson(props.item.id)\" class=\"text-xs\">{{ props.item.priority}}</td>\n          <td @click=\"openLesson(props.item.id)\" class=\"text-xs\">{{ props.item.id }}</td>\n          <td @click=\"openLesson(props.item.id)\" class=\"text-xs\">{{ props.item.blockId}}</td>\n          <td @click=\"openLesson(props.item.id)\" class=\"text-xs\">{{ props.item.key}}</td>\n          <td @click=\"openLesson(props.item.id)\" class=\"text-xs\">{{ props.item.name}}</td>\n          <td @click=\"openLesson(props.item.id)\" class=\"text-xs\">{{ props.item.description}}</td>\n          <td class=\"text-xs\">\n            <v-text-field\n              v-if=\"props.item.progressions.length && findProgression(props.item) > -1\"\n              v-model=\"props.item.progressions[findProgression(props.item)].toId\"\n              @keydown=\"hasEditted(props.index)\"\n            ></v-text-field>\n            <v-text-field\n              v-else\n              @keydown=\"hasEditted(props.index)\"\n              v-model=\"props.item.nextLessonId\"\n            ></v-text-field>\n            <v-btn @click=\"saveRow(props.item)\" v-if=\"editted[props.index]\">Save</v-btn>\n          </td>\n        </template>\n      </v-data-table>\n    </v-container>\n    <AddDialog\n      :showDialog=\"showDialog\"\n      :uploadConfig=\"lessonForm\"\n      @closeDialog=\"closeDialog\"\n      @submitForm=\"submitForm\"\n      dialogTitle=\"Lesson\"\n    />\n    <v-btn v-if=\"orderChanged\" @click=\"saveOrder\">Update Priorities</v-btn>\n  </v-layout>\n</template>\n\n<script>\nimport { mapActions } from 'vuex'\nimport { CurriculumActions } from '@/curriculum/CurriculumStore'\nimport Sortable from 'sortablejs'\n\nimport { cloneDeep } from 'lodash'\nimport { uploadLessonForm } from '@/components/courses/forms'\n\nimport AddDialog from '@/components/courses/AddDialog.vue'\n\nexport default {\n  components: {\n    AddDialog\n  },\n  data () {\n    return {\n      lessons: [],\n      headers: [\n        { text: '', sortable: false },\n        { text: 'Priority', value: 'priority' },\n        { text: 'ID', value: 'id' },\n        { text: 'Block ID', value: 'block_id' },\n        { text: 'Key', value: 'key' },\n        { text: 'Name', value: 'name' },\n        { text: 'Description', value: 'description' },\n        { text: 'Next Lesson', value: 'next_lesson' }\n      ],\n      orderChanged: false,\n      loading: false,\n      nextLesson: 123,\n      editted: [],\n      showDialog: false,\n      lessonForm: uploadLessonForm,\n      progression: [],\n      pageLoading: true\n    }\n  },\n  async mounted () {\n    const { results } = await this.getLessons(this.blockId)\n    this.pageLoading = false\n    this.lessons = cloneDeep(results).sort(function (a, b) {\n      return a.priority - b.priority\n    })\n\n    this.editted = Array(this.lessons.length)\n    const table = document.querySelector('.v-datatable tbody')\n    Sortable.create(table, {\n      onEnd: this.updateLessons,\n      handle: '.sortHandle'\n    })\n  },\n  computed: {\n    courseId () {\n      return ~~this.$route.params.courseId ? ~~this.$route.params.courseId : ''\n    },\n    unitId () {\n      return ~~this.$route.params.unitId ? ~~this.$route.params.unitId : ''\n    },\n    blockId () {\n      return ~~this.$route.params.blockId ? ~~this.$route.params.blockId : ''\n    }\n  },\n  methods: {\n    ...mapActions([\n      CurriculumActions.GET_LESSONS,\n      CurriculumActions.UPSERT_LESSON,\n      CurriculumActions.LESSON_PROGRESSION\n    ]),\n    openLesson (item) {\n      this.$router.push('/curriculum/courses/' + this.courseId + '/unit/' + this.unitId + '/block/' + this.blockId + '/lesson/' + item)\n    },\n    findProgression (row) {\n      return row.progressions.findIndex(r => r.fromId === row.id)\n    },\n    openLessonDetails (lessonId) {\n      this.$router.push('/curriculum/courses/' + this.courseId + '/unit/' + this.unitId + '/block/' + this.blockId + '/lesson/' + lessonId)\n    },\n    hasEditted (index) {\n      this.$nextTick(() => {\n        this.editted[index] = true\n      })\n    },\n    async saveRow (row) {\n      const val = {\n        toId: this.findProgression(row) > -1 ? ~~row.progressions[this.findProgression(row)].toId : ~~row.nextLessonId,\n        fromId: row.id\n      }\n      if (row.progressions.length && this.findProgression(row) > -1) {\n        val.id = row.progressions[this.findProgression(row)].id\n      }\n      await this.lessonProgression(val)\n      this.editted = Array(this.lessons.length)\n    },\n    async saveOrder () {\n      this.loading = true\n      var arr = []\n      this.lessons.forEach((row, index) => {\n        this.upsertLesson(row)\n        if (index < this.lessons.length - 1) {\n          const next = index + 1\n          const val = {\n            toId: this.lessons[next].id,\n            fromId: row.id\n          }\n          if (row.progressions.length && this.findProgression(row) > -1) {\n            val.id = row.progressions[this.findProgression(row)].id\n          }\n          row.progression = this.lessonProgression(val)\n          arr.push(row)\n        }\n      })\n      this.loading = false\n      this.orderChanged = false\n    },\n    updateLessons ({ newIndex, oldIndex }) {\n      this.orderChanged = true\n      var test = [...this.lessons]\n      this.lessons = []\n      const rowSelected = test.splice(oldIndex, 1)[0]\n      test.splice(newIndex, 0, rowSelected)\n\n      test.forEach((t, index) => {\n        if (index < test.length - 1) {\n          var next = index + 1\n          if (t.progressions.length && this.findProgression(t) > -1) {\n            t.progressions[this.findProgression(t)].toId = test[next].id\n          } else {\n            t.nextLessonId = test[next].id\n          }\n        }\n        t.priority = index\n        return t\n      })\n\n      this.$nextTick(() => {\n        this.lessons = [...test]\n      })\n    },\n    openDialog () {\n      this.showDialog = true\n    },\n    closeDialog () {\n      this.showDialog = false\n    },\n    async submitForm (val) {\n      val.blockId = this.blockId\n      const wordList = val.metadata[0].value.join(', ')\n      const objectivesArr = val.metadata[1].value\n      const objectives = this.prepObjectives(objectivesArr)\n      const form = { ...val, metadata: { wordList, objectives } }\n      await this.upsertLesson(form)\n\n      Object.keys(this.lessonForm).forEach(index => {\n        if (index !== 'metadata' && index !== 'blockId') {\n          this.lessonForm[index] = ''\n        }\n      })\n      Object.keys(this.lessonForm.metadata).forEach(index => {\n        this.lessonForm.metadata[index].value = []\n      })\n      delete this.lessonForm.blockId\n\n      this.showDialog = false\n      const { results } = await this.getLessons(this.blockId)\n      this.lessons = cloneDeep(results).sort(function (a, b) {\n        return a.priority - b.priority\n      })\n    },\n    prepObjectives (objectives) {\n      const objectiveOpener = '<div> At completion of this lesson, students will be able to: </div>'\n      let objectiveList = objectives.reduce((prev, cur) => {\n        return prev + ' <li>' + cur + '</li>'\n      }, '')\n      objectiveList = ' <div> <ul>' + objectiveList + '</ul></div>'\n      const val = objectiveOpener + objectiveList\n      return val\n    }\n  }\n}\n</script>\n\n<style scoped>\n.table {\n  text-align: left !important;\n}\n</style>\n"],"sourceRoot":"src/views/curriculum"}]}