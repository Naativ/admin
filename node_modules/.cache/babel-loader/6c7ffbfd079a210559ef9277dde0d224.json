{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/eslint-loader/index.js??ref--13-0!/Users/narfdre/Code/hexly/admin/src/curriculum/CurriculumService.js","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/curriculum/CurriculumService.js","mtime":1554331296000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { apolloClient } from '@/vue-apollo';\n\nvar gql = require(\"./curriculum.gql\");\n\nvar doQuery = function doQuery(query, args) {\n  return apolloClient.query({\n    query: query,\n    variables: args,\n    fetchPolicy: 'no-cache'\n  });\n};\n\nvar doMutate = function doMutate(mutation, args) {\n  return apolloClient.mutate({\n    mutation: mutation,\n    variables: args\n  });\n};\n\nexport var searchCourse =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee() {\n    var result;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return doQuery(gql.getCourses, {});\n\n          case 2:\n            result = _context.sent;\n            return _context.abrupt(\"return\", result);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function searchCourse() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var upsertCourse =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee2(params) {\n    var name, description, key, priority, result;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            name = params.name, description = params.description, key = params.key, priority = params.priority;\n            _context2.next = 3;\n            return doMutate(gql.upsertCourse, {\n              input: {\n                name: name,\n                description: description,\n                key: key,\n                priority: ~~priority\n              }\n            });\n\n          case 3:\n            result = _context2.sent;\n            return _context2.abrupt(\"return\", result);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function upsertCourse(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getUnits =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee3(params) {\n    var input, result;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            input = {\n              courseIds: params,\n              page: 1,\n              pageSize: 25\n            };\n            _context3.next = 3;\n            return doQuery(gql.getUnits, {\n              input: input\n            });\n\n          case 3:\n            result = _context3.sent;\n            return _context3.abrupt(\"return\", result);\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getUnits(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var upsertUnit =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee4(params) {\n    var name, description, key, priority, courseId, result;\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            name = params.name, description = params.description, key = params.key, priority = params.priority, courseId = params.courseId;\n            _context4.next = 3;\n            return doMutate(gql.upsertUnit, {\n              input: {\n                name: name,\n                description: description,\n                key: key,\n                priority: ~~priority,\n                courseId: ~~courseId\n              }\n            });\n\n          case 3:\n            result = _context4.sent;\n            return _context4.abrupt(\"return\", result);\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function upsertUnit(_x3) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getBlocks =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee5(params) {\n    var input, result;\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            input = {\n              unitIds: params,\n              page: 1,\n              pageSize: 25\n            };\n            _context5.next = 3;\n            return doQuery(gql.getBlocks, {\n              input: input\n            });\n\n          case 3:\n            result = _context5.sent;\n            return _context5.abrupt(\"return\", result);\n\n          case 5:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function getBlocks(_x4) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var upsertBlock =\n/*#__PURE__*/\nfunction () {\n  var _ref6 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee6(params) {\n    var name, description, key, priority, unitId, result;\n    return regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            name = params.name, description = params.description, key = params.key, priority = params.priority, unitId = params.unitId;\n            _context6.next = 3;\n            return doMutate(gql.upsertBlock, {\n              input: {\n                name: name,\n                description: description,\n                key: key,\n                priority: ~~priority,\n                unitId: ~~unitId\n              }\n            });\n\n          case 3:\n            result = _context6.sent;\n            return _context6.abrupt(\"return\", result);\n\n          case 5:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function upsertBlock(_x5) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var getLessons =\n/*#__PURE__*/\nfunction () {\n  var _ref7 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee7(params) {\n    var input, result;\n    return regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            input = {\n              blockIds: params,\n              page: 1,\n              pageSize: 25\n            };\n            _context7.next = 3;\n            return doQuery(gql.getLessons, {\n              input: input\n            });\n\n          case 3:\n            result = _context7.sent;\n            return _context7.abrupt(\"return\", result);\n\n          case 5:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n\n  return function getLessons(_x6) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var upsertLesson =\n/*#__PURE__*/\nfunction () {\n  var _ref8 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee8(params) {\n    var name, description, key, priority, blockId, metadata, result;\n    return regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            name = params.name, description = params.description, key = params.key, priority = params.priority, blockId = params.blockId, metadata = params.metadata;\n            _context8.next = 3;\n            return doMutate(gql.upsertLesson, {\n              input: {\n                name: name,\n                description: description,\n                key: key,\n                priority: ~~priority,\n                blockId: ~~blockId,\n                metadata: metadata\n              }\n            });\n\n          case 3:\n            result = _context8.sent;\n            return _context8.abrupt(\"return\", result);\n\n          case 5:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n\n  return function upsertLesson(_x7) {\n    return _ref8.apply(this, arguments);\n  };\n}();\nexport var getLessonsById =\n/*#__PURE__*/\nfunction () {\n  var _ref9 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee9(params) {\n    var input, result;\n    return regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            input = {\n              id: params\n            };\n            _context9.next = 3;\n            return doQuery(gql.getLessonsById, {\n              input: input\n            });\n\n          case 3:\n            result = _context9.sent;\n            return _context9.abrupt(\"return\", result);\n\n          case 5:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n\n  return function getLessonsById(_x8) {\n    return _ref9.apply(this, arguments);\n  };\n}();\nexport var upsertSlide =\n/*#__PURE__*/\nfunction () {\n  var _ref10 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee10(params) {\n    var name, description, key, priority, lessonId, typeId, metadata, id, result;\n    return regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            name = params.name, description = params.description, key = params.key, priority = params.priority, lessonId = params.lessonId, typeId = params.typeId, metadata = params.metadata, id = params.id;\n            _context10.next = 3;\n            return doMutate(gql.upsertSlide, {\n              input: {\n                name: name,\n                description: description,\n                key: key,\n                priority: ~~priority,\n                lessonId: ~~lessonId,\n                typeId: ~~typeId,\n                metadata: metadata,\n                id: id\n              }\n            });\n\n          case 3:\n            result = _context10.sent;\n            return _context10.abrupt(\"return\", result);\n\n          case 5:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10);\n  }));\n\n  return function upsertSlide(_x9) {\n    return _ref10.apply(this, arguments);\n  };\n}();\nexport var detachAssetFromSlide =\n/*#__PURE__*/\nfunction () {\n  var _ref11 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee11(params) {\n    var slideId, assetId, result;\n    return regeneratorRuntime.wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            slideId = params.slideId, assetId = params.assetId;\n            _context11.next = 3;\n            return doMutate(gql.detachAssetFromSlide, {\n              input: {\n                slideId: ~~slideId,\n                assetId: ~~assetId\n              }\n            });\n\n          case 3:\n            result = _context11.sent;\n            return _context11.abrupt(\"return\", result);\n\n          case 5:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11);\n  }));\n\n  return function detachAssetFromSlide(_x10) {\n    return _ref11.apply(this, arguments);\n  };\n}();\nexport var attachAssetToSlide =\n/*#__PURE__*/\nfunction () {\n  var _ref12 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee12(params) {\n    var slideId, assetId, result;\n    return regeneratorRuntime.wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            slideId = params.slideId, assetId = params.assetId;\n            _context12.next = 3;\n            return doMutate(gql.attachAssetToSlide, {\n              input: {\n                slideId: ~~slideId,\n                assetId: ~~assetId\n              }\n            });\n\n          case 3:\n            result = _context12.sent;\n            return _context12.abrupt(\"return\", result);\n\n          case 5:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee12);\n  }));\n\n  return function attachAssetToSlide(_x11) {\n    return _ref12.apply(this, arguments);\n  };\n}();\nexport var lessonProgression =\n/*#__PURE__*/\nfunction () {\n  var _ref13 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee13(params) {\n    var result;\n    return regeneratorRuntime.wrap(function _callee13$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            _context13.next = 2;\n            return doMutate(gql.lessonProgression, {\n              input: _objectSpread({}, params)\n            });\n\n          case 2:\n            result = _context13.sent;\n            return _context13.abrupt(\"return\", result);\n\n          case 4:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, _callee13);\n  }));\n\n  return function lessonProgression(_x12) {\n    return _ref13.apply(this, arguments);\n  };\n}();",{"version":3,"sources":["/Users/narfdre/Code/hexly/admin/src/curriculum/CurriculumService.js"],"names":["apolloClient","gql","require","doQuery","query","args","variables","fetchPolicy","doMutate","mutation","mutate","searchCourse","getCourses","result","upsertCourse","params","name","description","key","priority","input","getUnits","courseIds","page","pageSize","upsertUnit","courseId","getBlocks","unitIds","upsertBlock","unitId","getLessons","blockIds","upsertLesson","blockId","metadata","getLessonsById","id","upsertSlide","lessonId","typeId","detachAssetFromSlide","slideId","assetId","attachAssetToSlide","lessonProgression"],"mappings":"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","sourcesContent":["import { apolloClient } from '@/vue-apollo'\nconst gql = require('./curriculum.gql')\n\nconst doQuery = (query, args) =>\n  apolloClient.query({\n    query,\n    variables: args,\n    fetchPolicy: 'no-cache'\n  })\n\nconst doMutate = (mutation, args) =>\n  apolloClient.mutate({\n    mutation,\n    variables: args\n  })\n\nexport const searchCourse = async () => {\n  const result = await doQuery(gql.getCourses, {})\n  return result\n}\n\nexport const upsertCourse = async params => {\n  const {\n    name,\n    description,\n    key,\n    priority\n  } = params\n  const result = await doMutate(gql.upsertCourse, {\n    input: {\n      name,\n      description,\n      key,\n      priority: ~~priority\n    }\n  })\n  return result\n}\n\nexport const getUnits = async params => {\n  const input = { courseIds: params, page: 1, pageSize: 25 }\n  const result = await doQuery(gql.getUnits, { input })\n  return result\n}\n\nexport const upsertUnit = async params => {\n  const {\n    name,\n    description,\n    key,\n    priority,\n    courseId\n  } = params\n  const result = await doMutate(gql.upsertUnit, {\n    input: {\n      name,\n      description,\n      key,\n      priority: ~~priority,\n      courseId: ~~courseId\n    }\n  })\n  return result\n}\n\nexport const getBlocks = async params => {\n  const input = { unitIds: params, page: 1, pageSize: 25 }\n  const result = await doQuery(gql.getBlocks, { input })\n  return result\n}\n\nexport const upsertBlock = async params => {\n  const {\n    name,\n    description,\n    key,\n    priority,\n    unitId\n  } = params\n  const result = await doMutate(gql.upsertBlock, {\n    input: {\n      name,\n      description,\n      key,\n      priority: ~~priority,\n      unitId: ~~unitId\n    }\n  })\n  return result\n}\n\nexport const getLessons = async params => {\n  const input = { blockIds: params, page: 1, pageSize: 25 }\n  const result = await doQuery(gql.getLessons, { input })\n  return result\n}\n\nexport const upsertLesson = async params => {\n  const {\n    name,\n    description,\n    key,\n    priority,\n    blockId,\n    metadata\n  } = params\n  const result = await doMutate(gql.upsertLesson, {\n    input: {\n      name,\n      description,\n      key,\n      priority: ~~priority,\n      blockId: ~~blockId,\n      metadata\n    }\n  })\n  return result\n}\n\nexport const getLessonsById = async params => {\n  const input = { id: params }\n  const result = await doQuery(gql.getLessonsById, { input })\n  return result\n}\n\nexport const upsertSlide = async params => {\n  const {\n    name,\n    description,\n    key,\n    priority,\n    lessonId,\n    typeId,\n    metadata,\n    id\n  } = params\n  const result = await doMutate(gql.upsertSlide, {\n    input: {\n      name,\n      description,\n      key,\n      priority: ~~priority,\n      lessonId: ~~lessonId,\n      typeId: ~~typeId,\n      metadata,\n      id\n    }\n  })\n  return result\n}\n\nexport const detachAssetFromSlide = async params => {\n  const {\n    slideId,\n    assetId\n  } = params\n  const result = await doMutate(gql.detachAssetFromSlide, {\n    input: {\n      slideId: ~~slideId,\n      assetId: ~~assetId\n    }\n  })\n  return result\n}\n\nexport const attachAssetToSlide = async params => {\n  const {\n    slideId,\n    assetId\n  } = params\n  const result = await doMutate(gql.attachAssetToSlide, {\n    input: {\n      slideId: ~~slideId,\n      assetId: ~~assetId\n    }\n  })\n  return result\n}\n\nexport const lessonProgression = async params => {\n  const result = await doMutate(gql.lessonProgression, {\n    input: {\n      ...params\n    }\n  })\n  return result\n}\n"]}]}