{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/users/UserSurveys.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/users/UserSurveys.vue","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as R from 'ramda';\nimport moment from 'moment';\nimport { getSurveys } from '@/users/users.gql';\nexport default {\n  data: function data() {\n    return {\n      moment: moment,\n      surveys: [],\n      headers: [{\n        text: 'ID',\n        value: 'id',\n        width: '50px'\n      }, {\n        text: 'Survey',\n        value: 'surveyId',\n        width: '50px'\n      }, {\n        text: 'Submitted',\n        value: 'modifiedOn'\n      }, {\n        text: 'Answers Provided',\n        value: 'answers',\n        width: '150px'\n      }, {\n        width: '50px'\n      }]\n    };\n  },\n  apollo: {\n    surveys: {\n      query: getSurveys,\n      variables: function variables() {\n        return {\n          input: {\n            memberId: this.id\n          }\n        };\n      },\n      update: function update(response) {\n        return R.pathOr([], ['surveyResponse'], response);\n      }\n    }\n  },\n  computed: {\n    id: function id() {\n      return ~~this.$route.params.id;\n    },\n    loaders: function loaders() {\n      return {\n        surveys: this.$apollo.queries.surveys.loading\n      };\n    }\n  }\n};",{"version":3,"sources":["UserSurveys.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,OAAA,KAAA,CAAA,MAAA,OAAA;AACA,OAAA,MAAA,MAAA,QAAA;AACA,SAAA,UAAA,QAAA,mBAAA;AAEA,eAAA;AACA,MADA,kBACA;AACA,WAAA;AACA,oBADA;AAEA,eAAA,EAFA;AAGA,eAAA,CACA;AAAA,cAAA,IAAA;AAAA,eAAA,IAAA;AAAA,eAAA;AAAA,OADA,EAEA;AAAA,cAAA,QAAA;AAAA,eAAA,UAAA;AAAA,eAAA;AAAA,OAFA,EAGA;AAAA,cAAA,WAAA;AAAA,eAAA;AAAA,OAHA,EAIA;AAAA,cAAA,kBAAA;AAAA,eAAA,SAAA;AAAA,eAAA;AAAA,OAJA,EAKA;AAAA,eAAA;AAAA,OALA;AAHA,KAAA;AAWA,GAbA;AAcA,UAAA;AACA,aAAA;AACA,aAAA,UADA;AAEA,eAFA,uBAEA;AACA,eAAA;AACA,iBAAA;AACA,sBAAA,KAAA;AADA;AADA,SAAA;AAKA,OARA;AASA,YATA,kBASA,QATA,EASA;AACA,eAAA,EAAA,MAAA,CAAA,EAAA,EAAA,CAAA,gBAAA,CAAA,EAAA,QAAA,CAAA;AACA;AAXA;AADA,GAdA;AA6BA,YAAA;AACA,MADA,gBACA;AACA,aAAA,CAAA,CAAA,KAAA,MAAA,CAAA,MAAA,CAAA,EAAA;AACA,KAHA;AAIA,WAJA,qBAIA;AACA,aAAA;AACA,iBAAA,KAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA;AADA,OAAA;AAGA;AARA;AA7BA,CAAA","sourcesContent":["<template>\n  <v-flex xs12>\n    <v-data-table :headers=\"headers\" :items=\"surveys\" :loading=\"loaders.surveys\" :expand=\"true\">\n      <v-progress-linear slot=\"progress\" color=\"blue\" indeterminate></v-progress-linear>\n      <template slot=\"items\" slot-scope=\"props\">\n        <td>{{ props.item.id }}</td>\n        <td>{{ props.item.surveyId }}</td>\n        <td>{{ moment.utc(props.item.modifiedOn).format('MMMM Do YYYY, h:mm:ss a') }}</td>\n        <td class=\"align-center\">{{ props.item.answers.length }}</td>\n        <td>\n          <button class=\"mouse-pointer\" @click=\"props.expanded = !props.expanded\">\n            <v-icon v-if=\"props.expanded\">arrow_drop_down</v-icon>\n            <v-icon v-else>arrow_left</v-icon>\n          </button>\n        </td>\n      </template>\n      <template slot=\"expand\" slot-scope=\"props\">\n        <v-card flat class=\"main-container\">\n          <ul>\n            <li v-for=\"question in props.item.answers\" :key=\"question.questionName\">\n              <strong>{{question.questionName}}:</strong>\n              {{ question.values.map(e => e.value).join(\", \") }}\n            </li>\n          </ul>\n        </v-card>\n      </template>\n      <template slot=\"no-data\">\n        <div v-if=\"loaders.surveys\">Searching</div>\n        <div v-else>No survey responses have been submitted.</div>\n      </template>\n    </v-data-table>\n  </v-flex>\n</template>\n\n<script>\nimport * as R from 'ramda'\nimport moment from 'moment'\nimport { getSurveys } from '@/users/users.gql'\n\nexport default {\n  data() {\n    return {\n      moment,\n      surveys: [],\n      headers: [\n        { text: 'ID', value: 'id', width: '50px' },\n        { text: 'Survey', value: 'surveyId', width: '50px' },\n        { text: 'Submitted', value: 'modifiedOn' },\n        { text: 'Answers Provided', value: 'answers', width: '150px' },\n        { width: '50px' }\n      ]\n    }\n  },\n  apollo: {\n    surveys: {\n      query: getSurveys,\n      variables() {\n        return {\n          input: {\n            memberId: this.id\n          }\n        }\n      },\n      update(response) {\n        return R.pathOr([], ['surveyResponse'], response)\n      }\n    }\n  },\n  computed: {\n    id() {\n      return ~~this.$route.params.id\n    },\n    loaders() {\n      return {\n        surveys: this.$apollo.queries.surveys.loading\n      }\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src/views/users"}]}