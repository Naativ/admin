{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/sales/Sales.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/sales/Sales.vue","mtime":1570835920000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport DateSelector from '@/components/DateSelector';\nimport SalesDataTable from '@/components/SalesDataTable';\nimport SEARCH_SALES_QUERY from '@/graphql/SearchSales.gql';\nimport { map } from 'ramda';\nimport moment from 'moment';\nimport { debounce } from 'lodash';\nexport default {\n  components: {\n    DateSelector: DateSelector,\n    SalesDataTable: SalesDataTable\n  },\n  data: function data() {\n    var _this = this;\n\n    return {\n      startDate: moment().startOf('week').subtract(5, 'weeks').format('YYYY-MM-DD'),\n      endDate: moment().endOf('week').subtract(1, 'weeks').format('YYYY-MM-DD'),\n      loading: false,\n      searchTerm: null,\n      searchInputDebounce: debounce(function () {\n        return _this.searchInput();\n      }, 500),\n      sales: []\n    };\n  },\n  methods: {\n    startDateChanged: function startDateChanged(_ref) {\n      var date = _ref.date;\n      this.startDate = date;\n    },\n    endDateChanged: function endDateChanged(_ref2) {\n      var date = _ref2.date;\n      this.endDate = date;\n    },\n    checkIfOrderNumber: function checkIfOrderNumber(inputString) {\n      var isNumber = /^\\d*$/gm.test(inputString);\n      return isNumber;\n    },\n    searchInput: function () {\n      var _searchInput = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var result, input, _result, searchSales;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.sales = [];\n\n                if (!(this.searchTerm === '')) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 3:\n                this.loading = true;\n\n                if (this.checkIfOrderNumber(this.searchTerm)) {\n                  input = {\n                    tenantId: this.$store.state.user.principal.tenantId,\n                    endDate: this.endDate,\n                    startDate: this.startDate,\n                    sellerId: null,\n                    providerOids: [this.searchTerm]\n                  };\n                } else {\n                  input = {\n                    tenantId: this.$store.state.user.principal.tenantId,\n                    query: this.searchTerm,\n                    endDate: this.endDate,\n                    startDate: this.startDate,\n                    sellerId: null\n                  };\n                }\n\n                _context.next = 7;\n                return this.searchSalesQuery(input);\n\n              case 7:\n                result = _context.sent;\n                _result = result, searchSales = _result.data.searchSales;\n                this.sales = searchSales;\n                this.loading = false;\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function searchInput() {\n        return _searchInput.apply(this, arguments);\n      }\n\n      return searchInput;\n    }(),\n    searchSalesQuery: function searchSalesQuery(input) {\n      return this.$apollo.query({\n        query: SEARCH_SALES_QUERY,\n        variables: {\n          saleSearchInput: _objectSpread({}, input)\n        }\n      });\n    }\n  },\n  computed: {\n    items: function items() {\n      return map(function (sale) {\n        return _objectSpread({}, sale, {\n          id: sale.saleId,\n          date: moment(sale.awardedDate, 'YYYY-MM-DD').format('MM/DD/YYYY')\n        });\n      }, this.sales);\n    }\n  }\n};",{"version":3,"sources":["Sales.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA,OAAA,YAAA,MAAA,2BAAA;AACA,OAAA,cAAA,MAAA,6BAAA;AACA,OAAA,kBAAA,MAAA,2BAAA;AACA,SAAA,GAAA,QAAA,OAAA;AACA,OAAA,MAAA,MAAA,QAAA;AACA,SAAA,QAAA,QAAA,QAAA;AAEA,eAAA;AACA,cAAA;AACA,8BADA;AAEA;AAFA,GADA;AAKA,MALA,kBAKA;AAAA;;AACA,WAAA;AACA,iBAAA,SACA,OADA,CACA,MADA,EACA,QADA,CACA,CADA,EACA,OADA,EAEA,MAFA,CAEA,YAFA,CADA;AAIA,eAAA,SACA,KADA,CACA,MADA,EACA,QADA,CACA,CADA,EACA,OADA,EAEA,MAFA,CAEA,YAFA,CAJA;AAOA,eAAA,KAPA;AAQA,kBAAA,IARA;AASA,2BAAA,SAAA;AAAA,eAAA,MAAA,WAAA,EAAA;AAAA,OAAA,EAAA,GAAA,CATA;AAUA,aAAA;AAVA,KAAA;AAYA,GAlBA;AAmBA,WAAA;AACA,oBADA,kCACA;AAAA,UAAA,IAAA,QAAA,IAAA;AACA,WAAA,SAAA,GAAA,IAAA;AACA,KAHA;AAIA,kBAJA,iCAIA;AAAA,UAAA,IAAA,SAAA,IAAA;AACA,WAAA,OAAA,GAAA,IAAA;AACA,KANA;AAOA,sBAPA,8BAOA,WAPA,EAOA;AACA,UAAA,WAAA,UAAA,IAAA,CAAA,WAAA,CAAA;AACA,aAAA,QAAA;AACA,KAVA;AAWA,eAXA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAYA,qBAAA,KAAA,GAAA,EAAA;;AAZA,sBAeA,KAAA,UAAA,KAAA,EAfA;AAAA;AAAA;AAAA;;AAAA,iDAeA,KAfA;;AAAA;AAgBA,qBAAA,OAAA,GAAA,IAAA;;AACA,oBAAA,KAAA,kBAAA,CAAA,KAAA,UAAA,CAAA,EAAA;AACA,0BAAA;AACA,8BAAA,KAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,QADA;AAEA,6BAAA,KAAA,OAFA;AAGA,+BAAA,KAAA,SAHA;AAIA,8BAAA,IAJA;AAKA,kCAAA,CAAA,KAAA,UAAA;AALA,mBAAA;AAOA,iBARA,MAQA;AACA,0BAAA;AACA,8BAAA,KAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,QADA;AAEA,2BAAA,KAAA,UAFA;AAGA,6BAAA,KAAA,OAHA;AAIA,+BAAA,KAAA,SAJA;AAKA,8BAAA;AALA,mBAAA;AAOA;;AAjCA;AAAA,uBAkCA,KAAA,gBAAA,CAAA,KAAA,CAlCA;;AAAA;AAkCA,sBAlCA;AAAA,0BAmCA,MAnCA,EAmCA,WAnCA,WAmCA,IAnCA,CAmCA,WAnCA;AAoCA,qBAAA,KAAA,GAAA,WAAA;AACA,qBAAA,OAAA,GAAA,KAAA;;AArCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAuCA,oBAvCA,4BAuCA,KAvCA,EAuCA;AACA,aAAA,KAAA,OAAA,CAAA,KAAA,CAAA;AACA,eAAA,kBADA;AAEA,mBAAA;AACA,6CACA,KADA;AADA;AAFA,OAAA,CAAA;AAQA;AAhDA,GAnBA;AAqEA,YAAA;AACA,SADA,mBACA;AACA,aAAA,IAAA,gBAAA;AACA,iCACA,IADA;AAEA,cAAA,KAAA,MAFA;AAGA,gBAAA,OAAA,KAAA,WAAA,EAAA,YAAA,EAAA,MAAA,CAAA,YAAA;AAHA;AAKA,OANA,EAMA,KAAA,KANA,CAAA;AAOA;AATA;AArEA,CAAA","sourcesContent":["<template>\n  <v-flex xs12>\n    <div class=\"about main-container\">\n      <h1>Sales</h1>\n      <br>\n      <v-card>\n        <v-card-text>\n          <v-subheader>Range</v-subheader>\n          <v-container grid-list-md text-xs-center>\n            <v-layout row wrap>\n              <v-flex xs12 sm6>\n                <DateSelector\n                  :selectedDate=\"startDate\"\n                  :label=\"'Select Start Date'\"\n                  @date-changed=\"startDateChanged\"\n                />\n              </v-flex>\n              <v-flex xs12 sm6>\n                <DateSelector\n                  :selectedDate=\"endDate\"\n                  :label=\"'Select End Date'\"\n                  @date-changed=\"endDateChanged\"\n                />\n              </v-flex>\n            </v-layout>\n          </v-container>\n          <v-subheader>Order Search</v-subheader>\n          <v-container grid-list-md text-xs-center>\n            <v-flex xs12>\n              <v-text-field\n                v-model=\"searchTerm\"\n                @keyup=\"searchInputDebounce\"\n                append-icon=\"search\"\n                type=\"text\"\n                name=\"searchTerm\"\n                label=\"Enter Name or Order ID\"\n              ></v-text-field>\n            </v-flex>\n          </v-container>\n        </v-card-text>\n      </v-card>\n      <SalesDataTable\n        :sales=\"items\"\n        :loading=\"loading\"\n      />\n    </div>\n  </v-flex>\n</template>\n\n<script>\nimport DateSelector from '@/components/DateSelector'\nimport SalesDataTable from '@/components/SalesDataTable'\nimport SEARCH_SALES_QUERY from '@/graphql/SearchSales.gql'\nimport { map } from 'ramda'\nimport moment from 'moment'\nimport { debounce } from 'lodash'\n\nexport default {\n  components: {\n    DateSelector,\n    SalesDataTable\n  },\n  data() {\n    return {\n      startDate: moment()\n        .startOf('week').subtract(5, 'weeks')\n        .format('YYYY-MM-DD'),\n      endDate: moment()\n        .endOf('week').subtract(1, 'weeks')\n        .format('YYYY-MM-DD'),\n      loading: false,\n      searchTerm: null,\n      searchInputDebounce: debounce(() => this.searchInput(), 500),\n      sales: []\n    }\n  },\n  methods: {\n    startDateChanged({ date }) {\n      this.startDate = date\n    },\n    endDateChanged({ date }) {\n      this.endDate = date\n    },\n    checkIfOrderNumber(inputString) {\n      const isNumber = /^\\d*$/gm.test(inputString)\n      return isNumber\n    },\n    async searchInput() {\n      this.sales = []\n      let result\n      let input\n      if (this.searchTerm === '') { return false }\n      this.loading = true\n      if (this.checkIfOrderNumber(this.searchTerm)) {\n        input = {\n          tenantId: this.$store.state.user.principal.tenantId,\n          endDate: this.endDate,\n          startDate: this.startDate,\n          sellerId: null,\n          providerOids: [this.searchTerm]\n        }\n      } else {\n        input = {\n          tenantId: this.$store.state.user.principal.tenantId,\n          query: this.searchTerm,\n          endDate: this.endDate,\n          startDate: this.startDate,\n          sellerId: null\n        }\n      }\n      result = await this.searchSalesQuery(input)\n      const { data: { searchSales } } = result\n      this.sales = searchSales\n      this.loading = false\n    },\n    searchSalesQuery(input) {\n      return this.$apollo.query({\n        query: SEARCH_SALES_QUERY,\n        variables: {\n          saleSearchInput: {\n            ...input\n          }\n        }\n      })\n    }\n  },\n  computed: {\n    items() {\n      return map(sale => {\n        return {\n          ...sale,\n          id: sale.saleId,\n          date: moment(sale.awardedDate, 'YYYY-MM-DD').format('MM/DD/YYYY')\n        }\n      }, this.sales)\n    }\n  }\n}\n</script>\n\n<style scoped>\n.sale-details ul li {\n  list-style: none;\n}\n</style>\n"],"sourceRoot":"src/views/sales"}]}