{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/eslint-loader/index.js??ref--13-0!/Users/narfdre/Code/hexly/admin/src/content/ContentService.js","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/content/ContentService.js","mtime":1551331106000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { pathOr } from 'ramda';\nimport { assetMeta, assetCreate, assetSearch as search, assetSetTags } from \"./content.gql\";\nimport { apolloClient } from '@/vue-apollo';\n\nvar doQuery = function doQuery(query) {\n  var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return apolloClient.query({\n    query: query,\n    variables: args,\n    fetchPolicy: 'network-only'\n  });\n};\n\nvar doMutate = function doMutate(mutation) {\n  var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return apolloClient.mutate({\n    mutation: mutation,\n    variables: args\n  });\n};\n\nexport var getAssetMeta =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(avail) {\n    var result, tags;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = pathOr;\n            _context.t1 = {};\n            _context.t2 = ['data', 'assetManagementConfig'];\n            _context.next = 5;\n            return doQuery(assetMeta);\n\n          case 5:\n            _context.t3 = _context.sent;\n            result = (0, _context.t0)(_context.t1, _context.t2, _context.t3);\n            tags = pathOr([], ['tags'], result);\n            return _context.abrupt(\"return\", {\n              providers: result.providers || [],\n              approval: tags.filter(function (e) {\n                return e.key.indexOf('approval:') === 0;\n              }),\n              tags: tags.filter(function (e) {\n                return e.key.indexOf('search:') === 0;\n              }),\n              audiences: tags.filter(function (e) {\n                return e.key.indexOf('aud:') === 0;\n              }),\n              types: result.types || [],\n              allTags: tags\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getAssetMeta(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var createAsset =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee2(input) {\n    var result;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.t0 = pathOr;\n            _context2.t1 = {};\n            _context2.t2 = ['data', 'assetCreate'];\n            _context2.next = 5;\n            return doMutate(assetCreate, {\n              input: input\n            });\n\n          case 5:\n            _context2.t3 = _context2.sent;\n            result = (0, _context2.t0)(_context2.t1, _context2.t2, _context2.t3);\n            return _context2.abrupt(\"return\", result);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function createAsset(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var setAssetTags =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee3(assetId, tags) {\n    var result;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return apolloClient.mutate({\n              mutation: assetSetTags,\n              variables: {\n                input: {\n                  assetId: assetId,\n                  tags: tags\n                }\n              }\n            });\n\n          case 2:\n            result = _context3.sent;\n            return _context3.abrupt(\"return\", pathOr({}, ['data', 'assetSetTags'], result));\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function setAssetTags(_x3, _x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var searchAssets =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee4(op, input, jwt) {\n    var _pathOr, assetSearch, results, page, pageSize, totalResults, totalPages;\n\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.t0 = pathOr;\n            _context4.t1 = {\n              assets: []\n            };\n            _context4.t2 = ['data'];\n            _context4.next = 5;\n            return doQuery(search(op), {\n              input: input\n            });\n\n          case 5:\n            _context4.t3 = _context4.sent;\n            _pathOr = (0, _context4.t0)(_context4.t1, _context4.t2, _context4.t3);\n            assetSearch = _pathOr.assetSearch;\n            results = assetSearch.results, page = assetSearch.page, pageSize = assetSearch.pageSize, totalResults = assetSearch.totalResults, totalPages = assetSearch.totalPages; // ewwwww\n\n            results.map(function (a) {\n              var url, thumbnailUrl;\n\n              if (a.url) {\n                url = formatUrl(a.url, jwt);\n              }\n\n              if (a.thumbnailUrl) {\n                thumbnailUrl = formatUrl(a.thumbnailUrl, jwt);\n              }\n\n              return _objectSpread({}, a, {\n                url: url,\n                thumbnailUrl: thumbnailUrl\n              });\n            });\n            return _context4.abrupt(\"return\", {\n              assets: results,\n              page: page,\n              pageSize: pageSize,\n              totalResults: totalResults,\n              totalPages: totalPages\n            });\n\n          case 11:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function searchAssets(_x5, _x6, _x7) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar formatUrl = function formatUrl(url, jwt) {\n  return url.split('?__jwt=')[0] + '?__jwt=' + jwt;\n};",{"version":3,"sources":["/Users/narfdre/Code/hexly/admin/src/content/ContentService.js"],"names":["pathOr","assetMeta","assetCreate","assetSearch","search","assetSetTags","apolloClient","doQuery","query","args","variables","fetchPolicy","doMutate","mutation","mutate","getAssetMeta","avail","result","tags","providers","approval","filter","e","key","indexOf","audiences","types","allTags","createAsset","input","setAssetTags","assetId","searchAssets","op","jwt","assets","results","page","pageSize","totalResults","totalPages","map","url","thumbnailUrl","a","formatUrl","split"],"mappings":"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","sourcesContent":["import { pathOr } from 'ramda'\nimport { assetMeta, assetCreate, assetSearch as search, assetSetTags } from './content.gql'\nimport { apolloClient } from '@/vue-apollo'\n\nconst doQuery = (query, args = {}) => {\n  return apolloClient.query({\n    query: query,\n    variables: args,\n    fetchPolicy: 'network-only'\n  })\n}\n\nconst doMutate = (mutation, args = {}) =>\n  apolloClient.mutate({\n    mutation,\n    variables: args\n  })\n\nexport const getAssetMeta = async avail => {\n  const result = pathOr(\n    {},\n    ['data', 'assetManagementConfig'],\n    await doQuery(assetMeta)\n  )\n  const tags = pathOr([], ['tags'], result)\n  return {\n    providers: result.providers || [],\n    approval: tags.filter(e => e.key.indexOf('approval:') === 0),\n    tags: tags.filter(e => e.key.indexOf('search:') === 0),\n    audiences: tags.filter(e => e.key.indexOf('aud:') === 0),\n    types: result.types || [],\n    allTags: tags\n  }\n}\n\nexport const createAsset = async input => {\n  const result = pathOr(\n    {},\n    ['data', 'assetCreate'],\n    await doMutate(assetCreate, { input })\n  )\n  return result\n}\n\nexport const setAssetTags = async (assetId, tags) => {\n  const result = await apolloClient.mutate({\n    mutation: assetSetTags,\n    variables: {\n      input: {\n        assetId,\n        tags\n      }\n    }\n  })\n  return pathOr({}, ['data', 'assetSetTags'], result)\n}\n\nexport const searchAssets = async (op, input, jwt) => {\n  const { assetSearch } = pathOr(\n    { assets: [] },\n    ['data'],\n    await doQuery(search(op), { input })\n  )\n  const { results, page, pageSize, totalResults, totalPages } = assetSearch\n  // ewwwww\n  results.map(a => {\n    let url, thumbnailUrl\n    if (a.url) {\n      url = formatUrl(a.url, jwt)\n    }\n    if (a.thumbnailUrl) {\n      thumbnailUrl = formatUrl(a.thumbnailUrl, jwt)\n    }\n    return {\n      ...a,\n      url,\n      thumbnailUrl\n    }\n  })\n\n  return {\n    assets: results,\n    page,\n    pageSize,\n    totalResults,\n    totalPages\n  }\n}\n\nconst formatUrl = (url, jwt) => {\n  return url.split('?__jwt=')[0] + '?__jwt=' + jwt\n}\n"]}]}