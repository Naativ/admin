{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/users/UserDetails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/users/UserDetails.vue","mtime":1577329618152},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { get, isEmpty, isEqual } from 'lodash';\nimport moment from 'moment';\nimport { mapActions, mapGetters, mapMutations, mapState } from 'vuex';\nimport { ClaimActions } from '@/stores/ClaimStore';\nimport { UsersActions, UsersMutations } from '@/users/UsersStore';\nimport { StoreGetters } from '@/store';\nimport getLocalSettings from '@/graphql/GetLocaleSettings';\nimport GET_MEMBER_STATUS from '@/graphql/GetMemberStatus.gql';\nimport MEMBER_BY_ID from '@/graphql/MemberById.gql';\nimport { CONTACT_EMAIL_UPSERT } from '@/graphql/Contacts.js';\nimport iamUpsertUsername from '@/graphql/UpsertUsername.gql';\nimport PrepImpersonate from '@/iam/PrepImpersonate.vue';\nimport ChangeSponsorDialog from '@/components/ChangeSponsorDialog';\nexport default {\n  components: {\n    PrepImpersonate: PrepImpersonate,\n    ChangeSponsorDialog: ChangeSponsorDialog\n  },\n  data: function data() {\n    return {\n      loadingSponsor: false,\n      syncing: {\n        active: false,\n        message: 'Transferring data'\n      },\n      registerLoading: false,\n      resetLoading: false,\n      sponsorChange: {\n        show: false\n      },\n      tagsBeforeEdit: [],\n      showPrepDialog: false,\n      saveSpeedDial: false,\n      saveActivator: false,\n      saving: false,\n      editing: false,\n      formattedDate: null,\n      model: {\n        address: {},\n        phone: {},\n        slug: {}\n      },\n      moment: moment,\n      missing: false,\n      isUploading: false,\n      isSaving: false,\n      valid: true,\n      credentials: [],\n      credentialId: '',\n      identityId: null,\n      username: '',\n      memberStatus: [],\n      rules: {\n        birthdate: [function (v) {\n          return v && moment(v).isValid() || 'Birthday Must Be in MM/DD/YYYY Format';\n        }],\n        emailRules: [function (v) {\n          return !!v || 'E-mail is required';\n        }, function (v) {\n          return /.+@.+/.test(v) || 'E-mail must be valid';\n        }],\n        slug: [function (v) {\n          return !!v || 'Field is required and cannot be changed once submitted';\n        }, function (v) {\n          return v && /^[a-zA-Z0-9]+(?:-[a-z0-9]+)*$/.test(v) || 'Store name must not have spaces or special characters';\n        }, function (v) {\n          return v && v.length <= 20 && v.length >= 4 || 'Store name must be between 4 and 20 characters';\n        }]\n      },\n      settings: {},\n      snackbar: {\n        show: false,\n        message: undefined,\n        mandatory: false\n      }\n    };\n  },\n  computed: _objectSpread({}, mapGetters({\n    permissions: StoreGetters.permissions\n  }), mapState({\n    availableTags: function availableTags(state) {\n      return {\n        loading: state.tenants.tags.loading,\n        values: state.tenants.tags.values.map(function (e) {\n          return e.name;\n        })\n      };\n    }\n  }), {\n    canEdit: function canEdit() {\n      return this.editing && !this.syncing.active && !this.saving;\n    },\n    canImpersonate: function canImpersonate() {\n      return this.permissions.find(function (p) {\n        return p.id === 11 || p.id === 12;\n      });\n    },\n    canEditStatus: function canEditStatus() {\n      return this.permissions.find(function (p) {\n        return p.id === 16;\n      });\n    },\n    canChangeSponsor: function canChangeSponsor() {\n      return this.permissions.find(function (p) {\n        return p.id === 11 || p.id === 99;\n      });\n    },\n    id: function id() {\n      return ~~this.$route.params.id;\n    },\n    member: function member() {\n      return get(this.target, 'member', {});\n    }\n  }),\n  methods: _objectSpread({}, mapActions({\n    adjustTags: UsersActions.ADJUST_TAGS,\n    getAddress: UsersActions.GET_ADDRESS,\n    getCredentials: UsersActions.GET_USER_CREDENTIALS,\n    getPhone: UsersActions.GET_PHONE,\n    getUser: UsersActions.GET_USER,\n    upsertUser: UsersActions.UPSERT_USER,\n    _updateSlug: UsersActions.UPDATE_SLUG,\n    createSlug: UsersActions.CREATE_SLUG\n  }), mapMutations({\n    _updateAddress: UsersMutations.UPDATE_ADDRESS,\n    _updatePhone: UsersMutations.UPDATE_PHONE,\n    createPhone: UsersMutations.CREATE_PHONE,\n    updateMemberSubset: UsersMutations.UPDATE_SUBSET\n  }), {\n    getMemberStatus: function () {\n      var _getMemberStatus = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _ref, data;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.$apollo.query({\n                  query: GET_MEMBER_STATUS,\n                  fetchPolicy: 'network-only'\n                });\n\n              case 2:\n                _ref = _context.sent;\n                data = _ref.data;\n                this.memberStatus = data.getMemberStatus;\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getMemberStatus() {\n        return _getMemberStatus.apply(this, arguments);\n      }\n\n      return getMemberStatus;\n    }(),\n    showSponsor: function () {\n      var _showSponsor = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(sponsorId) {\n        var _ref2, data, sponsor;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.loadingSponsor = true;\n                _context2.next = 3;\n                return this.$apollo.query({\n                  query: MEMBER_BY_ID,\n                  variables: {\n                    condition: {\n                      tenantOids: [sponsorId]\n                    }\n                  }\n                });\n\n              case 3:\n                _ref2 = _context2.sent;\n                data = _ref2.data;\n                sponsor = data.members;\n\n                if (sponsor.nodes && sponsor.nodes[0] && sponsor.nodes[0].id) {\n                  this.loadingSponsor = false;\n                  this.$router.push(\"/members/\".concat(sponsor.nodes[0].id));\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function showSponsor(_x) {\n        return _showSponsor.apply(this, arguments);\n      }\n\n      return showSponsor;\n    }(),\n    changeSponsor: function () {\n      var _changeSponsor = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.sponsorChange.show = true;\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function changeSponsor() {\n        return _changeSponsor.apply(this, arguments);\n      }\n\n      return changeSponsor;\n    }(),\n    sponsorChangeClose: function () {\n      var _sponsorChangeClose = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.sponsorChange.show = false;\n                _context4.next = 3;\n                return this.sync();\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function sponsorChangeClose() {\n        return _sponsorChangeClose.apply(this, arguments);\n      }\n\n      return sponsorChangeClose;\n    }(),\n    cancelEvent: function () {\n      var _cancelEvent = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5(e) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                e.preventDefault();\n                e.stopPropagation();\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function cancelEvent(_x2) {\n        return _cancelEvent.apply(this, arguments);\n      }\n\n      return cancelEvent;\n    }(),\n    startEdit: function startEdit() {\n      this.editing = true;\n      this.tagsBeforeEdit = this.model.tags; // this.saveActivator =\n    },\n    requiredRule: function requiredRule(field) {\n      return [function (v) {\n        return !!v || \"\".concat(field, \" is required\");\n      }];\n    },\n    prepImpersonate: function prepImpersonate(id) {\n      this.credentialId = id;\n      this.showPrepDialog = true;\n    },\n    closeDialog: function closeDialog() {\n      this.credentialId = '';\n      this.showPrepDialog = false;\n    },\n    saveAddress: function saveAddress() {\n      if (isEmpty(this.model.address)) return;\n      return this._updateAddress({\n        id: this.model.address.id,\n        name: this.model.address.name,\n        street: this.model.address.street,\n        city: this.model.address.city,\n        province: this.model.address.province,\n        country: this.model.address.country,\n        postalCode: this.model.address.postalCode,\n        street2: this.model.address.street2 || '',\n        memberId: this.model.memberId,\n        contactId: this.model.contacts[0].id\n      });\n    },\n    saveDate: function saveDate(date) {\n      this.$refs.dialog.save(date);\n    },\n    updatePhone: function () {\n      var _updatePhone = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6() {\n        var _this$model$phone, id, number, contactId;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (this.model.phone.number) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 2:\n                _this$model$phone = this.model.phone, id = _this$model$phone.id, number = _this$model$phone.number;\n                contactId = this.model.contacts[0].id;\n                return _context6.abrupt(\"return\", this.model.phone.id ? this._updatePhone({\n                  contactId: contactId,\n                  id: id,\n                  number: number\n                }) : this.createPhone({\n                  contactId: contactId,\n                  id: this.model.id,\n                  number: number\n                }));\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function updatePhone() {\n        return _updatePhone.apply(this, arguments);\n      }\n\n      return updatePhone;\n    }(),\n    updateSlug: function () {\n      var _updateSlug = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee7() {\n        var memberId, tenantId, _this$model$slug, id, slug, priority;\n\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(!this.model.slug || !this.model.slug.slug)) {\n                  _context7.next = 2;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\");\n\n              case 2:\n                memberId = ~~this.$route.params.id;\n                tenantId = this.model.tenantId;\n                _this$model$slug = this.model.slug, id = _this$model$slug.id, slug = _this$model$slug.slug, priority = _this$model$slug.priority;\n                return _context7.abrupt(\"return\", priority >= 0 ? this._updateSlug({\n                  id: id,\n                  slug: slug,\n                  priority: priority,\n                  memberId: memberId,\n                  tenantId: tenantId\n                }) : this.createSlug({\n                  slug: slug,\n                  memberId: memberId,\n                  tenantId: tenantId\n                }));\n\n              case 6:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function updateSlug() {\n        return _updateSlug.apply(this, arguments);\n      }\n\n      return updateSlug;\n    }(),\n    sync: function () {\n      var _sync = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee8(mustId) {\n        var memberId, user, contacts, address, phone;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                this.syncing.active = true;\n                this.syncing.message = 'Transferring data';\n                memberId = ~~(mustId || this.$route.params.id);\n\n                if (!memberId) {\n                  _context8.next = 27;\n                  break;\n                }\n\n                _context8.next = 6;\n                return this.getUser({\n                  id: memberId\n                });\n\n              case 6:\n                user = _context8.sent;\n                _context8.next = 9;\n                return this.getCredentials(memberId);\n\n              case 9:\n                this.credentials = _context8.sent;\n                this.model = _objectSpread({}, this.model, user, {\n                  contactEmail: user.contacts[0].emails[0].email,\n                  slug: _objectSpread({}, user.slugs[0])\n                });\n                contacts = this.model.contacts;\n                _context8.next = 14;\n                return this.getAddress(contacts[0].id);\n\n              case 14:\n                address = _context8.sent;\n                _context8.next = 17;\n                return this.getPhone(contacts[0].id);\n\n              case 17:\n                phone = _context8.sent;\n                this.model = _objectSpread({}, this.model, {\n                  address: _objectSpread({}, address),\n                  phone: _objectSpread({}, phone)\n                });\n                _context8.next = 21;\n                return this.getMemberStatus();\n\n              case 21:\n                if (this.model.birthdate) {\n                  this.model.birthdate = moment(this.model.birthdate).format('MM/DD/YYYY');\n                }\n\n                this.username = this.credentials.credentials[0].username;\n                this.identityId = this.credentials.credentials[0].identityId;\n                this.missing = false;\n                _context8.next = 29;\n                break;\n\n              case 27:\n                this.model = undefined;\n                this.missing = true;\n\n              case 29:\n                this.syncing.message = 'Transfer complete';\n\n              case 30:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function sync(_x3) {\n        return _sync.apply(this, arguments);\n      }\n\n      return sync;\n    }(),\n    upsertUsername: function upsertUsername() {\n      if (!this.credentials.credentials) {\n        return null;\n      }\n\n      var identityId = this.identityId,\n          username = this.username;\n      this.$apollo.mutate({\n        mutation: iamUpsertUsername,\n        variables: {\n          input: {\n            identityId: identityId,\n            username: username\n          }\n        }\n      });\n    },\n    cancelEdit: function () {\n      var _cancelEdit = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee9() {\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                this.editing = false;\n                _context9.next = 3;\n                return this.sync();\n\n              case 3:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function cancelEdit() {\n        return _cancelEdit.apply(this, arguments);\n      }\n\n      return cancelEdit;\n    }(),\n    resetPassword: function () {\n      var _resetPassword = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee10(cred) {\n        var username, _this$model, memberId, tenantId;\n\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                this.resetLoading = true;\n                _context10.prev = 1;\n                username = cred.username;\n                _this$model = this.model, memberId = _this$model.memberId, tenantId = _this$model.tenantId;\n                _context10.next = 6;\n                return this.$store.dispatch(ClaimActions.RESET, {\n                  memberId: memberId,\n                  tenantId: tenantId,\n                  email: username\n                });\n\n              case 6:\n                this.snackbar = {\n                  show: true,\n                  mandatory: true,\n                  message: \"Reset password for \".concat(username)\n                };\n                _context10.next = 13;\n                break;\n\n              case 9:\n                _context10.prev = 9;\n                _context10.t0 = _context10[\"catch\"](1);\n                console.warn('failed reset password', _context10.t0);\n                this.snackbar = {\n                  show: true,\n                  mandatory: true,\n                  message: \"Error: \".concat(_context10.t0.message)\n                };\n\n              case 13:\n                this.resetLoading = false;\n\n              case 14:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[1, 9]]);\n      }));\n\n      function resetPassword(_x4) {\n        return _resetPassword.apply(this, arguments);\n      }\n\n      return resetPassword;\n    }(),\n    register: function () {\n      var _register = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee11(cred) {\n        var username, _this$model2, memberId, tenantId;\n\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                this.registerLoading = true;\n                _context11.prev = 1;\n                username = cred.username;\n                _this$model2 = this.model, memberId = _this$model2.memberId, tenantId = _this$model2.tenantId;\n                _context11.next = 6;\n                return this.$store.dispatch(ClaimActions.CLAIM, {\n                  memberId: memberId,\n                  tenantId: tenantId,\n                  email: username\n                });\n\n              case 6:\n                this.snackbar = {\n                  show: true,\n                  mandatory: true,\n                  message: \"Sent claim instructions to \".concat(username)\n                };\n                _context11.next = 13;\n                break;\n\n              case 9:\n                _context11.prev = 9;\n                _context11.t0 = _context11[\"catch\"](1);\n                console.warn('failed claim', _context11.t0);\n                this.snackbar = {\n                  show: true,\n                  mandatory: true,\n                  message: \"Error: \".concat(_context11.t0.message)\n                };\n\n              case 13:\n                this.registerLoading = false;\n\n              case 14:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this, [[1, 9]]);\n      }));\n\n      function register(_x5) {\n        return _register.apply(this, arguments);\n      }\n\n      return register;\n    }(),\n    saveData: function () {\n      var _saveData = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee12() {\n        var formIsValid, operation, contactId, id, email, tagsStringArray, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, tag, msg;\n\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                formIsValid = this.$refs.form.validate();\n\n                if (!formIsValid) {\n                  _context12.next = 70;\n                  break;\n                }\n\n                this.saving = true;\n                operation = 'member details';\n                _context12.prev = 4;\n                _context12.next = 7;\n                return this.updateSlug();\n\n              case 7:\n                _context12.next = 9;\n                return this.updatePhone();\n\n              case 9:\n                _context12.next = 11;\n                return this.saveAddress();\n\n              case 11:\n                _context12.next = 13;\n                return this.upsertUsername();\n\n              case 13:\n                contactId = this.model.contacts[0].id;\n                id = this.model.contacts[0].id;\n                email = this.model.contactEmail;\n                _context12.next = 18;\n                return this.$apollo.mutate({\n                  mutation: CONTACT_EMAIL_UPSERT,\n                  variables: {\n                    input: {\n                      id: id,\n                      email: email,\n                      contactId: contactId\n                    }\n                  }\n                });\n\n              case 18:\n                _context12.next = 20;\n                return this.upsertUser({\n                  displayName: this.model.displayName,\n                  firstName: this.model.firstName,\n                  id: this.model.id,\n                  lastName: this.model.lastName,\n                  name: this.model.name,\n                  statusId: this.model.statusId\n                });\n\n              case 20:\n                _context12.next = 22;\n                return this.updateMemberSubset({\n                  birthday: this.model.birthdate ? moment(this.model.birthdate).format('YYYY-MM-DD') : null,\n                  legalLocaleId: this.model.legalLocaleId,\n                  languageId: this.model.languageId,\n                  memberId: this.model.id,\n                  timezoneId: this.model.timezoneId\n                });\n\n              case 22:\n                this.snackbar = {\n                  show: true,\n                  mandatory: true,\n                  message: 'Updated member details' // update the tags\n\n                };\n                tagsStringArray = [];\n\n                if (!(this.model.tags.length > 0)) {\n                  _context12.next = 44;\n                  break;\n                }\n\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context12.prev = 28;\n\n                for (_iterator = this.model.tags[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  tag = _step.value;\n                  tagsStringArray.push(\"\".concat(tag));\n                }\n\n                _context12.next = 36;\n                break;\n\n              case 32:\n                _context12.prev = 32;\n                _context12.t0 = _context12[\"catch\"](28);\n                _didIteratorError = true;\n                _iteratorError = _context12.t0;\n\n              case 36:\n                _context12.prev = 36;\n                _context12.prev = 37;\n\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n\n              case 39:\n                _context12.prev = 39;\n\n                if (!_didIteratorError) {\n                  _context12.next = 42;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 42:\n                return _context12.finish(39);\n\n              case 43:\n                return _context12.finish(36);\n\n              case 44:\n                operation = 'member tags';\n\n                if (isEqual(this.tagsBeforeEdit, this.model.tags)) {\n                  _context12.next = 53;\n                  break;\n                }\n\n                if (!(tagsStringArray.length > 0)) {\n                  _context12.next = 51;\n                  break;\n                }\n\n                _context12.next = 49;\n                return this.adjustTags({\n                  memberId: this.model.id,\n                  set: tagsStringArray\n                });\n\n              case 49:\n                _context12.next = 53;\n                break;\n\n              case 51:\n                _context12.next = 53;\n                return this.adjustTags({\n                  memberId: this.model.id,\n                  set: [],\n                  add: [],\n                  remove: this.tagsBeforeEdit\n                });\n\n              case 53:\n                this.snackbar = {\n                  show: true,\n                  mandatory: true,\n                  message: 'Updated member tags' // sync again\n\n                };\n                _context12.next = 56;\n                return this.sync();\n\n              case 56:\n                this.snackbar = {\n                  show: true,\n                  mandatory: false,\n                  message: 'Updated details and tags'\n                };\n                this.editing = false;\n                _context12.next = 65;\n                break;\n\n              case 60:\n                _context12.prev = 60;\n                _context12.t1 = _context12[\"catch\"](4);\n                console.warn('Failed updating member / tags', {\n                  error: _context12.t1\n                });\n                msg = get(_context12.t1, 'message', 'No error available').split('\\n')[0];\n                this.snackbar = {\n                  show: true,\n                  mandatory: false,\n                  message: \"Failed to update \".concat(operation, \":<br/> \").concat(msg)\n                };\n\n              case 65:\n                _context12.prev = 65;\n                this.saving = false;\n                return _context12.finish(65);\n\n              case 68:\n                _context12.next = 71;\n                break;\n\n              case 70:\n                this.snackbar = {\n                  show: true,\n                  mandatory: true,\n                  message: 'One or more fields were filled out incorrectly'\n                };\n\n              case 71:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this, [[4, 60, 65, 68], [28, 32, 36, 44], [37,, 39, 43]]);\n      }));\n\n      function saveData() {\n        return _saveData.apply(this, arguments);\n      }\n\n      return saveData;\n    }()\n  }),\n  beforeRouteUpdate: function () {\n    var _beforeRouteUpdate = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee13(to, from, next) {\n      return regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return this.sync(to.params.id);\n\n            case 2:\n              next();\n\n            case 3:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n\n    function beforeRouteUpdate(_x6, _x7, _x8) {\n      return _beforeRouteUpdate.apply(this, arguments);\n    }\n\n    return beforeRouteUpdate;\n  }(),\n  mounted: function () {\n    var _mounted = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee14() {\n      return regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return this.sync();\n\n            case 2:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14, this);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }(),\n  apollo: {\n    settings: getLocalSettings()\n  }\n};",{"version":3,"sources":["UserDetails.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-flex xs12 class=\"user-details\">\n    <hr />\n    <ChangeSponsorDialog :showing=\"sponsorChange.show\" @close=\"sponsorChangeClose\" />\n    <v-speed-dial\n      dark\n      fab\n      bottom\n      right\n      fixed\n      color=\"pink\"\n      v-model=\"saveSpeedDial\"\n      direction=\"top\"\n      :open-on-hover=\"true\"\n      transition=\"slide-y-transition\"\n      :disabled=\"!saving\"\n      class=\"edit-speed-dial\"\n    >\n      <v-btn\n        slot=\"activator\"\n        v-model=\"saveActivator\"\n        color=\"pink\"\n        dark\n        fab\n        @click=\"saveActivator= !saveActivator\"\n      >\n        <v-icon v-if=\"!editing\">more_vert</v-icon>\n        <v-icon v-else>save</v-icon>\n      </v-btn>\n      <v-btn v-if=\"!editing\" fab dark small color=\"green\" @click=\"startEdit()\">\n        <v-icon>edit</v-icon>\n      </v-btn>\n      <v-btn v-if=\"editing\" fab dark small color=\"green\" @click=\"saveData\">\n        <v-icon>check</v-icon>\n      </v-btn>\n      <v-btn v-if=\"editing\" fab dark small color=\"red\" @click=\"cancelEdit\">\n        <v-icon>cancel</v-icon>\n      </v-btn>\n    </v-speed-dial>\n    <PrepImpersonate\n      v-if=\"model && credentials\"\n      :credentialId=\"credentialId.toString()\"\n      :showPrepDialog=\"showPrepDialog\"\n      :memberId=\"model.id\"\n      :tenantId=\"credentials.tenantId\"\n      @closeDialog=\"closeDialog\"\n    />\n    <v-snackbar :timeout=\"8000\" :top=\"true\" :right=\"true\" v-model=\"snackbar.show\">\n      <span v-html=\"snackbar.message\" />\n      <v-btn\n        v-if=\"!snackbar.mandatory\"\n        flat\n        color=\"pink\"\n        @click.native=\"snackbar.show = false\"\n      >Close</v-btn>\n    </v-snackbar>\n    <div v-if=\"!model\">\n      <v-alert :value=\"missing\" type=\"error\">Could not load the requested user</v-alert>\n      <v-alert :value=\"!missing\" type=\"info\">Loading</v-alert>\n    </div>\n    <v-layout row wrap v-else justify-space-around>\n      <v-flex xs12 sm4 class=\"align-center\">\n        <v-flex xs12>\n          <img :src=\"model.profileUrl\" class=\"profile\" v-if=\"model.profileUrl\" />\n          <v-icon class=\"profile-icon\" v-else>person</v-icon>\n        </v-flex>\n        <v-flex xs12 sm8 class=\"margin-center\">\n          <v-select\n            :disabled=\"!canEditStatus || !canEdit\"\n            :box=\"canEditStatus && editing\"\n            v-model=\"model.statusId\"\n            :items=\"memberStatus\"\n            item-text=\"name\"\n            item-value=\"id\"\n            label=\"Status\"\n          />\n        </v-flex>\n        <v-flex xs12 sm8 class=\"margin-center\">\n          <v-combobox\n            chips\n            multiple\n            label=\"Tags\"\n            v-model=\"model.tags\"\n            :box=\"editing\"\n            :regular=\"!editing\"\n            :items=\"availableTags.values\"\n            item-text=\"blah\"\n            :disabled=\"!editing || availableTags.loading\"\n            :append-icon=\"editing ? '$vuetify.icons.dropdown' : null\"\n          ></v-combobox>\n        </v-flex>\n      </v-flex>\n\n      <v-flex xs12 sm8>\n        <v-form ref=\"form\">\n          <v-layout justify-center fill-height row wrap>\n            <v-flex sm6 xs12>\n              <v-text-field v-model=\"model.mrn\" label=\"Member Number\" required regular disabled />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field v-model=\"model.tenantOid\" label=\"Member Oid\" required regular disabled />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field\n                v-model=\"model.name\"\n                label=\"Name\"\n                required\n                :box=\"editing\"\n                :regular=\"!editing\"\n                :disabled=\"!canEdit\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field\n                v-model=\"model.firstName\"\n                label=\"First Name\"\n                required\n                :box=\"editing\"\n                :regular=\"!editing\"\n                :disabled=\"!canEdit\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field\n                v-model=\"model.slug.slug\"\n                label=\"Slug\"\n                :rules=\"(model.slug && model.slug.length) ? rules.slug : []\"\n                :box=\"editing\"\n                :regular=\"!editing\"\n                :disabled=\"!canEdit\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field\n                v-model=\"model.phone.number\"\n                label=\"Phone Number\"\n                required\n                mask=\"phone\"\n                :box=\"editing\"\n                :regular=\"!editing\"\n                :disabled=\"!canEdit\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field label=\"Claimed On\" v-model=\"model.claimedOn\" disabled />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field\n                label=\"Joined On\"\n                v-model=\"model.joinedOn\"\n                disabled\n                format=\"MM/DD/YYYY\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field v-model=\"model.id\" label=\"System ID\" regular disabled />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field\n                :disabled=\"!canEdit\"\n                v-model=\"model.birthdate\"\n                label=\"Date of Birth\"\n                placeholder=\"MM/DD/YYYY\"\n                :rules=\"model.birthdate ? rules.birthdate : []\"\n              ></v-text-field>\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field\n                v-model=\"model.displayName\"\n                label=\"Display Name\"\n                required\n                :box=\"editing\"\n                :regular=\"!editing\"\n                :disabled=\"!canEdit\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field\n                v-model=\"model.lastName\"\n                label=\"Last Name\"\n                required\n                :box=\"editing\"\n                :regular=\"!editing\"\n                :disabled=\"!canEdit\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field\n                v-model=\"model.contactEmail\"\n                :rules=\"rules.emailRules\"\n                label=\"E-mail\"\n                required\n                :box=\"editing\"\n                :regular=\"!editing\"\n                :disabled=\"!canEdit\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-select\n                :disabled=\"!canEdit\"\n                :items=\"settings.legalLocales\"\n                item-text=\"name\"\n                item-value=\"id\"\n                label=\"Select your locale\"\n                v-model=\"model.legalLocaleId\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-select\n                :disabled=\"!canEdit\"\n                :items=\"settings.languages\"\n                item-text=\"name\"\n                item-value=\"id\"\n                label=\"Select your Language\"\n                v-model=\"model.languageId\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-autocomplete\n                :disabled=\"!canEdit\"\n                :items=\"settings.timezones\"\n                item-text=\"name\"\n                item-value=\"id\"\n                label=\"Select your Timezone\"\n                v-model=\"model.timezoneId\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <v-text-field\n                prepend-icon=\"vertical_align_top\"\n                @click:prepend=\"showSponsor(model.sponsorOid)\"\n                :append-outer-icon=\"canChangeSponsor ? 'edit' : null\"\n                @click=\"cancelEvent\"\n                @hover=\"cancelEvent\"\n                @click:append-outer=\"changeSponsor\"\n                v-model=\"model.sponsorOid\"\n                label=\"Sponsor Oid\"\n                required\n                regular\n                :readonly=\"true\"\n                :loading=\"loadingSponsor\"\n              />\n            </v-flex>\n            <v-flex sm6 xs12></v-flex>\n          </v-layout>\n          <v-layout justify-center fill-height row wrap>\n            <v-flex sm6 xs12>\n              <h3 class=\"credential-header\">Address</h3>\n              <v-text-field\n                :disabled=\"!canEdit\"\n                label=\"Name\"\n                required\n                v-model=\"model.address.name\"\n              />\n              <v-text-field\n                :disabled=\"!canEdit\"\n                label=\"Street\"\n                required\n                v-model=\"model.address.street\"\n              />\n              <v-text-field :disabled=\"!canEdit\" label=\"Street 2\" v-model=\"model.address.street2\" />\n              <v-text-field\n                :disabled=\"!canEdit\"\n                label=\"City\"\n                required\n                v-model=\"model.address.city\"\n              />\n              <v-text-field\n                :disabled=\"!canEdit\"\n                label=\"State/Province\"\n                v-model=\"model.address.province\"\n                required\n              />\n              <v-text-field\n                :disabled=\"!canEdit\"\n                label=\"Postal Code\"\n                v-model=\"model.address.postalCode\"\n                required\n              />\n              <v-text-field\n                :disabled=\"!canEdit\"\n                label=\"Country\"\n                v-model=\"model.address.country\"\n                required\n              />\n            </v-flex>\n            <v-flex sm6 xs12>\n              <h3 class=\"credential-header\">User Credentials</h3>\n\n              <div\n                :key=\"index\"\n                class=\"credential-card\"\n                v-for=\"(data, index) in credentials.credentials\"\n              >\n                <v-text-field\n                  :box=\"editing\"\n                  :regular=\"!editing\"\n                  :disabled=\"!canEdit\"\n                  label=\"Username\"\n                  v-model=\"username\"\n                  prepend-icon=\"person\"\n                  required\n                />\n                <v-text-field v-model=\"identityId\" prepend-icon=\"lock\" required disabled />\n\n                <v-menu bottom left>\n                  <v-btn :loading=\"resetLoading || registerLoading\" slot=\"activator\">Actions</v-btn>\n                  <v-list>\n                    <v-list-tile\n                      v-if=\"canImpersonate\"\n                      @click=\"prepImpersonate(credentials.credentials[index].id)\"\n                    >\n                      <v-list-tile-title>Impersonate</v-list-tile-title>\n                    </v-list-tile>\n                    <v-list-tile @click=\"resetPassword(credentials.credentials[index])\">\n                      <v-list-tile-title>Reset Password</v-list-tile-title>\n                    </v-list-tile>\n                    <v-list-tile @click=\"register(credentials.credentials[index])\">\n                      <v-list-tile-title>Claim Account</v-list-tile-title>\n                    </v-list-tile>\n                  </v-list>\n                </v-menu>\n              </div>\n            </v-flex>\n          </v-layout>\n        </v-form>\n      </v-flex>\n    </v-layout>\n    <v-snackbar v-model=\"syncing.active\" :timeout=\"1200\" bottom vertical auto-height>\n      <span style=\"text-align: center;\">{{syncing.message}}</span>\n    </v-snackbar>\n  </v-flex>\n</template>\n\n<script>\nimport { get, isEmpty, isEqual } from 'lodash'\nimport moment from 'moment'\nimport { mapActions, mapGetters, mapMutations, mapState } from 'vuex'\n\nimport { ClaimActions } from '@/stores/ClaimStore'\nimport { UsersActions, UsersMutations } from '@/users/UsersStore'\nimport { StoreGetters } from '@/store'\n\nimport getLocalSettings from '@/graphql/GetLocaleSettings'\nimport GET_MEMBER_STATUS from '@/graphql/GetMemberStatus.gql'\nimport MEMBER_BY_ID from '@/graphql/MemberById.gql'\nimport { CONTACT_EMAIL_UPSERT } from '@/graphql/Contacts.js'\nimport iamUpsertUsername from '@/graphql/UpsertUsername.gql'\n\nimport PrepImpersonate from '@/iam/PrepImpersonate.vue'\nimport ChangeSponsorDialog from '@/components/ChangeSponsorDialog'\n\nexport default {\n  components: {\n    PrepImpersonate,\n    ChangeSponsorDialog\n  },\n  data () {\n    return {\n      loadingSponsor: false,\n      syncing: {\n        active: false,\n        message: 'Transferring data'\n      },\n      registerLoading: false,\n      resetLoading: false,\n      sponsorChange: {\n        show: false\n      },\n      tagsBeforeEdit: [],\n      showPrepDialog: false,\n      saveSpeedDial: false,\n      saveActivator: false,\n      saving: false,\n      editing: false,\n      formattedDate: null,\n      model: {\n        address: {},\n        phone: {},\n        slug: {}\n      },\n      moment,\n      missing: false,\n      isUploading: false,\n      isSaving: false,\n      valid: true,\n      credentials: [],\n      credentialId: '',\n      identityId: null,\n      username: '',\n      memberStatus: [],\n      rules: {\n        birthdate: [\n          v => (v && moment(v).isValid()) || 'Birthday Must Be in MM/DD/YYYY Format'\n        ],\n        emailRules: [\n          v => !!v || 'E-mail is required',\n          v => /.+@.+/.test(v) || 'E-mail must be valid'\n        ],\n        slug: [\n          v => !!v || 'Field is required and cannot be changed once submitted',\n          v =>\n            (v && /^[a-zA-Z0-9]+(?:-[a-z0-9]+)*$/.test(v)) ||\n            'Store name must not have spaces or special characters',\n          v => {\n            return (\n              (v && v.length <= 20 && v.length >= 4) ||\n              'Store name must be between 4 and 20 characters'\n            )\n          }\n        ]\n      },\n      settings: {},\n      snackbar: {\n        show: false,\n        message: undefined,\n        mandatory: false\n      }\n    }\n  },\n  computed: {\n    ...mapGetters({\n      permissions: StoreGetters.permissions\n    }),\n    ...mapState({\n      availableTags: state => ({\n        loading: state.tenants.tags.loading,\n        values: state.tenants.tags.values.map(e => e.name)\n      })\n    }),\n    canEdit () { return this.editing && !this.syncing.active && !this.saving },\n    canImpersonate () {\n      return this.permissions.find(p => p.id === 11 || p.id === 12)\n    },\n    canEditStatus () {\n      return this.permissions.find(p => p.id === 16)\n    },\n    canChangeSponsor () {\n      return this.permissions.find(p => p.id === 11 || p.id === 99)\n    },\n    id () { return ~~this.$route.params.id },\n    member () { return get(this.target, 'member', {}) }\n  },\n  methods: {\n    ...mapActions({\n      adjustTags: UsersActions.ADJUST_TAGS,\n      getAddress: UsersActions.GET_ADDRESS,\n      getCredentials: UsersActions.GET_USER_CREDENTIALS,\n      getPhone: UsersActions.GET_PHONE,\n      getUser: UsersActions.GET_USER,\n      upsertUser: UsersActions.UPSERT_USER,\n      _updateSlug: UsersActions.UPDATE_SLUG,\n      createSlug: UsersActions.CREATE_SLUG\n    }),\n    ...mapMutations({\n      _updateAddress: UsersMutations.UPDATE_ADDRESS,\n      _updatePhone: UsersMutations.UPDATE_PHONE,\n      createPhone: UsersMutations.CREATE_PHONE,\n      updateMemberSubset: UsersMutations.UPDATE_SUBSET\n    }),\n    async getMemberStatus () {\n      const { data } = await this.$apollo.query({\n        query: GET_MEMBER_STATUS,\n        fetchPolicy: 'network-only'\n      })\n      this.memberStatus = data.getMemberStatus\n    },\n    async showSponsor (sponsorId) {\n      this.loadingSponsor = true\n      const { data } = await this.$apollo.query({\n        query: MEMBER_BY_ID,\n        variables: {\n          condition: {\n            tenantOids: [sponsorId]\n          }\n        }\n      })\n      const sponsor = data.members\n      if (sponsor.nodes && sponsor.nodes[0] && sponsor.nodes[0].id) {\n        this.loadingSponsor = false\n        this.$router.push(`/members/${sponsor.nodes[0].id}`)\n      }\n    },\n    async changeSponsor () {\n      this.sponsorChange.show = true\n    },\n    async sponsorChangeClose () {\n      this.sponsorChange.show = false\n      await this.sync()\n    },\n    async cancelEvent (e) {\n      e.preventDefault()\n      e.stopPropagation()\n    },\n    startEdit () {\n      this.editing = true\n      this.tagsBeforeEdit = this.model.tags\n      // this.saveActivator =\n    },\n    requiredRule (field) { return [v => !!v || `${field} is required`] },\n    prepImpersonate (id) {\n      this.credentialId = id\n      this.showPrepDialog = true\n    },\n    closeDialog () {\n      this.credentialId = ''\n      this.showPrepDialog = false\n    },\n    saveAddress () {\n      if (isEmpty(this.model.address)) return\n      return this._updateAddress({\n        id: this.model.address.id,\n        name: this.model.address.name,\n        street: this.model.address.street,\n        city: this.model.address.city,\n        province: this.model.address.province,\n        country: this.model.address.country,\n        postalCode: this.model.address.postalCode,\n        street2: this.model.address.street2 || '',\n        memberId: this.model.memberId,\n        contactId: this.model.contacts[0].id\n      })\n    },\n    saveDate (date) {\n      this.$refs.dialog.save(date)\n    },\n    async updatePhone () {\n      if (!this.model.phone.number) return\n      const { id, number } = this.model.phone\n      const contactId = this.model.contacts[0].id\n      return this.model.phone.id\n        ? this._updatePhone({ contactId, id, number })\n        : this.createPhone({ contactId, id: this.model.id, number })\n    },\n    async updateSlug () {\n      if (!this.model.slug || !this.model.slug.slug) return\n      const memberId = ~~this.$route.params.id\n      const { tenantId } = this.model\n      const { id, slug, priority } = this.model.slug\n      return priority >= 0\n        ? this._updateSlug({ id, slug, priority, memberId, tenantId })\n        : this.createSlug({ slug, memberId, tenantId })\n    },\n    async sync (mustId) {\n      this.syncing.active = true\n      this.syncing.message = 'Transferring data'\n      const memberId = ~~(mustId || this.$route.params.id)\n      if (memberId) {\n        const user = await this.getUser({ id: memberId })\n        this.credentials = await this.getCredentials(memberId)\n        this.model = {\n          ...this.model,\n          ...user,\n          contactEmail: user.contacts[0].emails[0].email,\n          slug: { ...user.slugs[0] }\n        }\n        const { contacts } = this.model\n        const address = await this.getAddress(contacts[0].id)\n        const phone = await this.getPhone(contacts[0].id)\n        this.model = {\n          ...this.model,\n          address: { ...address },\n          phone: { ...phone }\n        }\n        await this.getMemberStatus()\n        if (this.model.birthdate) {\n          this.model.birthdate = moment(this.model.birthdate).format('MM/DD/YYYY')\n        }\n        this.username = this.credentials.credentials[0].username\n        this.identityId = this.credentials.credentials[0].identityId\n        this.missing = false\n      } else {\n        this.model = undefined\n        this.missing = true\n      }\n      this.syncing.message = 'Transfer complete'\n    },\n    upsertUsername () {\n      if (!this.credentials.credentials) {\n        return null\n      }\n      const { identityId, username } = this\n      this.$apollo.mutate({\n        mutation: iamUpsertUsername,\n        variables: {\n          input: {\n            identityId,\n            username\n          }\n        }\n      })\n    },\n    async cancelEdit () {\n      this.editing = false\n      await this.sync()\n    },\n    async resetPassword (cred) {\n      this.resetLoading = true\n      try {\n        const { username } = cred\n        const { memberId, tenantId } = this.model\n        await this.$store.dispatch(ClaimActions.RESET, { memberId, tenantId, email: username })\n        this.snackbar = {\n          show: true,\n          mandatory: true,\n          message: `Reset password for ${username}`\n        }\n      } catch (error) {\n        console.warn('failed reset password', error)\n        this.snackbar = {\n          show: true,\n          mandatory: true,\n          message: `Error: ${error.message}`\n        }\n      }\n      this.resetLoading = false\n    },\n    async register (cred) {\n      this.registerLoading = true\n      try {\n        const { username } = cred\n        const { memberId, tenantId } = this.model\n        await this.$store.dispatch(ClaimActions.CLAIM, { memberId, tenantId, email: username })\n        this.snackbar = {\n          show: true,\n          mandatory: true,\n          message: `Sent claim instructions to ${username}`\n        }\n      } catch (error) {\n        console.warn('failed claim', error)\n        this.snackbar = {\n          show: true,\n          mandatory: true,\n          message: `Error: ${error.message}`\n        }\n      }\n      this.registerLoading = false\n    },\n    async saveData () {\n      const formIsValid = this.$refs.form.validate()\n      if (formIsValid) {\n        this.saving = true\n        let operation = 'member details'\n        try {\n          // update the user\n          await this.updateSlug()\n          await this.updatePhone()\n          await this.saveAddress()\n          await this.upsertUsername()\n\n          const contactId = this.model.contacts[0].id\n          const { id } = this.model.contacts[0]\n          const email = this.model.contactEmail\n\n          await this.$apollo.mutate({\n            mutation: CONTACT_EMAIL_UPSERT,\n            variables: {\n              input: {\n                id,\n                email,\n                contactId\n              }\n            }\n          })\n          await this.upsertUser({\n            displayName: this.model.displayName,\n            firstName: this.model.firstName,\n            id: this.model.id,\n            lastName: this.model.lastName,\n            name: this.model.name,\n            statusId: this.model.statusId\n          })\n          await this.updateMemberSubset({\n            birthday: this.model.birthdate ? moment(this.model.birthdate).format('YYYY-MM-DD') : null,\n            legalLocaleId: this.model.legalLocaleId,\n            languageId: this.model.languageId,\n            memberId: this.model.id,\n            timezoneId: this.model.timezoneId\n          })\n\n          this.snackbar = {\n            show: true,\n            mandatory: true,\n            message: 'Updated member details'\n          }\n          // update the tags\n          let tagsStringArray = []\n          if (this.model.tags.length > 0) {\n            for (let tag of this.model.tags) {\n              tagsStringArray.push(`${tag}`)\n            }\n          }\n          operation = 'member tags'\n          if (!isEqual(this.tagsBeforeEdit, this.model.tags)) {\n            if (tagsStringArray.length > 0) {\n              await this.adjustTags({\n                memberId: this.model.id,\n                set: tagsStringArray\n              })\n            } else {\n              await this.adjustTags({\n                memberId: this.model.id,\n                set: [],\n                add: [],\n                remove: this.tagsBeforeEdit\n              })\n            }\n          }\n          this.snackbar = {\n            show: true,\n            mandatory: true,\n            message: 'Updated member tags'\n          }\n          // sync again\n          await this.sync()\n          this.snackbar = {\n            show: true,\n            mandatory: false,\n            message: 'Updated details and tags'\n          }\n          this.editing = false\n        } catch (error) {\n          console.warn('Failed updating member / tags', { error })\n          const msg = get(error, 'message', 'No error available').split('\\n')[0]\n          this.snackbar = {\n            show: true,\n            mandatory: false,\n            message: `Failed to update ${operation}:<br/> ${msg}`\n          }\n        } finally {\n          this.saving = false\n        }\n      } else {\n        this.snackbar = {\n          show: true,\n          mandatory: true,\n          message: 'One or more fields were filled out incorrectly'\n        }\n      }\n    }\n  },\n  async beforeRouteUpdate (to, from, next) {\n    await this.sync(to.params.id)\n    next()\n  },\n  async mounted () {\n    await this.sync()\n  },\n  apollo: {\n    settings: getLocalSettings()\n  }\n}\n</script>\n\n<style scoped>\n.v-input {\n  padding-right: 15px;\n}\n.user-details {\n  padding-top: 15px;\n}\n.user-details .v-text-field--box .v-input__slot {\n  background: #fff !important;\n}\n.profile {\n  width: 200px;\n  height: 200px;\n  border: 1px solid #ccc;\n}\n.profile-icon {\n  font-size: 110px !important;\n  width: 200px;\n  height: 200px;\n  border: 1px solid #ccc;\n}\n.credential-card {\n  border: 1px solid #efefef;\n  padding: 15px;\n}\n\n.credential-header {\n  padding: 10px 0px;\n}\n\n.edit-speed-dial {\n  bottom: 20px;\n  right: 30px;\n}\n</style>\n"],"sourceRoot":"src/views/users"}]}