{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/Import.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/Import.vue","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { Actions } from '@/store';\nimport GET_FEEDS from '@/graphql/Feeds.gql';\nvar EMPTY_DESTINATION = {\n  url: '',\n  fields: []\n};\nexport default {\n  name: 'Import',\n  methods: {\n    goToJob: function goToJob(job) {\n      this.$router.push({\n        path: \"/job/\".concat(job.id)\n      });\n    },\n    filesChange: function () {\n      var _filesChange = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(files) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.file = files[0];\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function filesChange(_x) {\n        return _filesChange.apply(this, arguments);\n      }\n\n      return filesChange;\n    }(),\n    processUpload: function () {\n      var _processUpload = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getDestination();\n\n              case 2:\n                this.isSaving = true;\n                this.isUploading = true;\n                _context2.next = 6;\n                return this.$store.dispatch(Actions.FILE_UPLOAD, {\n                  file: this.file,\n                  destination: this.destination\n                });\n\n              case 6:\n                this.isFalse = false;\n                this.isUploading = false;\n                this.file = undefined;\n                this.destination = EMPTY_DESTINATION;\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function processUpload() {\n        return _processUpload.apply(this, arguments);\n      }\n\n      return processUpload;\n    }(),\n    getDestination: function () {\n      var _getDestination = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var _ref, data, destination;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.$store.dispatch(Actions.GET_UPLOAD_DESTINATION, {});\n\n              case 2:\n                _ref = _context3.sent;\n                data = _ref.data;\n                destination = data.destination;\n                destination.fields = Object.keys(destination.fields).reduce(function (arr, prop) {\n                  arr.push({\n                    name: prop,\n                    value: destination.fields[prop]\n                  });\n                  return arr;\n                }, []);\n                this.destination = destination;\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getDestination() {\n        return _getDestination.apply(this, arguments);\n      }\n\n      return getDestination;\n    }()\n  },\n  data: function data() {\n    return {\n      destination: EMPTY_DESTINATION,\n      file: undefined,\n      uploadFileName: null,\n      isUploading: false,\n      isSaving: false,\n      showFileUpload: false,\n      headers: [{\n        text: 'ID',\n        value: 'id',\n        sortable: false\n      }, {\n        text: 'Type',\n        value: 'feedTypeName'\n      }, {\n        text: 'Status',\n        value: 'statusName'\n      }, {\n        text: 'Started',\n        value: 'started'\n      }, {\n        text: 'Pending',\n        value: 'pending'\n      }, {\n        text: 'Completed',\n        value: 'complete'\n      }, {\n        text: 'Errored',\n        value: 'errored'\n      }, {\n        text: 'Total Records',\n        value: 'total'\n      }, {\n        text: 'Date Imported',\n        value: 'createdOn'\n      }],\n      items: []\n    };\n  },\n  apollo: {\n    items: {\n      query: GET_FEEDS,\n      variables: function variables() {\n        return {\n          condition: {}\n        };\n      },\n      update: function update(_ref2) {\n        var allFeeds = _ref2.allFeeds;\n        return allFeeds.nodes;\n      }\n    }\n  }\n};",{"version":3,"sources":["Import.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-flex xs12>\n    <div class=\"import\">\n      <h1>Import</h1>\n      <v-icon v-if=\"!showFileUpload\" v-on:click=\"showFileUpload = true\">add</v-icon>\n      <v-icon v-if=\"showFileUpload\" v-on:click=\"showFileUpload = false\">remove</v-icon>\n    </div>\n    <form v-if=\"showFileUpload\" enctype=\"multipart/form-data\" novalidate>\n        <input\n          type=\"file\"\n          name=\"import\"\n          :disabled=\"isSaving\"\n          @change=\"filesChange($event.target.files)\"\n          accept=\".csv\"\n        />\n        <div\n          v-for=\"(field) in destination.fields\"\n          :key=\"field.name\"\n        >\n          <label class=\"bold\">{{field.name}}: </label>\n          <input type=\"text\" v-model=\"field.value\">\n        </div>\n        <div>\n          <div v-if=\"!isUploading\">\n            <v-btn color=\"success\" @click=\"processUpload()\" :disabled=\"!file\">Upload</v-btn>\n          </div>\n          <div v-if=\"isUploading\">Uploading... please wait</div>\n        </div>\n    </form>\n    <v-data-table\n        :headers=\"headers\"\n        :items=\"items\"\n        hide-actions\n        class=\"elevation-1\"\n      >\n        <template slot=\"items\" slot-scope=\"props\">\n           <tr @click=\"goToJob(props.item)\">\n            <td>{{ props.item.id }}</td>\n            <td>{{ props.item.feedTypeName }}</td>\n            <td>{{ props.item.statusName }}</td>\n            <td>{{ props.item.started }}</td>\n            <td>{{ props.item.pending }}</td>\n            <td>{{ props.item.complete }}</td>\n            <td>{{ props.item.errored }}</td>\n            <td>{{ props.item.total }}</td>\n            <td>{{ props.item.createdOn | formatDate('DD')}}</td>\n          </tr>\n        </template>\n      </v-data-table>\n  </v-flex>\n</template>\n<script>\nimport { Actions } from '@/store'\nimport GET_FEEDS from '@/graphql/Feeds.gql'\nconst EMPTY_DESTINATION = { url: '', fields: [] }\n\nexport default {\n  name: 'Import',\n  methods: {\n    goToJob(job) {\n      this.$router.push({ path: `/job/${job.id}` })\n    },\n    async filesChange(files) {\n      this.file = files[0]\n    },\n    async processUpload() {\n      await this.getDestination()\n      this.isSaving = true\n      this.isUploading = true\n      await this.$store.dispatch(Actions.FILE_UPLOAD, {\n        file: this.file,\n        destination: this.destination\n      })\n      this.isFalse = false\n      this.isUploading = false\n      this.file = undefined\n      this.destination = EMPTY_DESTINATION\n    },\n    async getDestination() {\n      const { data } = await this.$store.dispatch(\n        Actions.GET_UPLOAD_DESTINATION,\n        {}\n      )\n\n      const destination = data.destination\n      destination.fields = Object.keys(destination.fields).reduce(\n        (arr, prop) => {\n          arr.push({\n            name: prop,\n            value: destination.fields[prop]\n          })\n          return arr\n        },\n        []\n      )\n      this.destination = destination\n    }\n  },\n  data() {\n    return {\n      destination: EMPTY_DESTINATION,\n      file: undefined,\n      uploadFileName: null,\n      isUploading: false,\n      isSaving: false,\n      showFileUpload: false,\n      headers: [\n        { text: 'ID', value: 'id', sortable: false },\n        { text: 'Type', value: 'feedTypeName' },\n        { text: 'Status', value: 'statusName' },\n        { text: 'Started', value: 'started' },\n        { text: 'Pending', value: 'pending' },\n        { text: 'Completed', value: 'complete' },\n        { text: 'Errored', value: 'errored' },\n        { text: 'Total Records', value: 'total' },\n        { text: 'Date Imported', value: 'createdOn' }\n      ],\n      items: []\n    }\n  },\n  apollo: {\n    items: {\n      query: GET_FEEDS,\n      variables() {\n        return {\n          condition: {}\n        }\n      },\n      update({ allFeeds }) {\n        return allFeeds.nodes\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.bold {\n  font-weight: 600;\n}\n</style>\n"],"sourceRoot":"src/views"}]}