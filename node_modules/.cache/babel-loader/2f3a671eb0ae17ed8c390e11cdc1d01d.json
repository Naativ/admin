{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/components/TeamCard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/components/TeamCard.vue","mtime":1581353753560},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import * as R from 'ramda'\nimport { mapGetters } from 'vuex';\nimport { StoreGetters } from '@/store';\nimport { ClaimActions } from '@/stores/ClaimStore';\nexport default {\n  name: 'TeamCard',\n  data: function data() {\n    return {\n      show: false,\n      resetLoading: false,\n      registerLoading: false\n    };\n  },\n  props: {\n    active: Boolean,\n    user: Object,\n    actions: Boolean,\n    stats: Object,\n    loading: Boolean,\n    hideButton: Boolean,\n    compStats: Object\n  },\n  methods: {\n    drillDown: function drillDown() {\n      this.$emit('drillDown', this.user);\n    },\n    viewMember: function viewMember() {\n      this.$emit('viewMember', this.user.memberId);\n    },\n    resetPassword: function () {\n      var _resetPassword = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _this$user, memberId, tenantId, email;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.resetLoading = true;\n                _context.prev = 1;\n                _this$user = this.user, memberId = _this$user.memberId, tenantId = _this$user.tenantId, email = _this$user.email;\n                _context.next = 5;\n                return this.$store.dispatch(ClaimActions.RESET, {\n                  memberId: memberId,\n                  tenantId: tenantId,\n                  email: email\n                });\n\n              case 5:\n                this.$emit('onSuccess', 'Password Reset Email sent successfully');\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](1);\n                this.$emit('onError', _context.t0);\n\n              case 11:\n                this.resetLoading = false;\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 8]]);\n      }));\n\n      function resetPassword() {\n        return _resetPassword.apply(this, arguments);\n      }\n\n      return resetPassword;\n    }(),\n    register: function () {\n      var _register = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var _this$user2, memberId, tenantId, email;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.registerLoading = true;\n                _context2.prev = 1;\n                _this$user2 = this.user, memberId = _this$user2.memberId, tenantId = _this$user2.tenantId, email = _this$user2.email;\n                _context2.next = 5;\n                return this.$store.dispatch(ClaimActions.CLAIM, {\n                  memberId: memberId,\n                  tenantId: tenantId,\n                  email: email\n                });\n\n              case 5:\n                this.$emit('onSuccess', 'Register Email sent successfully');\n                _context2.next = 11;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](1);\n                this.$emit('onError', _context2.t0);\n\n              case 11:\n                this.registerLoading = false;\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 8]]);\n      }));\n\n      function register() {\n        return _register.apply(this, arguments);\n      }\n\n      return register;\n    }()\n  },\n  computed: _objectSpread({}, mapGetters({\n    access: StoreGetters.access\n  }), {\n    getAvatar: function getAvatar() {\n      return this.user && this.user.profileUrl || 'https://res.cloudinary.com/hexly/image/upload/dev/1001/avatar/undefined.jpg';\n    },\n    hasEmailChangePermissions: function hasEmailChangePermissions() {\n      var superAdmin = this.$store.state.user.principal.permissions.filter(function (perm) {\n        return perm.key === 'superadmin';\n      });\n      return this.user.email.trim().length < 1 || superAdmin.length > 0;\n    },\n    hasEmail: function hasEmail() {\n      return this.user.contacts[0].emails[0].email;\n    }\n  })\n};",{"version":3,"sources":["TeamCard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;AACA,SAAA,UAAA,QAAA,MAAA;AACA,SAAA,YAAA,QAAA,SAAA;AACA,SAAA,YAAA,QAAA,qBAAA;AACA,eAAA;AACA,QAAA,UADA;AAEA,QAAA;AAAA,WAAA;AACA,YAAA,KADA;AAEA,oBAAA,KAFA;AAGA,uBAAA;AAHA,KAAA;AAAA,GAFA;AAOA,SAAA;AACA,YAAA,OADA;AAEA,UAAA,MAFA;AAGA,aAAA,OAHA;AAIA,WAAA,MAJA;AAKA,aAAA,OALA;AAMA,gBAAA,OANA;AAOA,eAAA;AAPA,GAPA;AAgBA,WAAA;AACA,aADA,uBACA;AACA,WAAA,KAAA,CAAA,WAAA,EAAA,KAAA,IAAA;AACA,KAHA;AAIA,cAJA,wBAIA;AACA,WAAA,KAAA,CAAA,YAAA,EAAA,KAAA,IAAA,CAAA,QAAA;AACA,KANA;AAOA,iBAPA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQA,qBAAA,YAAA,GAAA,IAAA;AARA;AAAA,6BAUA,KAAA,IAVA,EAUA,QAVA,cAUA,QAVA,EAUA,QAVA,cAUA,QAVA,EAUA,KAVA,cAUA,KAVA;AAAA;AAAA,uBAWA,KAAA,MAAA,CAAA,QAAA,CAAA,aAAA,KAAA,EAAA;AAAA,oCAAA;AAAA,oCAAA;AAAA;AAAA,iBAAA,CAXA;;AAAA;AAYA,qBAAA,KAAA,CAAA,WAAA,EAAA,wCAAA;AAZA;AAAA;;AAAA;AAAA;AAAA;AAcA,qBAAA,KAAA,CAAA,SAAA;;AAdA;AAgBA,qBAAA,YAAA,GAAA,KAAA;;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAkBA,YAlBA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAmBA,qBAAA,eAAA,GAAA,IAAA;AAnBA;AAAA,8BAqBA,KAAA,IArBA,EAqBA,QArBA,eAqBA,QArBA,EAqBA,QArBA,eAqBA,QArBA,EAqBA,KArBA,eAqBA,KArBA;AAAA;AAAA,uBAsBA,KAAA,MAAA,CAAA,QAAA,CAAA,aAAA,KAAA,EAAA;AAAA,oCAAA;AAAA,oCAAA;AAAA;AAAA,iBAAA,CAtBA;;AAAA;AAuBA,qBAAA,KAAA,CAAA,WAAA,EAAA,kCAAA;AAvBA;AAAA;;AAAA;AAAA;AAAA;AAyBA,qBAAA,KAAA,CAAA,SAAA;;AAzBA;AA2BA,qBAAA,eAAA,GAAA,KAAA;;AA3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,GAhBA;AA8CA,8BACA,WAAA;AACA,YAAA,aAAA;AADA,GAAA,CADA;AAIA,aAJA,uBAIA;AACA,aACA,KAAA,IAAA,IAAA,KAAA,IAAA,CAAA,UAAA,IACA,6EAFA;AAIA,KATA;AAUA,6BAVA,uCAUA;AACA,UAAA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,WAAA,CAAA,MAAA,CACA,gBAAA;AACA,eAAA,KAAA,GAAA,KAAA,YAAA;AACA,OAHA,CAAA;AAKA,aAAA,KAAA,IAAA,CAAA,KAAA,CAAA,IAAA,GAAA,MAAA,GAAA,CAAA,IAAA,WAAA,MAAA,GAAA,CAAA;AACA,KAjBA;AAkBA,YAlBA,sBAkBA;AACA,aAAA,KAAA,IAAA,CAAA,QAAA,CAAA,CAAA,EAAA,MAAA,CAAA,CAAA,EAAA,KAAA;AACA;AApBA;AA9CA,CAAA","sourcesContent":["<template>\n  <v-card class=\"team-card\" :class=\"{ active: active }\">\n    <v-container fluid grid-list-lg>\n      <v-layout row>\n        <v-flex xs7>\n          <div v-if=\"!loading\">\n            <router-link\n              :to=\"{ path: '/members/' + user.memberId, params: { id: user.memberId }}\"\n              class=\"headline\"\n            >{{user.name}}</router-link>\n            <div v-if=\"hasEmail\">Email: {{user.contacts[0].emails[0].email}}</div>\n            <div>Display Name: {{user.displayName}}</div>\n            <div v-if=\"access.hasSales\">\n              <div v-if=\"compStats && compStats.rank && compStats.rank.rank > -1\">Rank: {{compStats.rank.rank}}</div>\n              <div>Team Size: {{stats.teamSize || 0}}</div>\n              <div>Front Line: {{stats.firstLevelSize || 0}}</div>\n              <div>Total Points: {{stats.totalPoints || 0}}</div>\n              <div>Total Amount: {{stats.totalAmount || 0}}</div>\n            </div>\n          </div>\n          <div v-if=\"loading\">\n            <v-progress-circular indeterminate :size=\"50\" :width=\"5\" color=\"black\"></v-progress-circular>\n          </div>\n        </v-flex>\n        <v-flex xs5>\n          <v-card-media height=\"125px\" width=\"125px\">\n            <img :src=\"getAvatar\" />\n          </v-card-media>\n        </v-flex>\n      </v-layout>\n    </v-container>\n    <v-card-actions v-if=\"actions\">\n      <v-btn v-if=\"!hideButton\" left @click=\"drillDown\">Drill Down</v-btn>\n    </v-card-actions>\n  </v-card>\n</template>\n\n<script>\n// import * as R from 'ramda'\nimport { mapGetters } from 'vuex'\nimport { StoreGetters } from '@/store'\nimport { ClaimActions } from '@/stores/ClaimStore'\nexport default {\n  name: 'TeamCard',\n  data: () => ({\n    show: false,\n    resetLoading: false,\n    registerLoading: false\n  }),\n  props: {\n    active: Boolean,\n    user: Object,\n    actions: Boolean,\n    stats: Object,\n    loading: Boolean,\n    hideButton: Boolean,\n    compStats: Object\n  },\n  methods: {\n    drillDown () {\n      this.$emit('drillDown', this.user)\n    },\n    viewMember () {\n      this.$emit('viewMember', this.user.memberId)\n    },\n    async resetPassword () {\n      this.resetLoading = true\n      try {\n        const { memberId, tenantId, email } = this.user\n        await this.$store.dispatch(ClaimActions.RESET, { memberId, tenantId, email })\n        this.$emit('onSuccess', 'Password Reset Email sent successfully')\n      } catch (error) {\n        this.$emit('onError', error)\n      }\n      this.resetLoading = false\n    },\n    async register () {\n      this.registerLoading = true\n      try {\n        const { memberId, tenantId, email } = this.user\n        await this.$store.dispatch(ClaimActions.CLAIM, { memberId, tenantId, email })\n        this.$emit('onSuccess', 'Register Email sent successfully')\n      } catch (error) {\n        this.$emit('onError', error)\n      }\n      this.registerLoading = false\n    }\n  },\n  computed: {\n    ...mapGetters({\n      access: StoreGetters.access\n    }),\n    getAvatar () {\n      return (\n        (this.user && this.user.profileUrl) ||\n        'https://res.cloudinary.com/hexly/image/upload/dev/1001/avatar/undefined.jpg'\n      )\n    },\n    hasEmailChangePermissions () {\n      const superAdmin = this.$store.state.user.principal.permissions.filter(\n        perm => {\n          return perm.key === 'superadmin'\n        }\n      )\n      return this.user.email.trim().length < 1 || superAdmin.length > 0\n    },\n    hasEmail () {\n      return this.user.contacts[0].emails[0].email\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.team-card {\n  margin: 10px;\n  min-width: 350px;\n  max-width: 500px;\n}\n.team-card img {\n  width: 125px;\n  height: 125px;\n  margin: auto;\n}\n.team-card.active {\n  box-shadow: 0px 0px 2px 10px rgba(237, 115, 132, 0.2);\n}\n</style>\n"],"sourceRoot":"src/components"}]}