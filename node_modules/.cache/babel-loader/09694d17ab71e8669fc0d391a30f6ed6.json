{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/Teacher.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/Teacher.vue","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport MEMBER_BY_ID from '@/graphql/MemberById.gql';\nimport getTeamByMemberId from '@/graphql/GetTeam';\nimport UPDATE_MEMBER from '@/graphql/UpdateMember.gql'; // import moment from 'moment'\n\nimport Address from '@/components/Address';\nimport MemberInfo from '@/components/MemberInfo';\nimport { Actions } from '@/store'; // import { find, defaultTo, pathOr, map } from 'ramda'\n// import { log } from 'async'\n\nimport { pathOr } from 'ramda';\nexport default {\n  name: 'Teacher',\n  data: function data() {\n    return {\n      name: null,\n      visible: false,\n      password: '',\n      isSaving: false,\n      uploadFileName: null,\n      isUploading: false,\n      currentId: ~~this.$route.params.id,\n      snackbar: false,\n      snackbarMessage: '',\n      saving: false,\n      memberInfo: {\n        id: '',\n        name: '',\n        displayName: '',\n        contactEmail: '',\n        profileUrl: ''\n      },\n      results: {}\n    };\n  },\n  components: {\n    Address: Address,\n    MemberInfo: MemberInfo\n  },\n  methods: {\n    filesChange: function () {\n      var _filesChange = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(files) {\n        var file, _ref, data;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                file = files[0];\n                this.isSaving = true;\n                this.isUploading = true;\n                _context.next = 5;\n                return this.$store.dispatch(Actions.FILE_UPLOAD, {\n                  file: file\n                });\n\n              case 5:\n                _ref = _context.sent;\n                data = _ref.data;\n                this.isFalse = false;\n                this.isUploading = false;\n                this.MemberInfo.profileUrl = data.secure_url;\n                this.saveData();\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function filesChange(_x) {\n        return _filesChange.apply(this, arguments);\n      }\n\n      return filesChange;\n    }(),\n    saveData: function saveData() {\n      var _this = this;\n\n      this.saving = true;\n      this.$apollo.mutate({\n        mutation: UPDATE_MEMBER,\n        variables: {\n          memberInput: {\n            memberId: this.memberInfo.memberId,\n            name: this.memberInfo.name,\n            displayName: this.memberInfo.displayName,\n            contactEmail: this.memberInfo.email,\n            profileUrl: this.memberInfo.profileUrl\n          }\n        },\n        update: function update(store, response) {\n          _this.saving = false;\n          _this.snackbar = true;\n        }\n      });\n    },\n    showTeam: function showTeam(memberId) {\n      this.$router.push({\n        path: \"/teacher/\".concat(memberId == null ? '' : memberId)\n      });\n    },\n    onSuccess: function onSuccess(message) {\n      this.snackbar = true;\n      this.snackbarMessage = message;\n    },\n    onError: function onError(errorMessage) {\n      if (typeof errorMessage === 'string') {\n        this.error = errorMessage;\n      } else {\n        var errors = pathOr({}, ['response', 'data', 'errors'], errorMessage);\n        this.snackbarMessage = pathOr('There seems to be a problem. Please try again later or contact customer support.', ['message'], errors[0]);\n      }\n\n      this.snackbar = true;\n    }\n  },\n  computed: {\n    getAvatar: function getAvatar() {\n      return this.memberInfo.profileUrl || 'http://res.cloudinary.com/hexly/image/upload/dev/1001/avatar/undefined.jpg';\n    }\n  },\n  apollo: {\n    name: {\n      query: MEMBER_BY_ID,\n      variables: function variables() {\n        return {\n          condition: {\n            id: this.currentId\n          }\n        };\n      },\n      update: function update(_ref2) {\n        var allHierarchies = _ref2.allHierarchies;\n        return allHierarchies.nodes[0] ? allHierarchies.nodes[0].name : 'root';\n      },\n      skip: function skip() {\n        return this.$store.state.user.principal.tenantId === undefined;\n      }\n    },\n    results: function results() {\n      return getTeamByMemberId('currentId', this.$store.state.user.principal.tenantId);\n    },\n    update: function update(_ref3) {\n      var targetStats = _ref3.targetStats,\n          firstLevelStats = _ref3.firstLevelStats;\n      return targetStats.nodes.concat(firstLevelStats.nodes);\n    },\n    skip: function skip() {\n      return this.$store.state.user.principal.tenantId === undefined;\n    }\n  }\n};",{"version":3,"sources":["Teacher.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-flex xs12>\n    <div class=\"teacher\">\n      <h1>{{ name }}'s Profile</h1>\n      <div v-if=\"!$apollo.queries.results.loading\">\n        <v-flex xs4>\n          <div class=\"mx-auto\">\n            <h3>Profile Image</h3>\n            <img class=\"image\" :src=\"getAvatar\">\n            <form enctype=\"multipart/form-data\" novalidate>\n              <input\n                type=\"file\"\n                name=\"avatar\"\n                :disabled=\"isSaving\"\n                @change=\"filesChange($event.target.files)\"\n                accept=\"image/*\"\n              >\n              <div v-if=\"isUploading\">Uploading... please wait</div>\n            </form>\n          </div>\n        </v-flex>\n        <v-layout row wrap>\n          <v-flex lg6 v-if=\"results && results.target\">\n            <h3>Address</h3>\n            <Address :memberId=\"results.target.memberId\"/>\n          </v-flex>\n          <v-spacer></v-spacer>\n          <v-flex lg6 v-if=\"results && results.target\">\n            <h3>Profile Information</h3>\n            <MemberInfo :memberId=\"results.target.memberId\"/>\n          </v-flex>\n        </v-layout>\n      </div>\n      <div v-else>\n        <v-progress-circular indeterminate :size=\"70\" :width=\"7\" color=\"black\"/>\n      </div>\n    </div>\n    <v-snackbar :timeout=\"8000\" :top=\"true\" :right=\"true\" v-model=\"snackbar\">\n      {{snackbarMessage}}\n      <v-btn flat color=\"pink\" @click.native=\"snackbar = false\">Close</v-btn>\n    </v-snackbar>\n  </v-flex>\n</template>\n\n<script>\nimport MEMBER_BY_ID from '@/graphql/MemberById.gql'\nimport getTeamByMemberId from '@/graphql/GetTeam'\nimport UPDATE_MEMBER from '@/graphql/UpdateMember.gql'\n// import moment from 'moment'\nimport Address from '@/components/Address'\nimport MemberInfo from '@/components/MemberInfo'\nimport { Actions } from '@/store'\n// import { find, defaultTo, pathOr, map } from 'ramda'\n// import { log } from 'async'\nimport { pathOr } from 'ramda'\nexport default {\n  name: 'Teacher',\n  data() {\n    return {\n      name: null,\n      visible: false,\n      password: '',\n      isSaving: false,\n      uploadFileName: null,\n      isUploading: false,\n      currentId: ~~this.$route.params.id,\n      snackbar: false,\n      snackbarMessage: '',\n      saving: false,\n      memberInfo: {\n        id: '',\n        name: '',\n        displayName: '',\n        contactEmail: '',\n        profileUrl: ''\n      },\n      results: {}\n    }\n  },\n  components: {\n    Address,\n    MemberInfo\n  },\n  methods: {\n    async filesChange(files) {\n      const file = files[0]\n      this.isSaving = true\n      this.isUploading = true\n      const { data } = await this.$store.dispatch(Actions.FILE_UPLOAD, {\n        file\n      })\n      this.isFalse = false\n      this.isUploading = false\n      this.MemberInfo.profileUrl = data.secure_url\n      this.saveData()\n    },\n    saveData() {\n      this.saving = true\n      this.$apollo.mutate({\n        mutation: UPDATE_MEMBER,\n        variables: {\n          memberInput: {\n            memberId: this.memberInfo.memberId,\n            name: this.memberInfo.name,\n            displayName: this.memberInfo.displayName,\n            contactEmail: this.memberInfo.email,\n            profileUrl: this.memberInfo.profileUrl\n          }\n        },\n        update: (store, response) => {\n          this.saving = false\n          this.snackbar = true\n        }\n      })\n    },\n    showTeam(memberId) {\n      this.$router.push({\n        path: `/teacher/${memberId == null ? '' : memberId}`\n      })\n    },\n    onSuccess(message) {\n      this.snackbar = true\n      this.snackbarMessage = message\n    },\n    onError(errorMessage) {\n      if (typeof errorMessage === 'string') {\n        this.error = errorMessage\n      } else {\n        const errors = pathOr({}, ['response', 'data', 'errors'], errorMessage)\n        this.snackbarMessage = pathOr(\n          'There seems to be a problem. Please try again later or contact customer support.',\n          ['message'],\n          errors[0]\n        )\n      }\n      this.snackbar = true\n    }\n  },\n  computed: {\n    getAvatar() {\n      return (\n        this.memberInfo.profileUrl ||\n        'http://res.cloudinary.com/hexly/image/upload/dev/1001/avatar/undefined.jpg'\n      )\n    }\n  },\n  apollo: {\n    name: {\n      query: MEMBER_BY_ID,\n      variables() {\n        return {\n          condition: {\n            id: this.currentId\n          }\n        }\n      },\n      update({ allHierarchies }) {\n        return allHierarchies.nodes[0] ? allHierarchies.nodes[0].name : 'root'\n      },\n      skip() {\n        return this.$store.state.user.principal.tenantId === undefined\n      }\n    },\n    results() {\n      return getTeamByMemberId(\n        'currentId',\n        this.$store.state.user.principal.tenantId\n      )\n    },\n    update({ targetStats, firstLevelStats }) {\n      return targetStats.nodes.concat(firstLevelStats.nodes)\n    },\n    skip() {\n      return this.$store.state.user.principal.tenantId === undefined\n    }\n  }\n}\n</script>\n\n<style>\n.image {\n  width: 75%;\n  height: 75%;\n}\n</style>\n"],"sourceRoot":"src/views"}]}