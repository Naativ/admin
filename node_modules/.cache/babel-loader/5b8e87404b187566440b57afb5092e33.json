{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/sales/SalesMember.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/sales/SalesMember.vue","mtime":1570835920000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport SEARCH_SALES_QUERY from '@/graphql/SearchSales.gql';\nimport DateSelector from '@/components/DateSelector';\nimport SalesDataTable from '@/components/SalesDataTable';\nimport { mapGetters } from 'vuex';\nimport { StoreGetters } from '@/store';\nimport moment from 'moment';\nexport default {\n  components: {\n    DateSelector: DateSelector,\n    SalesDataTable: SalesDataTable\n  },\n  data: function data() {\n    return {\n      loading: false,\n      memberName: null,\n      sales: [],\n      startDate: moment().startOf('week').subtract(5, 'weeks').format('YYYY-MM-DD'),\n      endDate: moment().endOf('week').subtract(1, 'weeks').format('YYYY-MM-DD'),\n      addDialog: false\n    };\n  },\n  mounted: function () {\n    var _mounted = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.getSalesHistory();\n\n            case 2:\n              this.sales = _context.sent;\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }(),\n  methods: {\n    findMemberName: function findMemberName() {\n      if (!this.sales.length) {\n        return null;\n      }\n\n      var salesIds = this.sales.map(function (sale) {\n        return sale.id;\n      });\n      var index = salesIds.indexOf(this.id);\n      this.memberName = this.sales[index].displayName;\n    },\n    startDateChanged: function () {\n      var _startDateChanged = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(_ref) {\n        var date;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                date = _ref.date;\n                this.startDate = date;\n                _context2.next = 4;\n                return this.getSalesHistory();\n\n              case 4:\n                this.sales = _context2.sent;\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function startDateChanged(_x) {\n        return _startDateChanged.apply(this, arguments);\n      }\n\n      return startDateChanged;\n    }(),\n    endDateChanged: function () {\n      var _endDateChanged = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(_ref2) {\n        var date;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                date = _ref2.date;\n                this.endDate = date;\n                _context3.next = 4;\n                return this.getSalesHistory();\n\n              case 4:\n                this.sales = _context3.sent;\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function endDateChanged(_x2) {\n        return _endDateChanged.apply(this, arguments);\n      }\n\n      return endDateChanged;\n    }(),\n    getSalesHistory: function () {\n      var _getSalesHistory = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        var input, data;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                input = {\n                  tenantId: this.$store.state.user.principal.tenantId,\n                  endDate: this.endDate,\n                  startDate: this.startDate,\n                  sellerId: parseInt(this.id)\n                };\n                this.loading = true;\n                _context4.next = 4;\n                return this.$apollo.query({\n                  query: SEARCH_SALES_QUERY,\n                  variables: {\n                    saleSearchInput: _objectSpread({}, input)\n                  },\n                  fetchPolicy: 'network-only'\n                });\n\n              case 4:\n                data = _context4.sent;\n                this.loading = false;\n                return _context4.abrupt(\"return\", data.data.searchSales);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getSalesHistory() {\n        return _getSalesHistory.apply(this, arguments);\n      }\n\n      return getSalesHistory;\n    }()\n  },\n  computed: _objectSpread({}, mapGetters({\n    permissions: StoreGetters.permissions\n  }), {\n    id: function id() {\n      return ~~this.$route.params.id;\n    }\n  }),\n  watch: {\n    '$route': function () {\n      var _$route = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5(to, from) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this.memberName = null;\n                _context5.next = 3;\n                return this.getSalesHistory();\n\n              case 3:\n                this.sales = _context5.sent;\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function $route(_x3, _x4) {\n        return _$route.apply(this, arguments);\n      }\n\n      return $route;\n    }()\n  }\n};",{"version":3,"sources":["SalesMember.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,OAAA,kBAAA,MAAA,2BAAA;AACA,OAAA,YAAA,MAAA,2BAAA;AACA,OAAA,cAAA,MAAA,6BAAA;AACA,SAAA,UAAA,QAAA,MAAA;AACA,SAAA,YAAA,QAAA,SAAA;AACA,OAAA,MAAA,MAAA,QAAA;AAEA,eAAA;AACA,cAAA;AACA,8BADA;AAEA;AAFA,GADA;AAKA,MALA,kBAKA;AACA,WAAA;AACA,eAAA,KADA;AAEA,kBAAA,IAFA;AAGA,aAAA,EAHA;AAIA,iBAAA,SACA,OADA,CACA,MADA,EACA,QADA,CACA,CADA,EACA,OADA,EAEA,MAFA,CAEA,YAFA,CAJA;AAOA,eAAA,SACA,KADA,CACA,MADA,EACA,QADA,CACA,CADA,EACA,OADA,EAEA,MAFA,CAEA,YAFA,CAPA;AAUA,iBAAA;AAVA,KAAA;AAYA,GAlBA;AAmBA,SAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAoBA,KAAA,eAAA,EApBA;;AAAA;AAoBA,mBAAA,KApBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAsBA,WAAA;AACA,kBADA,4BACA;AACA,UAAA,CAAA,KAAA,KAAA,CAAA,MAAA,EAAA;AACA,eAAA,IAAA;AACA;;AACA,UAAA,WAAA,KAAA,KAAA,CAAA,GAAA,CAAA;AAAA,eAAA,KAAA,EAAA;AAAA,OAAA,CAAA;AACA,UAAA,QAAA,SAAA,OAAA,CAAA,KAAA,EAAA,CAAA;AACA,WAAA,UAAA,GAAA,KAAA,KAAA,CAAA,KAAA,EAAA,WAAA;AACA,KARA;AASA,oBATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,oBATA,QASA,IATA;AAUA,qBAAA,SAAA,GAAA,IAAA;AAVA;AAAA,uBAWA,KAAA,eAAA,EAXA;;AAAA;AAWA,qBAAA,KAXA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAaA,kBAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA,oBAbA,SAaA,IAbA;AAcA,qBAAA,OAAA,GAAA,IAAA;AAdA;AAAA,uBAeA,KAAA,eAAA,EAfA;;AAAA;AAeA,qBAAA,KAfA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAiBA,mBAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA,qBAlBA,GAkBA;AACA,4BAAA,KAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,QADA;AAEA,2BAAA,KAAA,OAFA;AAGA,6BAAA,KAAA,SAHA;AAIA,4BAAA,SAAA,KAAA,EAAA;AAJA,iBAlBA;AAwBA,qBAAA,OAAA,GAAA,IAAA;AAxBA;AAAA,uBAyBA,KAAA,OAAA,CAAA,KAAA,CAAA;AACA,yBAAA,kBADA;AAEA,6BAAA;AACA,uDACA,KADA;AADA,mBAFA;AAOA,+BAAA;AAPA,iBAAA,CAzBA;;AAAA;AAyBA,oBAzBA;AAkCA,qBAAA,OAAA,GAAA,KAAA;AAlCA,kDAmCA,KAAA,IAAA,CAAA,WAnCA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,GAtBA;AA4DA,8BACA,WAAA;AACA,iBAAA,aAAA;AADA,GAAA,CADA;AAIA,MAJA,gBAIA;AAAA,aAAA,CAAA,CAAA,KAAA,MAAA,CAAA,MAAA,CAAA,EAAA;AAAA;AAJA,IA5DA;AAkEA,SAAA;AACA;AAAA;AAAA;AAAA,8BAAA,kBAAA,EAAA,EAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AACA,qBAAA,UAAA,GAAA,IAAA;AADA;AAAA,uBAEA,KAAA,eAAA,EAFA;;AAAA;AAEA,qBAAA,KAFA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADA;AAlEA,CAAA","sourcesContent":["<template>\n  <v-layout column ma-5>\n    <h1>Sales {{memberName ? `for ${memberName}` : null}}</h1>\n    <v-card>\n      <v-card-text>\n        <v-subheader>Range</v-subheader>\n        <v-container grid-list-md text-xs-center>\n          <v-layout row wrap>\n            <v-flex xs12 sm6>\n              <DateSelector\n                :selectedDate=\"startDate\"\n                :label=\"'Select Start Date'\"\n                @date-changed=\"startDateChanged\"\n              />\n            </v-flex>\n            <v-flex xs12 sm6>\n              <DateSelector\n                :selectedDate=\"endDate\"\n                :label=\"'Select End Date'\"\n                @date-changed=\"endDateChanged\"\n              />\n            </v-flex>\n          </v-layout>\n        </v-container>\n      </v-card-text>\n    </v-card>\n    <SalesDataTable\n      :sales=\"sales\"\n      :loading=\"loading\"\n    />\n  </v-layout>\n</template>\n\n<script>\nimport SEARCH_SALES_QUERY from '@/graphql/SearchSales.gql'\nimport DateSelector from '@/components/DateSelector'\nimport SalesDataTable from '@/components/SalesDataTable'\nimport { mapGetters } from 'vuex'\nimport { StoreGetters } from '@/store'\nimport moment from 'moment'\n\nexport default {\n  components: {\n    DateSelector,\n    SalesDataTable\n  },\n  data () {\n    return {\n      loading: false,\n      memberName: null,\n      sales: [],\n      startDate: moment()\n        .startOf('week').subtract(5, 'weeks')\n        .format('YYYY-MM-DD'),\n      endDate: moment()\n        .endOf('week').subtract(1, 'weeks')\n        .format('YYYY-MM-DD'),\n      addDialog: false\n    }\n  },\n  async mounted () {\n    this.sales = await this.getSalesHistory()\n  },\n  methods: {\n    findMemberName() {\n      if (!this.sales.length) {\n        return null\n      }\n      const salesIds = this.sales.map(sale => sale.id)\n      const index = salesIds.indexOf(this.id)\n      this.memberName = this.sales[index].displayName\n    },\n    async startDateChanged({ date }) {\n      this.startDate = date\n      this.sales = await this.getSalesHistory()\n    },\n    async endDateChanged({ date }) {\n      this.endDate = date\n      this.sales = await this.getSalesHistory()\n    },\n    async getSalesHistory () {\n      const input = {\n        tenantId: this.$store.state.user.principal.tenantId,\n        endDate: this.endDate,\n        startDate: this.startDate,\n        sellerId: parseInt(this.id)\n      }\n      this.loading = true\n      const data = await this.$apollo.query({\n        query: SEARCH_SALES_QUERY,\n        variables: {\n          saleSearchInput: {\n            ...input\n          }\n        },\n        fetchPolicy: 'network-only'\n      })\n      this.loading = false\n      return data.data.searchSales\n    }\n  },\n  computed: {\n    ...mapGetters({\n      permissions: StoreGetters.permissions\n    }),\n    id () { return ~~this.$route.params.id }\n  },\n  watch: {\n    '$route': async function (to, from) {\n      this.memberName = null\n      this.sales = await this.getSalesHistory()\n    }\n  }\n}\n</script>\n\n<style>\n.addbtn.sm {\n  top: -5px !important;\n}\n.addbtn {\n  top: 15px;\n}\n</style>\n"],"sourceRoot":"src/views/sales"}]}