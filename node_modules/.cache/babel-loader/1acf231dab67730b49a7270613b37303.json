{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/users/TeamGraph.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/users/TeamGraph.vue","mtime":1570835920000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.object.keys\";\nimport _toConsumableArray from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport MonthSelector from '@/components/MonthSelector';\nimport { initialize, updateHeightDepth, collapse, checkParentOfPinned } from \"./TeamGraph.d3.js\"; // import { OLD_QUERY } from '@/graphql/GetTeam'\n\nimport searchSalesBySellerId from '@/graphql/searchSalesBySellerId.gql';\nimport SalesStats from '@/graphql/SalesStats.gql'; // import _ from 'lodash'\n\nimport moment from 'moment';\nimport { map } from 'ramda';\nimport * as d3 from 'd3';\nexport default {\n  data: function data() {\n    return {\n      searchTerm: '',\n      graph: null,\n      root: null,\n      radialRoot: null,\n      graphOptions: [{\n        option: 'Horizontal Tree'\n      }, {\n        option: 'Vertical Tree'\n      }, {\n        option: 'Radial Tree'\n      }],\n      select: {\n        option: 'Vertical Tree'\n      },\n      graphType: 'VT',\n      month: moment().format('MM'),\n      year: moment().format('YYYY'),\n      startDate: moment().startOf('month').format('YYYY-MM-DD'),\n      endDate: moment().startOf('month').format('YYYY-MM-DD'),\n      tableColumns: [{\n        text: 'Show Details',\n        value: 'string',\n        align: 'left',\n        sortable: false\n      }, {\n        text: 'Date',\n        value: 'date'\n      }, {\n        text: 'Sale Total',\n        value: 'total'\n      }, {\n        text: 'Total Points',\n        value: 'points'\n      }, {\n        text: 'Commissionable Total',\n        value: 'comTotal'\n      }, {\n        text: 'Commissionable Points',\n        value: 'comPoints'\n      }, {\n        text: 'Seller Name',\n        value: 'displayName'\n      }, {\n        text: 'Seller Email',\n        value: 'contactEmail'\n      }],\n      contextMenuOptions: {\n        unPinMenu: {\n          title: \"UnPin Member\",\n          action: this.pinMember\n        },\n        pinMenu: {\n          title: \"Pin Member\",\n          action: this.pinMember\n        },\n        displaySales: {\n          title: \"Display Sales\",\n          action: this.updateSales\n        },\n        collapseMenu: {\n          title: \"Collapse Team\",\n          action: this.collapseTeam\n        },\n        expandMenu: {\n          title: \"Expand Team\",\n          action: this.expandTeam\n        },\n        loadChildrenMenu: {\n          title: \"Load Team\",\n          action: this.loadChildrenMenu\n        },\n        center: {\n          title: \"Center\",\n          action: this.centerMember\n        }\n      },\n      zoomControls: [{\n        control: 'zoomIn',\n        img: '/img/icons/zoomIn.png',\n        action: this.zoom,\n        data: {\n          amount: 1.02\n        }\n      }, {\n        control: 'zoomOut',\n        img: '/img/icons/zoomOut.png',\n        action: this.zoom,\n        data: {\n          amount: 0.98\n        }\n      }],\n      panControls: [{\n        control: 'panLeft',\n        img: '/img/icons/leftArrow.png',\n        action: this.pan,\n        translate: {\n          x: -1,\n          y: 0\n        },\n        data: {\n          x: 10,\n          y: 0\n        }\n      }, {\n        control: 'panUp',\n        img: '/img/icons/upArrow.png',\n        action: this.pan,\n        translate: {\n          x: 0,\n          y: -1\n        },\n        data: {\n          x: 0,\n          y: 10\n        }\n      }, {\n        control: 'panDown',\n        img: '/img/icons/downArrow.png',\n        action: this.pan,\n        translate: {\n          x: 0,\n          y: 1\n        },\n        data: {\n          x: 0,\n          y: -10\n        }\n      }, {\n        control: 'panRight',\n        img: '/img/icons/rightArrow.png',\n        action: this.pan,\n        translate: {\n          x: 1,\n          y: 0\n        },\n        data: {\n          x: -10,\n          y: 0\n        }\n      }],\n      sales: [],\n      pinned: null,\n      fetchedData: {},\n      memberDict: {},\n      firstPin: true,\n      memberId: null,\n      sellerId: null,\n      loading: false\n    };\n  },\n  watch: {\n    select: function select(newSelection) {\n      this.changeGraphType(newSelection);\n    }\n  },\n  components: {\n    MonthSelector: MonthSelector\n  },\n  mounted: function () {\n    var _mounted = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      var cfg;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              cfg = {\n                el: this.$refs.graph,\n                clickNode: this.clickNode,\n                root: this.root,\n                contextMenuFunc: this.contextMenuFunc,\n                ranks: this.ranks,\n                getRoot: this.getRoot,\n                setRoot: this.setRoot,\n                getSearchTerm: this.getSearchTerm,\n                getLoading: this.getLoading,\n                zoomControls: this.zoomControls,\n                panControls: this.panControls,\n                getGraphType: this.getGraphType,\n                setRadialRoot: this.setRadialRoot,\n                getRadialRoot: this.getRadialRoot\n              };\n              this.loading = true;\n              this.memberId = ~~this.$route.params.id;\n              this.sellerId = this.memberId;\n              _context.next = 6;\n              return this.fetchData({\n                memberId: this.memberId\n              });\n\n            case 6:\n              this.fetchedData = _context.sent;\n              this.graph = initialize(cfg, this.fetchedData);\n              this.pin(this.root);\n              this.loading = false;\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }(),\n  methods: {\n    zoom: function zoom(_ref) {\n      var amount = _ref.amount;\n      this.graph.zoomInAndOut({\n        amount: amount\n      });\n    },\n    pan: function pan(_ref2) {\n      var x = _ref2.x,\n          y = _ref2.y;\n      this.graph.panAround({\n        x: x,\n        y: y\n      });\n    },\n    search: function search() {\n      this.updateGraph({\n        source: this.root\n      });\n    },\n    dateChanged: function dateChanged(_ref3) {\n      var date = _ref3.date;\n      this.startDate = moment(date).startOf('month').format('YYYY-MM-DD');\n      this.endDate = moment(date).endOf('month').format('YYYY-MM-DD');\n      this.refreshGraph();\n    },\n    changeGraphType: function changeGraphType(_ref4) {\n      var option = _ref4.option;\n\n      switch (option) {\n        case 'Horizontal Tree':\n          if (this.graphType !== 'HT') {\n            this.graphType = 'HT';\n          } else return;\n\n          break;\n\n        case 'Vertical Tree':\n          if (this.graphType !== 'VT') {\n            this.graphType = 'VT';\n          } else return;\n\n          break;\n\n        case 'Radial Tree':\n          if (this.graphType !== 'RT') {\n            this.graphType = 'RT';\n          } else return;\n\n          break;\n      }\n\n      this.searchTerm = '';\n      this.graph.changeGraphType(this.root, this.graphType);\n      this.updateGraph({\n        center: true,\n        updateHeight: true\n      });\n    },\n    getGraphType: function getGraphType() {\n      return this.graphType;\n    },\n    getRoot: function getRoot() {\n      return this.root;\n    },\n    setRoot: function setRoot(newRoot) {\n      this.root = newRoot;\n    },\n    getRadialRoot: function getRadialRoot() {\n      return this.radialRoot;\n    },\n    setRadialRoot: function setRadialRoot(newRoot) {\n      this.radialRoot = newRoot;\n    },\n    getSearchTerm: function getSearchTerm() {\n      return this.searchTerm === '' ? null : this.searchTerm.toLowerCase();\n    },\n    getLoading: function getLoading() {\n      return this.loading;\n    },\n    reloadGraph: function reloadGraph() {\n      this.graph.loadGraph({\n        fetchedData: this.fetchedData,\n        graphType: this.graphType\n      });\n      this.pin(this.root);\n      this.centerMember(this.root, this.graphType);\n    },\n    updateGraph: function updateGraph(updateOptions) {\n      var updateInput = _objectSpread({\n        source: this.root,\n        pinned: this.pinned,\n        firstPin: this.firstPin,\n        graphType: this.graphType\n      }, updateOptions);\n\n      this.graph.update(updateInput);\n    },\n    zoomOut: function zoomOut() {\n      this.graph.zoomInAndOut({\n        amount: 0.8\n      });\n    },\n    pin: function pin(node) {\n      // To be implemented in the future\n      // if (this.pinned !== node) {\n      //         this.pinned = node\n      //         this.updateSellerId(this.pinned.data.data.memberId)\n      //       } else {\n      //         this.firstPin = true\n      //         this.pinned = null\n      //         this.updateSellerId(null)\n      //       }\n      //       this.graph.updatePinned(this.pinned, this.firstPin)\n      //       this.firstPin = !this.pinned\n      this.pinned = null;\n    },\n    clickNode: function clickNode(selected) {\n      if (selected._children) {\n        selected.children = selected._children;\n        selected._children = null;\n\n        if (this.graphType === 'RT') {\n          this.radialRoot = selected;\n        }\n\n        this.updateGraph({\n          source: selected,\n          center: true,\n          updateHeight: true\n        });\n      } else if (!checkParentOfPinned(selected, this.pinned)) {\n        if (selected.children || selected.data.id === this.radialRoot.data.id && this.graphType === 'RT') {\n          selected._children = selected.children;\n          selected.children = null;\n\n          if (this.graphType === 'RT' && selected.parent) {\n            this.radialRoot = selected.parent;\n            this.updateGraph({\n              source: selected.parent,\n              center: true,\n              updateHeight: true\n            });\n          } else {\n            this.updateGraph({\n              source: selected,\n              center: true,\n              updateHeight: true\n            });\n          }\n        } else {\n          this.loadChildrenMenu(selected);\n        }\n      } // this.updateGraph({ source: selected, center: true, updateHeight: true })\n\n    },\n    centerMember: function centerMember(d) {\n      this.graph.centerMember(d, this.graphType);\n    },\n    updateSales: function updateSales(d) {\n      this.updateSellerId(d ? d.data.data.memberId : null);\n    },\n    updateSellerId: function updateSellerId(newId) {\n      this.sellerId = newId;\n    },\n    contextMenuFunc: function contextMenuFunc(data) {\n      var menu = [];\n      menu.push(this.contextMenuOptions[\"displaySales\"]);\n      menu.push(this.contextMenuOptions[\"center\"]);\n      if (data.children) menu.push(this.contextMenuOptions[\"collapseMenu\"]);else if (data._children) {\n        menu.push(this.contextMenuOptions[\"expandMenu\"]);\n      } else if (data.data.data.frontLineSize > 0) {\n        menu.push(this.contextMenuOptions[\"loadChildrenMenu\"]);\n      }\n      return menu;\n    },\n    pinMember: function pinMember(d) {\n      this.pin(d);\n    },\n    collapseTeam: function collapseTeam(d) {\n      if (d.children) {\n        d._children = d.children;\n        d.children = null;\n      }\n\n      this.updateGraph({\n        source: d,\n        center: true\n      });\n    },\n    expandTeam: function expandTeam(d) {\n      if (d._children) {\n        d.children = d._children;\n        d._children = null;\n      }\n\n      this.updateGraph({\n        source: d,\n        center: true\n      });\n    },\n    loadChildrenMenu: function () {\n      var _loadChildrenMenu = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(d, i) {\n        var newChild, newNode;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(d.data.data.frontLineSize > 0 && !d.children && !d._children)) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                this.loading = true;\n                _context2.next = 4;\n                return this.fetchData({\n                  memberId: d.data.data.memberId\n                });\n\n              case 4:\n                newChild = _context2.sent;\n                newNode = d3.hierarchy(newChild, function (d) {\n                  return d.children;\n                });\n\n                if (newNode.children) {\n                  newNode.children.forEach(function (child) {\n                    child.parent = d;\n                  });\n                  d.children = _toConsumableArray(newNode.children);\n                  d.data.children = _toConsumableArray(newNode.data.children);\n                  updateHeightDepth(this.root, 0);\n                  d.children.forEach(collapse);\n                } else {\n                  d.data.data.leaf = true;\n                }\n\n                this.loading = false;\n                _context2.next = 11;\n                break;\n\n              case 10:\n                d.data.data.leaf = true;\n\n              case 11:\n                if (this.graphType === 'RT') {\n                  this.radialRoot = d;\n                }\n\n                this.updateGraph({\n                  source: d,\n                  center: true,\n                  updateHeight: true\n                });\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadChildrenMenu(_x, _x2) {\n        return _loadChildrenMenu.apply(this, arguments);\n      }\n\n      return loadChildrenMenu;\n    }(),\n    refreshGraph: function () {\n      var _refreshGraph = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var _this = this;\n\n        var memberIds, _ref5, saleStatsByDateRange;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.loading = true;\n                memberIds = Object.keys(this.memberDict).map(Number);\n                _context3.next = 4;\n                return this.$apollo.query({\n                  query: SalesStats,\n                  variables: {\n                    input: {\n                      sponsorIds: [],\n                      memberIds: memberIds,\n                      startDate: this.startDate,\n                      endDate: this.endDate,\n                      mode: 'YEAR_AND_MONTH_CUBED',\n                      sorts: [{\n                        field: 'JOIN_DATE',\n                        direction: 'ASC'\n                      }]\n                    }\n                  }\n                });\n\n              case 4:\n                _ref5 = _context3.sent;\n                saleStatsByDateRange = _ref5.data.saleStatsByDateRange;\n                _context3.next = 8;\n                return saleStatsByDateRange.forEach(function (member) {\n                  _this.memberDict[member.memberId] = {\n                    memberId: member.memberId,\n                    sponsorId: member.sponsorId,\n                    displayName: member.displayName,\n                    profileUrl: member.profileUrl,\n                    teamSize: member.teamSize,\n                    frontLineSize: member.frontLineSize,\n                    totalPoints: member.stats[member.stats.length - 1].totalPoints,\n                    totalAmount: member.stats[member.stats.length - 1].totalAmount // _data: member\n\n                  };\n                });\n\n              case 8:\n                this.refreshNode({\n                  node: this.root,\n                  dataChild: false\n                });\n                this.updateGraph({\n                  source: this.root,\n                  center: false\n                });\n                this.loading = false;\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function refreshGraph() {\n        return _refreshGraph.apply(this, arguments);\n      }\n\n      return refreshGraph;\n    }(),\n    refreshNode: function refreshNode(_ref6) {\n      var _this2 = this;\n\n      var node = _ref6.node,\n          dataChild = _ref6.dataChild;\n\n      if (dataChild) {\n        node.data = this.memberDict[node.id];\n        return;\n      }\n\n      node.data.data = this.memberDict[node.data.id];\n\n      if (node.children) {\n        node.children.forEach(function (child) {\n          _this2.refreshNode({\n            node: child\n          });\n        });\n      }\n\n      if (node.data.children) {\n        node.data.children.forEach(function (child) {\n          _this2.refreshNode({\n            node: child,\n            dataChild: true\n          });\n        });\n      }\n\n      if (node._children) {\n        node._children.forEach(function (child) {\n          _this2.refreshNode({\n            node: child\n          });\n        });\n      }\n    },\n    fetchData: function () {\n      var _fetchData = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(_ref7) {\n        var _this3 = this;\n\n        var memberId, _ref8, saleStatsByDateRange, tempArr, stratifiedObj, _stratifiedObj, children;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                memberId = _ref7.memberId;\n                _context4.next = 3;\n                return this.$apollo.query({\n                  query: SalesStats,\n                  variables: {\n                    input: {\n                      sponsorIds: [memberId],\n                      memberIds: [memberId],\n                      startDate: this.startDate,\n                      endDate: this.endDate,\n                      mode: 'YEAR_AND_MONTH_CUBED',\n                      sorts: [{\n                        field: 'JOIN_DATE',\n                        direction: 'ASC'\n                      }]\n                    }\n                  }\n                });\n\n              case 3:\n                _ref8 = _context4.sent;\n                saleStatsByDateRange = _ref8.data.saleStatsByDateRange;\n\n                if (!saleStatsByDateRange) {\n                  _context4.next = 18;\n                  break;\n                }\n\n                tempArr = [];\n                _context4.next = 9;\n                return saleStatsByDateRange.forEach(function (member) {\n                  _this3.memberDict[member.memberId] = {\n                    memberId: member.memberId,\n                    sponsorId: member.sponsorId,\n                    displayName: member.displayName,\n                    profileUrl: member.profileUrl,\n                    teamSize: member.teamSize,\n                    frontLineSize: member.frontLineSize,\n                    totalPoints: member.stats[member.stats.length - 1].totalPoints,\n                    totalAmount: member.stats[member.stats.length - 1].totalAmount // _data: member// As far as I know we don't need this\n\n                  };\n                  tempArr.push({\n                    memberId: member.memberId,\n                    sponsorId: member.memberId === memberId ? null : member.sponsorId,\n                    displayName: member.displayName,\n                    profileUrl: member.profileUrl,\n                    teamSize: member.teamSize,\n                    frontLineSize: member.frontLineSize,\n                    totalPoints: member.stats[member.stats.length - 1].totalPoints,\n                    totalAmount: member.stats[member.stats.length - 1].totalAmount // _data: member// As far as I know we don't need this\n\n                  });\n                });\n\n              case 9:\n                stratifiedObj = {}; // Create a tree like structure from our data\n\n                _context4.next = 12;\n                return d3.stratify().id(function (d) {\n                  return d.memberId;\n                }).parentId(function (d) {\n                  return d.sponsorId;\n                })(tempArr);\n\n              case 12:\n                stratifiedObj = _context4.sent;\n                _stratifiedObj = stratifiedObj, children = _stratifiedObj.children;\n\n                if (children) {\n                  _context4.next = 16;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", stratifiedObj);\n\n              case 16:\n                // Alphabetically sort the teamMembers\n                children.sort(function (a, b) {\n                  return a.data.displayName.toLowerCase() > b.data.displayName.toLowerCase() ? 1 : b.data.displayName.toLowerCase() > a.data.displayName.toLowerCase() ? -1 : 0;\n                });\n                return _context4.abrupt(\"return\", stratifiedObj);\n\n              case 18:\n                return _context4.abrupt(\"return\", null);\n\n              case 19:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function fetchData(_x3) {\n        return _fetchData.apply(this, arguments);\n      }\n\n      return fetchData;\n    }()\n  },\n  computed: {\n    items: function items() {\n      return map(function (sale) {\n        return _objectSpread({}, sale, {\n          id: sale.saleId,\n          date: moment(sale.awardedDate, 'YYYY-MM-DD').format('MM/DD/YYYY')\n        });\n      }, this.sales);\n    },\n    currentId: {\n      get: function get() {\n        var id = this.$route.params.id;\n        return parseInt(id);\n      },\n      set: function set() {}\n    }\n  },\n  apollo: {\n    sales: {\n      query: searchSalesBySellerId,\n      variables: function variables() {\n        return {\n          saleSearchInput: {\n            tenantId: this.$store.state.user.principal.tenantId,\n            startDate: this.startDate,\n            endDate: this.endDate,\n            query: null,\n            sellerId: this.sellerId\n          }\n        };\n      },\n      error: function error(err) {\n        this.loading = false;\n        console.error({\n          err: err\n        });\n      },\n      debounce: 500,\n      update: function update(_ref9) {\n        var searchSalesBySellerId = _ref9.searchSalesBySellerId;\n        this.loading = false;\n        return searchSalesBySellerId;\n      }\n    }\n  }\n};",{"version":3,"sources":["TeamGraph.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <v-layout row justify-space-between style=\"margin-left: 12.5%; margin-right: 12.5%;\">\n      <v-flex xs3>\n        <MonthSelector :year=\"year\" :month=\"month\" @date-changed=\"dateChanged\"/>\n      </v-flex>\n      <v-flex xs5>\n        <form @submit.prevent=\"search\" autocomplete=\"off\">\n          <v-flex>\n            <v-layout row>\n              <v-flex>\n                <v-text-field\n                  v-model=\"searchTerm\"\n                  append-icon=\"search\"\n                  type=\"text\"\n                  name=\"searchTerm\"\n                  label=\"Enter name\"\n                  c-on:keyup.enter=\"search\"\n                  xs9\n                  hint=\"Enter to Submit\"\n                ></v-text-field>\n              </v-flex>\n            </v-layout>\n          </v-flex>\n        </form>\n      </v-flex>\n      <v-flex xs2>\n        <v-select\n          v-model=\"select\"\n          :items=\"graphOptions\"\n          item-text=\"option\"\n          label=\"Graph Type\"\n          return-object\n        ></v-select>\n      </v-flex>\n    </v-layout>\n    <div ref=\"graph\"></div>\n    <v-progress-linear v-if=\"loading\" :indeterminate=\"true\" color=\"grey\"></v-progress-linear>\n    <v-data-table :headers=\"tableColumns\" :items=\"items\" item-key=\"id\" class=\"elevation-1\" expand>\n      <template slot=\"items\" slot-scope=\"props\">\n        <tr @click=\"props.expanded = !props.expanded\">\n          <td>\n            <a>Details</a>\n          </td>\n          <td>{{ props.item.date }}</td>\n          <td>${{ props.item.total }}</td>\n          <td>{{ props.item.totalPoints }}</td>\n          <td>{{ props.item.commissionableAmount }}</td>\n          <td>{{ props.item.commissionablePoints }}</td>\n          <td>{{ props.item.displayName }}</td>\n          <td>{{ props.item.sellerEmail }}</td>\n        </tr>\n      </template>\n      <template slot=\"expand\" slot-scope=\"props\">\n        <div class=\"pa-3 sale-details\">\n          <v-container fluid>\n            <v-layout>\n              <v-flex xs4>\n                <h4>Details:</h4>\n                <ul>\n                  <li>Originating ID: {{props.item.providerOid}}</li>\n                  <li>Status: {{props.item.status}}</li>\n                  <li>Customer Note: {{props.item.customerNote}}</li>\n                </ul>\n              </v-flex>\n              <v-flex xs4>\n                <h4>Customer Info:</h4>\n                <ul>\n                  <li>{{props.item.shippingFirstName}} {{props.item.shippingLastName}}</li>\n                  <li>{{props.item.shippingAddress1}}</li>\n                  <li>{{props.item.shippingAddress2}}</li>\n                  <li>{{props.item.shippingCity}}, {{props.item.shippingState}} {{props.item.shippingZip}}</li>\n                </ul>\n              </v-flex>\n              <v-flex xs4>\n                <h4>Billing Info:</h4>\n                <ul>\n                  <li>{{props.item.billingFirstName}} {{props.item.billingLastName}}</li>\n                  <li>{{props.item.billingAddress1}}</li>\n                  <li>{{props.item.billingAddress2}}</li>\n                  <li>{{props.item.billingCity}}, {{props.item.billingState}} {{props.item.billingZip}}</li>\n                </ul>\n              </v-flex>\n            </v-layout>\n            <v-layout>\n              <v-flex xs12>\n                <h4>Line Items</h4>\n                <ul>\n                  <li\n                    v-for=\"line in props.item.lineItems\"\n                    :key=\"line.id\"\n                  >{{line.name}} ({{line.total}})</li>\n                </ul>\n              </v-flex>\n            </v-layout>\n          </v-container>\n        </div>\n      </template>\n    </v-data-table>\n  </div>\n</template>\n\n<script>\nimport MonthSelector from '@/components/MonthSelector'\n\nimport { initialize, updateHeightDepth, collapse,\n  checkParentOfPinned } from './TeamGraph.d3.js'\n// import { OLD_QUERY } from '@/graphql/GetTeam'\nimport searchSalesBySellerId from '@/graphql/searchSalesBySellerId.gql'\nimport SalesStats from '@/graphql/SalesStats.gql'\n// import _ from 'lodash'\nimport moment from 'moment'\nimport { map } from 'ramda'\nimport * as d3 from 'd3'\n\nexport default {\n  data () {\n    return {\n      searchTerm: '',\n      graph: null,\n      root: null,\n      radialRoot: null,\n      graphOptions: [\n        { option: 'Horizontal Tree' },\n        { option: 'Vertical Tree' },\n        { option: 'Radial Tree' }\n      ],\n      select: { option: 'Vertical Tree' },\n      graphType: 'VT',\n      month: moment()\n        .format('MM'),\n      year: moment().format('YYYY'),\n      startDate: moment()\n        .startOf('month')\n        .format('YYYY-MM-DD'),\n      endDate: moment()\n        .startOf('month')\n        .format('YYYY-MM-DD'),\n      tableColumns: [\n        {\n          text: 'Show Details',\n          value: 'string',\n          align: 'left',\n          sortable: false\n        },\n        { text: 'Date', value: 'date' },\n        { text: 'Sale Total', value: 'total' },\n        { text: 'Total Points', value: 'points' },\n        { text: 'Commissionable Total', value: 'comTotal' },\n        { text: 'Commissionable Points', value: 'comPoints' },\n        { text: 'Seller Name', value: 'displayName' },\n        { text: 'Seller Email', value: 'contactEmail' }\n      ],\n      contextMenuOptions: {\n        unPinMenu: {\n          title: `UnPin Member`,\n          action: this.pinMember\n        },\n        pinMenu: {\n          title: `Pin Member`,\n          action: this.pinMember\n        },\n        displaySales: {\n          title: `Display Sales`,\n          action: this.updateSales\n        },\n        collapseMenu: {\n          title: `Collapse Team`,\n          action: this.collapseTeam\n        },\n        expandMenu: {\n          title: `Expand Team`,\n          action: this.expandTeam\n        },\n        loadChildrenMenu: {\n          title: `Load Team`,\n          action: this.loadChildrenMenu\n        },\n        center: {\n          title: `Center`,\n          action: this.centerMember\n        }\n      },\n      zoomControls: [\n        {\n          control: 'zoomIn',\n          img: '/img/icons/zoomIn.png',\n          action: this.zoom,\n          data: { amount: 1.02 }\n        },\n        {\n          control: 'zoomOut',\n          img: '/img/icons/zoomOut.png',\n          action: this.zoom,\n          data: { amount: 0.98 }\n        }],\n      panControls: [\n        {\n          control: 'panLeft',\n          img: '/img/icons/leftArrow.png',\n          action: this.pan,\n          translate: { x: -1, y: 0 },\n          data: { x: 10, y: 0 }\n        },\n        {\n          control: 'panUp',\n          img: '/img/icons/upArrow.png',\n          action: this.pan,\n          translate: { x: 0, y: -1 },\n          data: { x: 0, y: 10 }\n        },\n        {\n          control: 'panDown',\n          img: '/img/icons/downArrow.png',\n          action: this.pan,\n          translate: { x: 0, y: 1 },\n          data: { x: 0, y: -10 }\n        },\n        {\n          control: 'panRight',\n          img: '/img/icons/rightArrow.png',\n          action: this.pan,\n          translate: { x: 1, y: 0 },\n          data: { x: -10, y: 0 }\n        }\n      ],\n      sales: [],\n      pinned: null,\n      fetchedData: {},\n      memberDict: {},\n      firstPin: true,\n      memberId: null,\n      sellerId: null,\n      loading: false\n    }\n  },\n  watch: {\n    select (newSelection) {\n      this.changeGraphType(newSelection)\n    }\n  },\n  components: {\n    MonthSelector\n  },\n  async mounted () {\n    const cfg = {\n      el: this.$refs.graph,\n      clickNode: this.clickNode,\n      root: this.root,\n      contextMenuFunc: this.contextMenuFunc,\n      ranks: this.ranks,\n      getRoot: this.getRoot,\n      setRoot: this.setRoot,\n      getSearchTerm: this.getSearchTerm,\n      getLoading: this.getLoading,\n      zoomControls: this.zoomControls,\n      panControls: this.panControls,\n      getGraphType: this.getGraphType,\n      setRadialRoot: this.setRadialRoot,\n      getRadialRoot: this.getRadialRoot\n    }\n    this.loading = true\n    this.memberId = ~~this.$route.params.id\n    this.sellerId = this.memberId\n    this.fetchedData = await this.fetchData({ memberId: this.memberId })\n    this.graph = initialize(cfg, this.fetchedData)\n    this.pin(this.root)\n    this.loading = false\n  },\n  methods: {\n    zoom ({ amount }) {\n      this.graph.zoomInAndOut({ amount })\n    },\n    pan ({ x, y }) {\n      this.graph.panAround({ x, y })\n    },\n    search () {\n      this.updateGraph({ source: this.root })\n    },\n    dateChanged ({ date }) {\n      this.startDate = moment(date).startOf('month').format('YYYY-MM-DD')\n      this.endDate = moment(date).endOf('month').format('YYYY-MM-DD')\n      this.refreshGraph()\n    },\n    changeGraphType ({ option }) {\n      switch (option) {\n        case 'Horizontal Tree':\n          if (this.graphType !== 'HT') { this.graphType = 'HT' } else return\n          break\n        case 'Vertical Tree':\n          if (this.graphType !== 'VT') { this.graphType = 'VT' } else return\n          break\n        case 'Radial Tree':\n          if (this.graphType !== 'RT') { this.graphType = 'RT' } else return\n          break\n      }\n      this.searchTerm = ''\n      this.graph.changeGraphType(this.root, this.graphType)\n      this.updateGraph({ center: true, updateHeight: true })\n    },\n    getGraphType () {\n      return this.graphType\n    },\n    getRoot () {\n      return this.root\n    },\n    setRoot (newRoot) {\n      this.root = newRoot\n    },\n    getRadialRoot () {\n      return this.radialRoot\n    },\n    setRadialRoot (newRoot) {\n      this.radialRoot = newRoot\n    },\n    getSearchTerm () {\n      return this.searchTerm === '' ? null : this.searchTerm.toLowerCase()\n    },\n    getLoading () {\n      return this.loading\n    },\n    reloadGraph () {\n      this.graph.loadGraph({ fetchedData: this.fetchedData, graphType: this.graphType })\n      this.pin(this.root)\n      this.centerMember(this.root, this.graphType)\n    },\n    updateGraph (updateOptions) {\n      const updateInput = {\n        source: this.root,\n        pinned: this.pinned,\n        firstPin: this.firstPin,\n        graphType: this.graphType,\n        ...updateOptions\n      }\n      this.graph.update(updateInput)\n    },\n    zoomOut () {\n      this.graph.zoomInAndOut({ amount: 0.8 })\n    },\n    pin (node) {\n      // To be implemented in the future\n\n      // if (this.pinned !== node) {\n      //         this.pinned = node\n      //         this.updateSellerId(this.pinned.data.data.memberId)\n      //       } else {\n      //         this.firstPin = true\n      //         this.pinned = null\n      //         this.updateSellerId(null)\n      //       }\n      //       this.graph.updatePinned(this.pinned, this.firstPin)\n      //       this.firstPin = !this.pinned\n\n      this.pinned = null\n    },\n    clickNode (selected) {\n      if (selected._children) {\n        selected.children = selected._children\n        selected._children = null\n        if (this.graphType === 'RT') {\n          this.radialRoot = selected\n        }\n        this.updateGraph({ source: selected, center: true, updateHeight: true })\n      } else if (!checkParentOfPinned(selected, this.pinned)) {\n        if (selected.children || (selected.data.id === this.radialRoot.data.id && this.graphType === 'RT')) {\n          selected._children = selected.children\n          selected.children = null\n          if (this.graphType === 'RT' && selected.parent) {\n            this.radialRoot = selected.parent\n            this.updateGraph({ source: selected.parent, center: true, updateHeight: true })\n          } else { this.updateGraph({ source: selected, center: true, updateHeight: true }) }\n        } else {\n          this.loadChildrenMenu(selected)\n        }\n      }\n      // this.updateGraph({ source: selected, center: true, updateHeight: true })\n    },\n    centerMember (d) {\n      this.graph.centerMember(d, this.graphType)\n    },\n    updateSales (d) {\n      this.updateSellerId(d ? d.data.data.memberId : null)\n    },\n    updateSellerId (newId) {\n      this.sellerId = newId\n    },\n    contextMenuFunc (data) {\n      const menu = []\n      menu.push(this.contextMenuOptions[`displaySales`])\n      menu.push(this.contextMenuOptions[`center`])\n\n      if (data.children) menu.push(this.contextMenuOptions[`collapseMenu`])\n      else if (data._children) {\n        menu.push(this.contextMenuOptions[`expandMenu`])\n      } else if (data.data.data.frontLineSize > 0) {\n        menu.push(this.contextMenuOptions[`loadChildrenMenu`])\n      }\n\n      return menu\n    },\n    pinMember (d) {\n      this.pin(d)\n    },\n    collapseTeam (d) {\n      if (d.children) {\n        d._children = d.children\n        d.children = null\n      }\n      this.updateGraph({ source: d, center: true })\n    },\n    expandTeam (d) {\n      if (d._children) {\n        d.children = d._children\n        d._children = null\n      }\n      this.updateGraph({ source: d, center: true })\n    },\n    async loadChildrenMenu (d, i) {\n      if (d.data.data.frontLineSize > 0 && !d.children && !d._children) {\n        this.loading = true\n        let newChild = await this.fetchData({ memberId: d.data.data.memberId })\n        let newNode = d3.hierarchy(newChild, d => d.children)\n        if (newNode.children) {\n          newNode.children.forEach(child => { child.parent = d })\n\n          d.children = [...newNode.children]\n          d.data.children = [...newNode.data.children]\n\n          updateHeightDepth(this.root, 0)\n\n          d.children.forEach(collapse)\n        } else { d.data.data.leaf = true }\n        this.loading = false\n      } else {\n        d.data.data.leaf = true\n      }\n      if (this.graphType === 'RT') {\n        this.radialRoot = d\n      }\n\n      this.updateGraph({ source: d, center: true, updateHeight: true })\n    },\n    async refreshGraph () {\n      this.loading = true\n      let memberIds = Object.keys(this.memberDict).map(Number)\n      const { data: { saleStatsByDateRange } } = await this.$apollo.query({\n        query: SalesStats,\n        variables: {\n          input: {\n            sponsorIds: [],\n            memberIds: memberIds,\n            startDate: this.startDate,\n            endDate: this.endDate,\n            mode: 'YEAR_AND_MONTH_CUBED',\n            sorts: [{ field: 'JOIN_DATE', direction: 'ASC' }]\n          }\n        }\n      })\n      await saleStatsByDateRange.forEach(member => {\n        this.memberDict[member.memberId] = {\n          memberId: member.memberId,\n          sponsorId: member.sponsorId,\n          displayName: member.displayName,\n          profileUrl: member.profileUrl,\n          teamSize: member.teamSize,\n          frontLineSize: member.frontLineSize,\n          totalPoints: member.stats[member.stats.length - 1].totalPoints,\n          totalAmount: member.stats[member.stats.length - 1].totalAmount\n          // _data: member\n        }\n      })\n      this.refreshNode({ node: this.root, dataChild: false })\n      this.updateGraph({ source: this.root, center: false })\n      this.loading = false\n    },\n    refreshNode ({ node, dataChild }) {\n      if (dataChild) {\n        node.data = this.memberDict[node.id]\n        return\n      }\n      node.data.data = this.memberDict[node.data.id]\n      if (node.children) {\n        node.children.forEach(child => {\n          this.refreshNode({ node: child })\n        })\n      }\n      if (node.data.children) {\n        node.data.children.forEach(child => {\n          this.refreshNode({ node: child, dataChild: true })\n        })\n      }\n      if (node._children) {\n        node._children.forEach(child => {\n          this.refreshNode({ node: child })\n        })\n      }\n    },\n    async fetchData ({ memberId }) {\n      const { data: { saleStatsByDateRange } } = await this.$apollo.query({\n        query: SalesStats,\n        variables: {\n          input: {\n            sponsorIds: [memberId],\n            memberIds: [memberId],\n            startDate: this.startDate,\n            endDate: this.endDate,\n            mode: 'YEAR_AND_MONTH_CUBED',\n            sorts: [{ field: 'JOIN_DATE', direction: 'ASC' }]\n          }\n        }\n      })\n      if (saleStatsByDateRange) {\n        const tempArr = []\n        await saleStatsByDateRange.forEach(member => {\n          this.memberDict[member.memberId] = {\n            memberId: member.memberId,\n            sponsorId: member.sponsorId,\n            displayName: member.displayName,\n            profileUrl: member.profileUrl,\n            teamSize: member.teamSize,\n            frontLineSize: member.frontLineSize,\n            totalPoints: member.stats[member.stats.length - 1].totalPoints,\n            totalAmount: member.stats[member.stats.length - 1].totalAmount\n            // _data: member// As far as I know we don't need this\n          }\n          tempArr.push({\n            memberId: member.memberId,\n            sponsorId: member.memberId === memberId ? null : member.sponsorId,\n            displayName: member.displayName,\n            profileUrl: member.profileUrl,\n            teamSize: member.teamSize,\n            frontLineSize: member.frontLineSize,\n            totalPoints: member.stats[member.stats.length - 1].totalPoints,\n            totalAmount: member.stats[member.stats.length - 1].totalAmount\n            // _data: member// As far as I know we don't need this\n          })\n        })\n\n        let stratifiedObj = {}\n        // Create a tree like structure from our data\n        stratifiedObj = await d3.stratify()\n          .id(d => d.memberId)\n          .parentId(d => d.sponsorId)(tempArr)\n\n        const { children } = stratifiedObj\n        if (!children) return stratifiedObj\n\n        // Alphabetically sort the teamMembers\n        children.sort((a, b) => (a.data.displayName.toLowerCase() > b.data.displayName.toLowerCase()) ? 1 : ((b.data.displayName.toLowerCase() > a.data.displayName.toLowerCase()) ? -1 : 0))\n\n        return stratifiedObj\n      }\n      return null\n    }\n  },\n  computed: {\n    items () {\n      return map(sale => {\n        return {\n          ...sale,\n          id: sale.saleId,\n          date: moment(sale.awardedDate, 'YYYY-MM-DD').format('MM/DD/YYYY')\n        }\n      }, this.sales)\n    },\n    currentId: {\n      get: function () {\n        const id = this.$route.params.id\n        return parseInt(id)\n      },\n      set: function () {\n      }\n    }\n  },\n  apollo: {\n    sales: {\n      query: searchSalesBySellerId,\n      variables () {\n        return {\n          saleSearchInput: {\n            tenantId: this.$store.state.user.principal.tenantId,\n            startDate: this.startDate,\n            endDate: this.endDate,\n            query: null,\n            sellerId: this.sellerId\n          }\n        }\n      },\n      error (err) {\n        this.loading = false\n        console.error({ err })\n      },\n      debounce: 500,\n      update ({ searchSalesBySellerId }) {\n        this.loading = false\n        return searchSalesBySellerId\n      }\n    }\n  }\n}\n</script>\n\n<style>\n.imgCircle {\n  fill: #fafafa;\n  stroke: #828282;\n  stroke-width: 3px;\n}\n.rankCircle {\n  fill: #fff;\n  stroke: #828282;\n  stroke-width: 2px;\n}\n\n.controlCircle {\n  fill: black;\n  opacity: 0.2;\n}\n.parentCircle {\n  fill: #fafafa;\n  stroke: #ccc;\n  stroke-width: 2px;\n}\n.memberHighlight {\n  fill: #feff00;\n}\n\n.node text {\n  font: 12px sans-serif;\n}\n\n.infoRect {\n  fill: #fafafa;\n  stroke: #ccc;\n}\n\n.link {\n  fill: none;\n  stroke: #ccc;\n  stroke-width: 2px;\n}\nsvg {\n  border: 2px solid #ccc;\n}\n\n.pinImage {\n  height: 42px;\n  width: 42px;\n  position: fixed;\n}\n\n.d3-context-menu {\n  position: absolute;\n  display: none;\n  background-color: #f2f2f2;\n  border-radius: 4px;\n\n  font-family: Arial, sans-serif;\n  font-size: 14px;\n  min-width: 150px;\n  border: 1px solid #d4d4d4;\n\n  z-index: 1200;\n}\n\n.d3-context-menu ul {\n  list-style-type: none;\n  margin: 4px 0px;\n  padding: 0px;\n  cursor: default;\n}\n\n.d3-context-menu ul li {\n  padding: 4px 16px;\n}\n\n.d3-context-menu ul li:hover {\n  background-color: #4677f8;\n  color: #fefefe;\n}\n</style>\n"],"sourceRoot":"src/views/users"}]}