{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/associations/AssociationsByMember.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/associations/AssociationsByMember.vue","mtime":1574205365000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getAssociation } from '@/users/users.gql';\nimport AssociationsDataTable from '@/components/AssociationsDataTable.vue';\nimport { mapGetters, mapState, mapActions } from 'vuex';\nimport { StoreGetters } from '@/store';\nimport { UsersActions } from '@/users/UsersStore';\nexport default {\n  components: {\n    AssociationsDataTable: AssociationsDataTable\n  },\n  data: function data() {\n    return {\n      association: {},\n      headers: [{\n        text: 'Id',\n        value: 'id',\n        sortable: false\n      }, {\n        text: 'Member Name',\n        value: 'name',\n        sortable: false\n      }, {\n        text: 'Role',\n        value: 'role',\n        sortable: false\n      }, {\n        text: 'Rate',\n        value: 'metadata',\n        sortable: false,\n        width: '18%'\n      }, {\n        text: 'Actions',\n        sortable: false,\n        width: '20%'\n      }],\n      id: ~~this.$route.params.id,\n      addDialog: false,\n      displayName: null\n    };\n  },\n  apollo: {\n    associations: {\n      query: getAssociation,\n      variables: function variables() {\n        return {\n          input: {\n            ids: [this.id]\n          }\n        };\n      },\n      update: function update(data) {\n        var _this = this;\n\n        var nodes = data.members.nodes;\n        var associations = nodes[0].associations;\n\n        if (!associations[0]) {\n          this.usersViewing.forEach(function (result) {\n            if (!displayName && result.id === _this.id) {\n              _this.displayName = result.displayName;\n            }\n          });\n          return [];\n        }\n\n        var displayName = associations[0].member.displayName;\n        this.displayName = displayName;\n\n        if (Array.isArray(associations)) {\n          var parsedAssociations = associations.map(function (association) {\n            var assn = association.association,\n                associationId = association.associationId;\n            return {\n              id: associationId,\n              key: assn.key,\n              name: assn.name,\n              type: assn.type.name\n            };\n          });\n          return parsedAssociations;\n        } else {\n          return this.placeHolderName ? [{\n            name: this.placeHolderName\n          }] : [];\n        }\n      },\n      fetchPolicy: 'network-only'\n    }\n  },\n  methods: _objectSpread({}, mapActions({\n    userStartViewing: UsersActions.START_VIEWING\n  }), {\n    handleEdittingMetaDataArr: function handleEdittingMetaDataArr(index, inputValue) {\n      this.edittingMetaDataArr[index].metadata.percent = inputValue;\n    },\n    removeConfirm: function removeConfirm(item) {\n      this.removeItem = item;\n      this.removeDialog = true;\n    },\n    view: function () {\n      var _view = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(props) {\n        var key;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                key = props.item.key;\n                this.$router.push(\"/associations/id/\".concat(key));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function view(_x) {\n        return _view.apply(this, arguments);\n      }\n\n      return view;\n    }()\n  }),\n  computed: _objectSpread({}, mapGetters({\n    permissions: StoreGetters.permissions\n  }), mapState({\n    tenantId: function tenantId(state) {\n      return state.user.principal.tenantId;\n    },\n    usersViewing: function usersViewing(state) {\n      return state.users.viewing;\n    }\n  })),\n  watch: {\n    '$route': function $route(to, from) {\n      var toId = to.params.id;\n      this.id = ~~toId;\n    }\n  }\n};",{"version":3,"sources":["AssociationsByMember.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-layout column ma-5>\n    <v-card>\n      <v-card-title class=\"secondary white--text\" primary-title style=\"justify-content: center;\">\n        <h1><span v-if=\"associations\">{{displayName ? 'Associations containing ' + displayName : ''}}</span></h1>\n      </v-card-title>\n      <AssociationsDataTable\n        :associations=\"associations\"\n        :currentScreen=\"'associationsByMember'\"\n        @handleEdittingMetaDataArr=\"handleEdittingMetaDataArr\"\n        @removeConfirm=\"removeConfirm\"\n        @view=\"view\"\n      />\n    </v-card>\n  </v-layout>\n</template>\n\n<script>\nimport { getAssociation } from '@/users/users.gql'\nimport AssociationsDataTable from '@/components/AssociationsDataTable.vue'\nimport { mapGetters, mapState, mapActions } from 'vuex'\nimport { StoreGetters } from '@/store'\nimport { UsersActions } from '@/users/UsersStore'\n\nexport default {\n  components: {\n    AssociationsDataTable\n  },\n  data () {\n    return {\n      association: {},\n      headers: [\n        { text: 'Id', value: 'id', sortable: false },\n        { text: 'Member Name', value: 'name', sortable: false },\n        { text: 'Role', value: 'role', sortable: false },\n        { text: 'Rate', value: 'metadata', sortable: false, width: '18%' },\n        { text: 'Actions', sortable: false, width: '20%' }\n      ],\n      id: ~~this.$route.params.id,\n      addDialog: false,\n      displayName: null\n    }\n  },\n  apollo: {\n    associations: {\n      query: getAssociation,\n      variables() {\n        return {\n          input: {\n            ids: [this.id]\n          }\n        }\n      },\n      update(data) {\n        const { members: { nodes } } = data\n        const { associations } = nodes[0]\n        if (!associations[0]) {\n          this.usersViewing.forEach(result => {\n            if (!displayName && result.id === this.id) {\n              this.displayName = result.displayName\n            }\n          })\n\n          return []\n        }\n        const { member: { displayName } } = associations[0]\n\n        this.displayName = displayName\n\n        if (Array.isArray(associations)) {\n          const parsedAssociations = associations.map(association => {\n            const {\n              association: assn,\n              associationId\n            } = association\n\n            return {\n              id: associationId,\n              key: assn.key,\n              name: assn.name,\n              type: assn.type.name\n            }\n          })\n          return parsedAssociations\n        } else {\n          return this.placeHolderName ? [{ name: this.placeHolderName }] : []\n        }\n      },\n      fetchPolicy: 'network-only'\n    }\n  },\n  methods: {\n    ...mapActions({\n      userStartViewing: UsersActions.START_VIEWING\n    }),\n    handleEdittingMetaDataArr(index, inputValue) {\n      this.edittingMetaDataArr[index].metadata.percent = inputValue\n    },\n    removeConfirm(item) {\n      this.removeItem = item\n      this.removeDialog = true\n    },\n    async view(props) {\n      const { item: { key } } = props\n      this.$router.push(`/associations/id/${key}`)\n    }\n  },\n  computed: {\n    ...mapGetters({\n      permissions: StoreGetters.permissions\n    }),\n    ...mapState({\n      tenantId: state => state.user.principal.tenantId,\n      usersViewing: state => state.users.viewing\n    })\n  },\n  watch: {\n    '$route' (to, from) {\n      const { params: { id: toId } } = to\n      this.id = ~~toId\n    }\n  }\n}\n</script>\n\n<style>\ninput {\n  padding: 0 !important;\n}\n\n.v-input__slot {\n  margin-bottom: 0;\n}\n\n.association-table {\n  cursor: default;\n}\n.addbtn.sm {\n  top: -5px !important;\n}\n.addbtn {\n  top: 15px;\n}\n</style>\n"],"sourceRoot":"src/views/associations"}]}