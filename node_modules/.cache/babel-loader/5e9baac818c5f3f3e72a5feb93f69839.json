{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/components/UserAutocomplete.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/components/UserAutocomplete.vue","mtime":1570835920000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { pathOr } from 'ramda';\nimport { searchUsers } from '@/users/users.gql';\nexport default {\n  name: 'UserAutocomplete',\n  props: {\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    label: {\n      type: String,\n      default: 'Select Time'\n    }\n  },\n  data: function data() {\n    return {\n      loading: false,\n      results: [],\n      term: null,\n      userSelected: {}\n    };\n  },\n  methods: {\n    getItemDisplay: function getItemDisplay(item) {\n      var displayName = item.displayName,\n          contacts = item.contacts,\n          id = item.id;\n      if (contacts === undefined) return;\n      return \"\".concat(displayName, \" (\").concat(id, \") - \").concat(contacts[0].emails[0].email);\n    },\n    getResults: function () {\n      var _getResults = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(!this.term || this.term.length < 3)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", []);\n\n              case 2:\n                this.loading = true;\n                _context.next = 5;\n                return this.$apollo.query({\n                  query: searchUsers,\n                  variables: {\n                    memberCon: {\n                      ids: null,\n                      query: this.term,\n                      tags: [],\n                      first: 10,\n                      after: 0\n                    }\n                  },\n                  fetchPolicy: 'network-only'\n                });\n\n              case 5:\n                res = _context.sent;\n                this.results.length = 0;\n                pathOr([], ['data', 'members', 'nodes'], res).forEach(function (r) {\n                  return _this.results.push(r);\n                });\n                this.loading = false;\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getResults() {\n        return _getResults.apply(this, arguments);\n      }\n\n      return getResults;\n    }()\n  },\n  watch: {\n    term: function term() {\n      this.getResults();\n    },\n    userSelected: function userSelected(val) {\n      this.$emit('selected', this.userSelected);\n    }\n  }\n};",{"version":3,"sources":["UserAutocomplete.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAoBA,SAAA,MAAA,QAAA,OAAA;AACA,SAAA,WAAA,QAAA,mBAAA;AAEA,eAAA;AACA,QAAA,kBADA;AAEA,SAAA;AACA,cAAA;AAAA,YAAA,OAAA;AAAA,eAAA;AAAA,KADA;AAEA,WAAA;AAAA,YAAA,MAAA;AAAA,eAAA;AAAA;AAFA,GAFA;AAMA,MANA,kBAMA;AACA,WAAA;AACA,eAAA,KADA;AAEA,eAAA,EAFA;AAGA,YAAA,IAHA;AAIA,oBAAA;AAJA,KAAA;AAMA,GAbA;AAcA,WAAA;AACA,kBADA,0BACA,IADA,EACA;AAAA,UACA,WADA,GACA,IADA,CACA,WADA;AAAA,UACA,QADA,GACA,IADA,CACA,QADA;AAAA,UACA,EADA,GACA,IADA,CACA,EADA;AAEA,UAAA,aAAA,SAAA,EAAA;AACA,uBAAA,WAAA,eAAA,EAAA,iBAAA,SAAA,CAAA,EAAA,MAAA,CAAA,CAAA,EAAA,KAAA;AACA,KALA;AAMA,cANA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAOA,CAAA,KAAA,IAAA,IAAA,KAAA,IAAA,CAAA,MAAA,GAAA,CAPA;AAAA;AAAA;AAAA;;AAAA,iDAOA,EAPA;;AAAA;AAQA,qBAAA,OAAA,GAAA,IAAA;AARA;AAAA,uBASA,KAAA,OAAA,CAAA,KAAA,CAAA;AACA,yBAAA,WADA;AAEA,6BAAA;AACA,+BAAA;AAAA,2BAAA,IAAA;AAAA,6BAAA,KAAA,IAAA;AAAA,4BAAA,EAAA;AAAA,6BAAA,EAAA;AAAA,6BAAA;AAAA;AADA,mBAFA;AAKA,+BAAA;AALA,iBAAA,CATA;;AAAA;AASA,mBATA;AAgBA,qBAAA,OAAA,CAAA,MAAA,GAAA,CAAA;AACA,uBAAA,EAAA,EAAA,CAAA,MAAA,EAAA,SAAA,EAAA,OAAA,CAAA,EAAA,GAAA,EAAA,OAAA,CAAA;AAAA,yBAAA,MAAA,OAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AAAA,iBAAA;AACA,qBAAA,OAAA,GAAA,KAAA;;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,GAdA;AAmCA,SAAA;AACA,QADA,kBACA;AAAA,WAAA,UAAA;AAAA,KADA;AAEA,gBAFA,wBAEA,GAFA,EAEA;AACA,WAAA,KAAA,CAAA,UAAA,EAAA,KAAA,YAAA;AACA;AAJA;AAnCA,CAAA","sourcesContent":["<template>\n  <div>\n    <v-autocomplete\n      :label=\"label\"\n      :loading=\"loading\"\n      :item-text=\"getItemDisplay\"\n      :item-value=\"getItemDisplay\"\n      :items=\"results\"\n      :rules=\"[ v => !!v || 'Field is required' ]\"\n      :search-input.sync=\"term\"\n      hide-no-data\n      hint=\"Find A User\"\n      no-filter\n      return-object\n      v-model=\"userSelected\"\n    />\n  </div>\n</template>\n\n<script>\nimport { pathOr } from 'ramda'\nimport { searchUsers } from '@/users/users.gql'\n\nexport default {\n  name: 'UserAutocomplete',\n  props: {\n    disabled: { type: Boolean, default: false },\n    label: { type: String, default: 'Select Time' }\n  },\n  data () {\n    return {\n      loading: false,\n      results: [],\n      term: null,\n      userSelected: {}\n    }\n  },\n  methods: {\n    getItemDisplay (item) {\n      const { displayName, contacts, id } = item\n      if (contacts === undefined) return\n      return `${displayName} (${id}) - ${contacts[0].emails[0].email}`\n    },\n    async getResults() {\n      if (!this.term || this.term.length < 3) return []\n      this.loading = true\n      const res = await this.$apollo.query({\n        query: searchUsers,\n        variables: {\n          memberCon: { ids: null, query: this.term, tags: [], first: 10, after: 0 }\n        },\n        fetchPolicy: 'network-only'\n      })\n      this.results.length = 0\n      pathOr([], ['data', 'members', 'nodes'], res).forEach(r => this.results.push(r))\n      this.loading = false\n    }\n  },\n  watch: {\n    term () { this.getResults() },\n    userSelected (val) {\n      this.$emit('selected', this.userSelected)\n    }\n  }\n}\n</script>\n\n<style scoped>\n</style>\n"],"sourceRoot":"src/components"}]}