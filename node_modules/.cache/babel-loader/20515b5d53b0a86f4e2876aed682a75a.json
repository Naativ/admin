{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/eslint-loader/index.js??ref--13-0!/Users/narfdre/Code/hexly/admin/src/impersonation/impersonate.gql.js","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/impersonation/impersonate.gql.js","mtime":1554331296000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _taggedTemplateLiteral from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\nmutation Impersonate($input: IamImpersonationRequest!) {\\n  iamImpersonate(input: $input){\\n    token\\n    success\\n    reason\\n    principal {\\n      member {\\n        displayName\\n        tenantId\\n      }      \\n      permissionIds\\n      username\\n      identityId\\n      memberId\\n    }\\n  }\\n}\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nmutation iamImpersonationPrepare($input: IamImpersonationPreparation!) {\\n  iamImpersonationPrepare(input: $input){\\n      token\\n      targets\\n      secondsTtl\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar gql = require('graphql-tag');\n\nexport var PREP_IMPERSONATE = gql(_templateObject());\nexport var IMPERSONATE_MUTATION = gql(_templateObject2());",{"version":3,"sources":["/Users/narfdre/Code/hexly/admin/src/impersonation/impersonate.gql.js"],"names":["gql","require","PREP_IMPERSONATE","IMPERSONATE_MUTATION"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,MAAMC,QAAQ,aAAR,CAAZ;;AAEA,OAAO,IAAMC,mBAAmBF,GAAnB,mBAAN;AAUP,OAAO,IAAMG,uBAAuBH,GAAvB,oBAAN","sourcesContent":["const gql = require('graphql-tag')\n\nexport const PREP_IMPERSONATE = gql`\nmutation iamImpersonationPrepare($input: IamImpersonationPreparation!) {\n  iamImpersonationPrepare(input: $input){\n      token\n      targets\n      secondsTtl\n    }\n  }\n`\n\nexport const IMPERSONATE_MUTATION = gql`\nmutation Impersonate($input: IamImpersonationRequest!) {\n  iamImpersonate(input: $input){\n    token\n    success\n    reason\n    principal {\n      member {\n        displayName\n        tenantId\n      }      \n      permissionIds\n      username\n      identityId\n      memberId\n    }\n  }\n}\n`\n"]}]}