{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/eslint-loader/index.js??ref--13-0!/Users/narfdre/Code/hexly/admin/src/users/members.gql.js","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/users/members.gql.js","mtime":1581353753561},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _toConsumableArray from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _taggedTemplateLiteral from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject19() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation adjustTags($input: MemberTagAdjustmentInput!) {\\n    adjustTags(input: $input) {\\n      id\\n      name\\n      tags\\n    }\\n  }\\n\"]);\n\n  _templateObject19 = function _templateObject19() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject18() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation updateMember($input: MemberInfoInput) {\\n    updateMember(input: $input) {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject18 = function _templateObject18() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject17() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation updateMemberSlug($input: UpdateSlugInput!) {\\n    updateMemberSlug(input: $input) {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject17 = function _templateObject17() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject16() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation addMemberSlug($input: SlugInput!) {\\n    addMemberSlug(input: $input) {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject16 = function _templateObject16() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject15() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation updateMemberSubset($input: MemberInfoInputSubset) {\\n    updateMemberSubset(input: $input) {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject15 = function _templateObject15() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject14() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation contactsUpsert($input: ContactUpsertInput) {\\n    contactsUpsert(input: $input) {\\n      id\\n      tenantId\\n      firstName\\n    }\\n  }\\n\"]);\n\n  _templateObject14 = function _templateObject14() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject13() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation iamUpsertUsername($input: IamUpsertUsernameUpsert) {\\n    iamUpsertUsername(input: $input)\\n  }\\n\"]);\n\n  _templateObject13 = function _templateObject13() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject12() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation contactPhoneUpsert($input: ContactPhoneInput!) {\\n    contactPhoneUpsert(input: $input) {\\n      id\\n      number\\n      type\\n      contactId\\n    }\\n  }\\n\"]);\n\n  _templateObject12 = function _templateObject12() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject11() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation updateAddress($input: AddressInput) {\\n    updateAddress(input:$input) {\\n        id\\n        contactId\\n        name\\n        street\\n        street2\\n        city\\n        province\\n        country\\n        postalCode\\n        lat\\n        long\\n      }\\n    }\\n  \"]);\n\n  _templateObject11 = function _templateObject11() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\"\\n  query compStatsQuery($input: CompStatsQueryInput) {\\n    compStatsQuery(input: $input) {\\n      results {\\n        memberId\\n        rank {\\n          rank\\n          achieved\\n          satisfied {\\n            activeLeg\\n            genOption1Rank\\n            genOption1Value\\n            genOption2Rank\\n            genOption2Value\\n            personalTotalPoints\\n            lifetimeTotalPoints\\n            groupPoints\\n            downlinePoints\\n            downlineAdjustedPoints\\n          }\\n          deltas {\\n            activeLeg\\n            genOption1Rank\\n            genOption1Value\\n            genOption2Rank\\n            genOption2Value\\n            personalTotalPoints\\n            lifetimeTotalPoints\\n            groupPoints\\n            downlinePoints\\n            downlineAdjustedPoints\\n          }\\n          requirements {\\n            activeLeg\\n            genOption1Rank\\n            genOption1Value\\n            genOption2Rank\\n            genOption2Value\\n            personalTotalPoints\\n            lifetimeTotalPoints\\n            groupPoints\\n            downlinePoints\\n            downlineAdjustedPoints\\n          }\\n        }\\n        nextRank {\\n          rank\\n          achieved\\n          satisfied {\\n            activeLeg\\n            genOption1Rank\\n            genOption1Value\\n            genOption2Rank\\n            genOption2Value\\n            personalTotalPoints\\n            lifetimeTotalPoints\\n            groupPoints\\n            downlinePoints\\n            downlineAdjustedPoints\\n          }\\n          deltas {\\n            activeLeg\\n            genOption1Rank\\n            genOption1Value\\n            genOption2Rank\\n            genOption2Value\\n            personalTotalPoints\\n            lifetimeTotalPoints\\n            groupPoints\\n            downlinePoints\\n            downlineAdjustedPoints\\n          }\\n          requirements {\\n            activeLeg\\n            genOption1Rank\\n            genOption1Value\\n            genOption2Rank\\n            genOption2Value\\n            personalTotalPoints\\n            lifetimeTotalPoints\\n            groupPoints\\n            downlinePoints\\n            downlineAdjustedPoints\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n  query checkSlug($input: SlugInput!) {\\n    checkSlug(input: $input) {\\n      id\\n      tenantId\\n      memberId\\n      slug\\n      priority\\n    }\\n  }\\n\"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n    query getMemberCredentials($input: getMemberCredentialsInput!) {\\n      getMemberCredentials(input: $input) {\\n        tenantId\\n        credentials {\\n          id\\n          identityId\\n          username\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n    query member($memberId: Int!) {\\n      members(condition: { ids: [$memberId] }) {\\n        nodes {\\n          contacts {\\n            id\\n            memberId\\n            addresses {\\n              type\\n              id\\n              contactId\\n              name\\n              street\\n              street2\\n              city\\n              province\\n              country\\n              postalCode\\n              lat\\n              long\\n            }\\n          }\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n    query member($memberId: Int!) {\\n      members(condition: { ids: [$memberId] }) {\\n        nodes {\\n          contacts {\\n            id\\n            phoneNumbers {\\n              id\\n              type\\n              contactId\\n              number\\n            }\\n          }\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    query member($memberId: Int!) {\\n      members(condition: { ids: [$memberId] }) {\\n        nodes {\\n          contacts {\\n            id\\n            emails {\\n              id\\n              email\\n              priority\\n            }\\n          }\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    query member($memberId: Int!) {\\n      members(condition: { ids: [$memberId] }) {\\n        nodes {\\n          contacts {\\n            id\\n            firstName\\n            lastName\\n            displayName\\n          }\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    query member($memberId: Int!) {\\n      members(condition: { ids: [$memberId] }) {\\n        nodes {\\n          statusId\\n          status\\n          tags\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query member($memberId: Int!) {\\n      members(condition: { ids: [$memberId] }) {\\n        nodes {\\n          birthdate\\n          id\\n          firstName\\n          lastName\\n          name\\n          displayName\\n          mrn\\n          tenantOid\\n          profileUrl\\n          slugs {\\n            id\\n            slug\\n            hidden\\n            explicit\\n          }\\n          slug\\n          sponsor {\\n            id\\n            displayName\\n            profileUrl\\n          }\\n\\n          createdOn\\n          claimedOn\\n          joinedOn\\n          timezoneId\\n          legalLocaleId\\n          type {\\n            id\\n            key\\n            name\\n            priority\\n          }\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query member($memberId: Int!) {\\n      credentials: getMemberCredentials(input: { memberId: $memberId }) {\\n        tenantId\\n        credentials {\\n          id\\n          identityId\\n          username\\n        }\\n      }\\n      members(condition: { ids: [$memberId] }) {\\n        nodes {\\n          awards {\\n            id\\n            name\\n            awardedOn\\n            metadata\\n          }\\n          birthdate\\n          id\\n          firstName\\n          lastName\\n          name\\n          displayName\\n          mrn\\n          tenantOid\\n          profileUrl\\n          statusId\\n          slugs {\\n            id\\n            slug\\n            hidden\\n            explicit\\n          }\\n          sponsor {\\n            id\\n            displayName\\n            profileUrl\\n          }\\n\\n          createdOn\\n          claimedOn\\n          joinedOn\\n          timezoneId\\n          legalLocaleId\\n          type {\\n            id\\n            key\\n            name\\n            priority\\n          }\\n          tags\\n          contacts {\\n            id\\n            firstName\\n            lastName\\n            displayName\\n            phoneNumbers {\\n              id\\n              type\\n              contactId\\n              number\\n            }\\n            emails {\\n              id\\n              email\\n              priority\\n            }\\n            addresses {\\n              name\\n              street\\n              street2\\n              city\\n              province\\n              country\\n              postalCode\\n              lat\\n              long\\n            }\\n          }\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { get } from 'lodash';\n/**\n * Returns most the details about a member, including contacts and credentials\n */\n\nexport var MemberDetailsQuery = {\n  query: gql(_templateObject()),\n  update: function update(data) {\n    var member = _objectSpread({}, get(data, 'members.nodes.0'));\n\n    if (member) {\n      member.credentials = _toConsumableArray(get(data, 'credentials.credentials', []));\n      member.credentials = _toConsumableArray(member.credentials);\n      member.tenantId = data.credentials.tenantId;\n    }\n\n    return member;\n  }\n};\nexport var MemberDetailsGQL = {\n  query: gql(_templateObject2())\n};\nexport var MiscDetailsGQL = {\n  query: gql(_templateObject3())\n};\nexport var ContactCardNameGQL = {\n  query: gql(_templateObject4())\n};\nexport var ContactCardEmailGQL = {\n  query: gql(_templateObject5())\n};\nexport var ContactCardPhoneGQL = {\n  query: gql(_templateObject6())\n};\nexport var ContactCardAddressesGQL = {\n  query: gql(_templateObject7())\n};\nexport var CredentialsCardGQL = {\n  query: gql(_templateObject8())\n};\nexport var CheckSlugQuery = gql(_templateObject9());\nexport var COMP_STATS_QUERY = gql(_templateObject10());\nexport var UpdateAddressesMutation = gql(_templateObject11());\nexport var PhoneUpsert = gql(_templateObject12());\nexport var UsernameUpsert = gql(_templateObject13());\nexport var ContactsUpsert = gql(_templateObject14());\nexport var UpdateMemberSubset = gql(_templateObject15());\nexport var AddMemberSlug = gql(_templateObject16());\nexport var UpdateMemberSlug = gql(_templateObject17());\nexport var UpdateMemberStatus = gql(_templateObject18());\nexport var AdjustTags = gql(_templateObject19());",{"version":3,"sources":["/Users/narfdre/Code/hexly/admin/src/users/members.gql.js"],"names":["gql","get","MemberDetailsQuery","query","update","data","member","credentials","tenantId","MemberDetailsGQL","MiscDetailsGQL","ContactCardNameGQL","ContactCardEmailGQL","ContactCardPhoneGQL","ContactCardAddressesGQL","CredentialsCardGQL","CheckSlugQuery","COMP_STATS_QUERY","UpdateAddressesMutation","PhoneUpsert","UsernameUpsert","ContactsUpsert","UpdateMemberSubset","AddMemberSlug","UpdateMemberSlug","UpdateMemberStatus","AdjustTags"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,GAAT,QAAoB,QAApB;AAEA;;;;AAGA,OAAO,IAAMC,qBAAqB;AAChCC,SAAOH,GAAP,mBADgC;AAqFhCI,QArFgC,kBAqFzBC,IArFyB,EAqFnB;AACX,QAAIC,2BAAcL,IAAII,IAAJ,EAAU,iBAAV,CAAd,CAAJ;;AACA,QAAIC,MAAJ,EAAY;AACVA,aAAOC,WAAP,sBAAyBN,IAAII,IAAJ,EAAU,yBAAV,EAAqC,EAArC,CAAzB;AACAC,aAAOC,WAAP,sBACKD,OAAOC,WADZ;AAGAD,aAAOE,QAAP,GAAkBH,KAAKE,WAAL,CAAiBC,QAAnC;AACD;;AACD,WAAOF,MAAP;AACD;AA/F+B,CAA3B;AAkGP,OAAO,IAAMG,mBAAmB;AAC9BN,SAAOH,GAAP;AAD8B,CAAzB;AA4CP,OAAO,IAAMU,iBAAiB;AAC5BP,SAAOH,GAAP;AAD4B,CAAvB;AAcP,OAAO,IAAMW,qBAAqB;AAChCR,SAAOH,GAAP;AADgC,CAA3B;AAiBP,OAAO,IAAMY,sBAAsB;AACjCT,SAAOH,GAAP;AADiC,CAA5B;AAmBP,OAAO,IAAMa,sBAAsB;AACjCV,SAAOH,GAAP;AADiC,CAA5B;AAoBP,OAAO,IAAMc,0BAA0B;AACrCX,SAAOH,GAAP;AADqC,CAAhC;AA6BP,OAAO,IAAMe,qBAAqB;AAChCZ,SAAOH,GAAP;AADgC,CAA3B;AAeP,OAAO,IAAMgB,iBAAiBhB,GAAjB,oBAAN;AAYP,OAAO,IAAMiB,mBAAmBjB,GAAnB,qBAAN;AA0FP,OAAO,IAAMkB,0BAA0BlB,GAA1B,qBAAN;AAkBP,OAAO,IAAMmB,cAAcnB,GAAd,qBAAN;AAWP,OAAO,IAAMoB,iBAAiBpB,GAAjB,qBAAN;AAMP,OAAO,IAAMqB,iBAAiBrB,GAAjB,qBAAN;AAUP,OAAO,IAAMsB,qBAAqBtB,GAArB,qBAAN;AAQP,OAAO,IAAMuB,gBAAgBvB,GAAhB,qBAAN;AAQP,OAAO,IAAMwB,mBAAmBxB,GAAnB,qBAAN;AAQP,OAAO,IAAMyB,qBAAqBzB,GAArB,qBAAN;AAQP,OAAO,IAAM0B,aAAa1B,GAAb,qBAAN","sourcesContent":["import gql from 'graphql-tag'\nimport { get } from 'lodash'\n\n/**\n * Returns most the details about a member, including contacts and credentials\n */\nexport const MemberDetailsQuery = {\n  query: gql`\n    query member($memberId: Int!) {\n      credentials: getMemberCredentials(input: { memberId: $memberId }) {\n        tenantId\n        credentials {\n          id\n          identityId\n          username\n        }\n      }\n      members(condition: { ids: [$memberId] }) {\n        nodes {\n          awards {\n            id\n            name\n            awardedOn\n            metadata\n          }\n          birthdate\n          id\n          firstName\n          lastName\n          name\n          displayName\n          mrn\n          tenantOid\n          profileUrl\n          statusId\n          slugs {\n            id\n            slug\n            hidden\n            explicit\n          }\n          sponsor {\n            id\n            displayName\n            profileUrl\n          }\n\n          createdOn\n          claimedOn\n          joinedOn\n          timezoneId\n          legalLocaleId\n          type {\n            id\n            key\n            name\n            priority\n          }\n          tags\n          contacts {\n            id\n            firstName\n            lastName\n            displayName\n            phoneNumbers {\n              id\n              type\n              contactId\n              number\n            }\n            emails {\n              id\n              email\n              priority\n            }\n            addresses {\n              name\n              street\n              street2\n              city\n              province\n              country\n              postalCode\n              lat\n              long\n            }\n          }\n        }\n      }\n    }\n  `,\n  update(data) {\n    let member = { ...get(data, 'members.nodes.0') }\n    if (member) {\n      member.credentials = [...get(data, 'credentials.credentials', [])]\n      member.credentials = [\n        ...member.credentials\n      ]\n      member.tenantId = data.credentials.tenantId\n    }\n    return member\n  }\n}\n\nexport const MemberDetailsGQL = {\n  query: gql`\n    query member($memberId: Int!) {\n      members(condition: { ids: [$memberId] }) {\n        nodes {\n          birthdate\n          id\n          firstName\n          lastName\n          name\n          displayName\n          mrn\n          tenantOid\n          profileUrl\n          slugs {\n            id\n            slug\n            hidden\n            explicit\n          }\n          slug\n          sponsor {\n            id\n            displayName\n            profileUrl\n          }\n\n          createdOn\n          claimedOn\n          joinedOn\n          timezoneId\n          legalLocaleId\n          type {\n            id\n            key\n            name\n            priority\n          }\n        }\n      }\n    }\n  `\n}\n\nexport const MiscDetailsGQL = {\n  query: gql`\n    query member($memberId: Int!) {\n      members(condition: { ids: [$memberId] }) {\n        nodes {\n          statusId\n          status\n          tags\n        }\n      }\n    }\n  `\n}\n\nexport const ContactCardNameGQL = {\n  query: gql`\n    query member($memberId: Int!) {\n      members(condition: { ids: [$memberId] }) {\n        nodes {\n          contacts {\n            id\n            firstName\n            lastName\n            displayName\n          }\n        }\n      }\n    }\n  `\n}\n\nexport const ContactCardEmailGQL = {\n  query: gql`\n    query member($memberId: Int!) {\n      members(condition: { ids: [$memberId] }) {\n        nodes {\n          contacts {\n            id\n            emails {\n              id\n              email\n              priority\n            }\n          }\n        }\n      }\n    }\n  `\n}\n\nexport const ContactCardPhoneGQL = {\n  query: gql`\n    query member($memberId: Int!) {\n      members(condition: { ids: [$memberId] }) {\n        nodes {\n          contacts {\n            id\n            phoneNumbers {\n              id\n              type\n              contactId\n              number\n            }\n          }\n        }\n      }\n    }\n  `\n}\n\nexport const ContactCardAddressesGQL = {\n  query: gql`\n    query member($memberId: Int!) {\n      members(condition: { ids: [$memberId] }) {\n        nodes {\n          contacts {\n            id\n            memberId\n            addresses {\n              type\n              id\n              contactId\n              name\n              street\n              street2\n              city\n              province\n              country\n              postalCode\n              lat\n              long\n            }\n          }\n        }\n      }\n    }\n  `\n}\n\nexport const CredentialsCardGQL = {\n  query: gql`\n    query getMemberCredentials($input: getMemberCredentialsInput!) {\n      getMemberCredentials(input: $input) {\n        tenantId\n        credentials {\n          id\n          identityId\n          username\n        }\n      }\n    }\n  `\n}\n\nexport const CheckSlugQuery = gql`\n  query checkSlug($input: SlugInput!) {\n    checkSlug(input: $input) {\n      id\n      tenantId\n      memberId\n      slug\n      priority\n    }\n  }\n`\n\nexport const COMP_STATS_QUERY = gql`\n  query compStatsQuery($input: CompStatsQueryInput) {\n    compStatsQuery(input: $input) {\n      results {\n        memberId\n        rank {\n          rank\n          achieved\n          satisfied {\n            activeLeg\n            genOption1Rank\n            genOption1Value\n            genOption2Rank\n            genOption2Value\n            personalTotalPoints\n            lifetimeTotalPoints\n            groupPoints\n            downlinePoints\n            downlineAdjustedPoints\n          }\n          deltas {\n            activeLeg\n            genOption1Rank\n            genOption1Value\n            genOption2Rank\n            genOption2Value\n            personalTotalPoints\n            lifetimeTotalPoints\n            groupPoints\n            downlinePoints\n            downlineAdjustedPoints\n          }\n          requirements {\n            activeLeg\n            genOption1Rank\n            genOption1Value\n            genOption2Rank\n            genOption2Value\n            personalTotalPoints\n            lifetimeTotalPoints\n            groupPoints\n            downlinePoints\n            downlineAdjustedPoints\n          }\n        }\n        nextRank {\n          rank\n          achieved\n          satisfied {\n            activeLeg\n            genOption1Rank\n            genOption1Value\n            genOption2Rank\n            genOption2Value\n            personalTotalPoints\n            lifetimeTotalPoints\n            groupPoints\n            downlinePoints\n            downlineAdjustedPoints\n          }\n          deltas {\n            activeLeg\n            genOption1Rank\n            genOption1Value\n            genOption2Rank\n            genOption2Value\n            personalTotalPoints\n            lifetimeTotalPoints\n            groupPoints\n            downlinePoints\n            downlineAdjustedPoints\n          }\n          requirements {\n            activeLeg\n            genOption1Rank\n            genOption1Value\n            genOption2Rank\n            genOption2Value\n            personalTotalPoints\n            lifetimeTotalPoints\n            groupPoints\n            downlinePoints\n            downlineAdjustedPoints\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const UpdateAddressesMutation = gql`\n  mutation updateAddress($input: AddressInput) {\n    updateAddress(input:$input) {\n        id\n        contactId\n        name\n        street\n        street2\n        city\n        province\n        country\n        postalCode\n        lat\n        long\n      }\n    }\n  `\n\nexport const PhoneUpsert = gql`\n  mutation contactPhoneUpsert($input: ContactPhoneInput!) {\n    contactPhoneUpsert(input: $input) {\n      id\n      number\n      type\n      contactId\n    }\n  }\n`\n\nexport const UsernameUpsert = gql`\n  mutation iamUpsertUsername($input: IamUpsertUsernameUpsert) {\n    iamUpsertUsername(input: $input)\n  }\n`\n\nexport const ContactsUpsert = gql`\n  mutation contactsUpsert($input: ContactUpsertInput) {\n    contactsUpsert(input: $input) {\n      id\n      tenantId\n      firstName\n    }\n  }\n`\n\nexport const UpdateMemberSubset = gql`\n  mutation updateMemberSubset($input: MemberInfoInputSubset) {\n    updateMemberSubset(input: $input) {\n      id\n    }\n  }\n`\n\nexport const AddMemberSlug = gql`\n  mutation addMemberSlug($input: SlugInput!) {\n    addMemberSlug(input: $input) {\n      id\n    }\n  }\n`\n\nexport const UpdateMemberSlug = gql`\n  mutation updateMemberSlug($input: UpdateSlugInput!) {\n    updateMemberSlug(input: $input) {\n      id\n    }\n  }\n`\n\nexport const UpdateMemberStatus = gql`\n  mutation updateMember($input: MemberInfoInput) {\n    updateMember(input: $input) {\n      id\n    }\n  }\n`\n\nexport const AdjustTags = gql`\n  mutation adjustTags($input: MemberTagAdjustmentInput!) {\n    adjustTags(input: $input) {\n      id\n      name\n      tags\n    }\n  }\n`\n"]}]}