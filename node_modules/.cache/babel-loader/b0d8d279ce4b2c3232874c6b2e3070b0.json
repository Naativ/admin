{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/assets/UploadDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/assets/UploadDialog.vue","mtime":1574205365000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.sub\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.typed.uint8-array\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _slicedToArray from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport path from 'ramda/src/path'; // import TermsAndConditions from '@/components/TermsAndConditions.vue'\n\nimport vueFilePond from 'vue-filepond';\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImageResize from 'filepond-plugin-image-resize';\nimport FilePondPluginImageTransform from 'filepond-plugin-image-transform';\nimport FilePondPluginFilePoster from 'filepond-plugin-file-poster';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.esm.js';\nimport FilePondPluginFileValidateType from 'filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.esm.js'; // Import styles\n\nimport 'filepond/dist/filepond.min.css';\nimport 'filepond-plugin-file-poster/dist/filepond-plugin-file-poster.css';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css';\nimport { Promise } from 'bluebird';\nimport { mapActions, mapGetters } from 'vuex';\nimport { ContentActions, ContentGetters } from '@/content/ContentStore';\nimport { createAsset } from '@/content/ContentService'; // import { rules } from '@/utils/Validation.js'\n// Create FilePond component\n\nvar FilePond = vueFilePond(FilePondPluginImageTransform, FilePondPluginFileValidateType, FilePondPluginImagePreview, FilePondPluginFilePoster, FilePondPluginImageResize, FilePondPluginImageExifOrientation);\nexport default {\n  name: 'UploadDialog',\n  components: {\n    FilePond: FilePond // TermsAndConditions\n\n  },\n  mounted: function mounted() {\n    this.refreshMeta();\n  },\n  data: function data() {\n    return {\n      error: null,\n      loading: false,\n      uploadDialog: false,\n      fileData: {},\n      files: [],\n      currentFile: null,\n      assetTypes: [],\n      assetTags: [],\n      thumbnail: null,\n      assetSearch: {\n        pageSize: 25,\n        page: 1\n      },\n      success: null,\n      assetId: null // rules\n\n    };\n  },\n  computed: _objectSpread({}, mapGetters({\n    assetMeta: ContentGetters.assetMeta\n  })),\n  methods: _objectSpread({}, mapActions({\n    refreshMeta: ContentActions.REFRESH_ASSET_META,\n    refreshLibrary: ContentActions.REFRESH_LIBRARY_ASSETS\n  }), {\n    getTags: function getTags() {},\n    filtered: function filtered(tags, filters) {\n      return tags.filter(function (tag) {\n        return filters.indexOf(tag.id) > -1;\n      });\n    },\n    // fieldName is the name of the input field\n    // file is the actual file object to send\n    process: function () {\n      var _process = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(fieldName, file, metadata, load, error, progress, _abort) {\n        var _this = this;\n\n        var fileData, assetMeta, asset, tn, type, _assetMeta$providers, provider, anyTags, payload, result, request, err;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.success = null;\n                this.assetId = null;\n                fileData = this.fileData, assetMeta = this.assetMeta;\n\n                if (!(!fileData.name || !fileData.desc || !fileData.tags)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", error('Please fill out the whole form '));\n\n              case 5:\n                _context.prev = 5;\n                type = assetMeta.types.find(function (e) {\n                  return e.mimeType === file.type;\n                });\n\n                if (type) {\n                  _context.next = 10;\n                  break;\n                }\n\n                console.warn('Unsupported type', {\n                  file: file,\n                  assetMeta: assetMeta\n                });\n                return _context.abrupt(\"return\", error('Could not determine a supported file type for ' + file.type));\n\n              case 10:\n                _assetMeta$providers = _slicedToArray(assetMeta.providers, 1), provider = _assetMeta$providers[0];\n\n                if (provider) {\n                  _context.next = 14;\n                  break;\n                }\n\n                console.warn('No known upload provider', {\n                  file: file,\n                  assetMeta: assetMeta\n                });\n                return _context.abrupt(\"return\", error('Could not determine a supported upload destination. Please contact support'));\n\n              case 14:\n                // const profileAudience = assetMeta.audiences.find(_ => _.key === 'aud:profile')\n                anyTags = fileData.tags.map(function (fdMap, i) {\n                  return fdMap.id;\n                });\n                payload = {\n                  typeId: type.id,\n                  tenantIntegrationId: provider.tenantIntegrationId,\n                  slug: new Date().getTime().toString(),\n                  name: fileData.name,\n                  description: fileData.desc,\n                  anyTags: anyTags,\n                  public: false,\n                  ownerReadable: true\n                };\n\n                if (this.thumbnail && file.type.indexOf('video') === -1 && file.type.indexOf('pdf') === -1) {\n                  payload.thumbnail = {\n                    typeId: this.thumbnail.type.id,\n                    tenantIntegrationId: provider.tenantIntegrationId,\n                    slug: 'thumbnail_' + new Date().getTime().toString(),\n                    name: 'thumbnail_' + fileData.name,\n                    description: 'Thumbnail for ' + fileData.name,\n                    public: true,\n                    ownerReadable: false\n                  };\n                }\n\n                _context.next = 19;\n                return createAsset(payload);\n\n              case 19:\n                result = _context.sent;\n                this.assetId = result.assetId;\n                asset = path(['destination'], result);\n                tn = path(['thumbnail'], result);\n                _context.next = 29;\n                break;\n\n              case 25:\n                _context.prev = 25;\n                _context.t0 = _context[\"catch\"](5);\n                console.warn('failed meta stuff', _context.t0);\n                return _context.abrupt(\"return\", error('We were unable to associate your upload correctly. Please contact support'));\n\n              case 29:\n                if (!(tn && file.type.indexOf('video') === -1 && file.type.indexOf('pdf') === -1)) {\n                  _context.next = 38;\n                  break;\n                }\n\n                _context.prev = 30;\n                _context.next = 33;\n                return this.sendSigned(this.thumbnail.file, tn);\n\n              case 33:\n                _context.next = 38;\n                break;\n\n              case 35:\n                _context.prev = 35;\n                _context.t1 = _context[\"catch\"](30);\n                console.warn('failed uploading thumbnail', _context.t1);\n\n              case 38:\n                _context.next = 40;\n                return this.sendSigned(file, asset, progress);\n\n              case 40:\n                request = _context.sent;\n                _context.next = 43;\n                return this.refreshLibrary(this.assetSearch);\n\n              case 43:\n                if (request.status >= 200 && request.status < 300) {\n                  // the load method accepts either a string (id) or an object\n                  load(request.responseText);\n                  this.done();\n                } else {\n                  // Can call the error method if something is wrong, should exit after\n                  err = new Error('Non 200 upload response returned');\n                  err.request = request;\n                  error('Did not receive a valid upload response. Please contact support.');\n                } // Should expose an abort method so the request can be cancelled\n\n\n                return _context.abrupt(\"return\", {\n                  abort: function abort() {\n                    // This function is entered if the user has tapped the cancel button\n                    request.abort(); // Let FilePond know the request has been cancelled\n\n                    _abort();\n\n                    _this.error = 'Upload aborted';\n                  }\n                });\n\n              case 45:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[5, 25], [30, 35]]);\n      }));\n\n      function process(_x, _x2, _x3, _x4, _x5, _x6, _x7) {\n        return _process.apply(this, arguments);\n      }\n\n      return process;\n    }(),\n    beforeAddFile: function () {\n      var _beforeAddFile = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(file) {\n        var that;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                that = this;\n                that.thumbnail = null;\n                return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  if (file.fileType.indexOf('video') > -1) {\n                    var canvas = document.createElement('canvas');\n                    var video = document.createElement('video');\n                    video.type = file.type;\n                    video.src = URL.createObjectURL(file.file);\n                    video.currentTime = 2;\n\n                    video.onloadeddata = function () {\n                      var ratio = Math.min(500 / video.videoWidth, 500 / video.videoHeight);\n                      canvas.height = video.videoHeight * ratio;\n                      canvas.width = video.videoWidth * ratio;\n                      canvas.getContext('2d').drawImage(video, 0, 0, video.videoWidth * ratio, video.videoHeight * ratio);\n                      var thumbnail = canvas.toDataURL('image/png');\n                      file.setMetadata('poster', thumbnail);\n                      var blobBin = atob(thumbnail.split(',')[1]);\n                      var array = [];\n\n                      for (var i = 0; i < blobBin.length; i++) {\n                        array.push(blobBin.charCodeAt(i));\n                      }\n\n                      that.thumbnail = {\n                        type: that.assetMeta.types.find(function (e) {\n                          return e.mimeType === 'image/png';\n                        }),\n                        file: new Blob([new Uint8Array(array)], {\n                          type: 'image/png'\n                        })\n                      };\n                      resolve(true);\n                    };\n                  } else {\n                    resolve(true);\n                  }\n                }));\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function beforeAddFile(_x8) {\n        return _beforeAddFile.apply(this, arguments);\n      }\n\n      return beforeAddFile;\n    }(),\n    sendSigned: function () {\n      var _sendSigned = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(file, asset, progress) {\n        var destination, formData, request;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                destination = asset.destination;\n                formData = new FormData();\n                Object.keys(destination.fields).map(function (f) {\n                  formData.append(f, destination.fields[f]);\n                  return f + ' => ' + destination.fields[f];\n                }).join('\\n');\n                formData.append('file', file, file.name);\n                request = new XMLHttpRequest();\n                request.open('POST', destination.url); // Should call the progress method to update the progress to 100% before calling load\n                // Setting computable to false switches the loading indicator to infinite mode\n\n                if (progress) {\n                  request.upload.onprogress = function (e) {\n                    progress(e.lengthComputable, e.loaded, e.total);\n                  };\n                }\n\n                return _context3.abrupt(\"return\", new Promise(function (resolve) {\n                  // Should call the load method when done and pass the returned server file id\n                  // this server file id is then used later on when reverting or restoring a file\n                  // so your server knows which file to return without exposing that info to the client\n                  request.onload = function () {\n                    resolve(request);\n                  };\n\n                  request.send(formData);\n                }));\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function sendSigned(_x9, _x10, _x11) {\n        return _sendSigned.apply(this, arguments);\n      }\n\n      return sendSigned;\n    }(),\n    onaddfile: function () {\n      var _onaddfile = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(error, file) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (error) {\n                  if (file && file.main && file.sub) {\n                    this.error = \"\".concat(file.main, \": \").concat(file.sub);\n                  } else {\n                    this.error = error.body;\n                  }\n                }\n\n                if (!(this.currentFile || error)) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", false);\n\n              case 3:\n                this.currentFile = file;\n                this.$set(this, 'fileData', {\n                  name: file.filename,\n                  desc: '',\n                  tags: [],\n                  type: null\n                });\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function onaddfile(_x12, _x13) {\n        return _onaddfile.apply(this, arguments);\n      }\n\n      return onaddfile;\n    }(),\n    onError: function onError(error, file) {\n      this.loading = false;\n\n      if (error) {\n        if (file && file.main && file.sub) {\n          this.error = \"\".concat(file.main, \": \").concat(file.sub);\n        } else {\n          this.error = error.body;\n        }\n      }\n    },\n    onremovefile: function onremovefile(file) {\n      this.error = null;\n      this.currentFile = null;\n      this.fileData = null;\n    },\n    upload: function () {\n      var _upload = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5() {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this.loading = true;\n\n                this.$refs.pond._pond.setOptions({\n                  server: {\n                    process: this.process\n                  }\n                });\n\n                this.error = null;\n                _context5.next = 5;\n                return this.$refs.pond.processFile();\n\n              case 5:\n                this.loading = false;\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function upload() {\n        return _upload.apply(this, arguments);\n      }\n\n      return upload;\n    }(),\n    done: function () {\n      var _done = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6(reason) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                this.success = 'Uploaded Asset ' + this.assetId;\n                setTimeout(this.clearSuccess, 5000);\n                this.error = null;\n                this.currentFile = null;\n                this.fileData = null;\n                this.$refs.pond.removeFile();\n                this.thumbnail = null; // this.$emit('assetsUploaded')\n\n                _context6.next = 9;\n                return this.refreshLibrary(this.assetSearch);\n\n              case 9:\n                this.uploadDialog = false;\n\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function done(_x14) {\n        return _done.apply(this, arguments);\n      }\n\n      return done;\n    }(),\n    clearSuccess: function clearSuccess() {\n      this.success = null;\n    }\n  })\n};",{"version":3,"sources":["UploadDialog.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-layout justify-space-around column align-center>\n    <v-card class=\"upload\" :fullscreen=\"$vuetify.breakpoint.xs\">\n      <v-card-title class=\"application-title; justify-center\">\n        <h3>Select a Video or Image to Upload</h3>\n      </v-card-title>\n      <v-divider></v-divider>\n      <v-card-text>\n        <v-alert v-if=\"error\" type=\"error\" :value=\"error\">{{error}}</v-alert>\n        <file-pond\n          name=\"libaryUpload\"\n          ref=\"pond\"\n          class-name=\"my-pond\"\n          label-idle=\"Drop file here or click to browse files\"\n          :allow-multiple=\"false\"\n          :instantUpload=\"false\"\n          :allow-revert=\"false\"\n          :imageTransformOutputQuality=\"95\"\n          :allowImageExifOrientation=\"true\"\n          accepted-file-types=\"image/jpeg, image/png, video/webm, video/mp4, video/mov, video/quicktime, application/pdf\"\n          :files=\"files\"\n          :beforeAddFile=\"beforeAddFile\"\n          @addfile=\"onaddfile\"\n          @removefile=\"onremovefile\"\n          @error=\"onError\"\n        />\n        <div v-if=\"currentFile && !loading\">\n          <v-subheader>Asset Title</v-subheader>\n          <v-text-field\n            solo\n            :label=\"`Name your ${currentFile.fileType.split('/')[0]}`\"\n            v-model=\"fileData.name\"\n            counter=\"100\"\n            maxLength=\"100\"\n          />\n          <br>\n          <v-textarea\n            solo\n            label=\"Please provide a short description\"\n            v-model=\"fileData.desc\"\n            counter=\"250\"\n            maxLength=\"250\"\n          ></v-textarea>\n          <v-combobox\n            solo\n            persistent-hint\n            label=\"Select relevant tags\"\n            v-model=\"fileData.tags\"\n            item-text=\"name\"\n            item-value=\"id\"\n            :items=\"assetMeta.allTags\"\n            chips\n            deletable-chips\n            multiple\n            :return-object=\"true\"\n          />\n          <v-card-actions class=\"justify-end\">\n            <v-btn :loading=\"loading\" color=\"primary\" @click=\"upload\">Upload</v-btn>\n          </v-card-actions>\n        </div>\n      </v-card-text>\n      <v-divider></v-divider>\n        <v-card-actions class=\"justify-center\">\n        <v-btn :disabled=\"loading\" color=\"primary\" flat @click=\"done\">Exit</v-btn>\n        </v-card-actions>\n        <div class=\"text-xs-center\">\n          <small>Exiting before Uploading will Cancel Action</small>\n        </div>\n    </v-card>\n    <v-alert\n      transition=\"slide-y-transition\"\n      type=\"success\"\n      :value=\"success\">\n        {{success}}\n      </v-alert>\n  </v-layout>\n</template>\n\n<script>\n\nimport path from 'ramda/src/path'\n// import TermsAndConditions from '@/components/TermsAndConditions.vue'\n\nimport vueFilePond from 'vue-filepond'\n\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation'\nimport FilePondPluginImageResize from 'filepond-plugin-image-resize'\nimport FilePondPluginImageTransform from 'filepond-plugin-image-transform'\nimport FilePondPluginFilePoster from 'filepond-plugin-file-poster'\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.esm.js'\nimport FilePondPluginFileValidateType from 'filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.esm.js'\n\n// Import styles\nimport 'filepond/dist/filepond.min.css'\nimport 'filepond-plugin-file-poster/dist/filepond-plugin-file-poster.css'\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css'\nimport { Promise } from 'bluebird'\n\nimport { mapActions, mapGetters } from 'vuex'\nimport { ContentActions, ContentGetters } from '@/content/ContentStore'\nimport { createAsset } from '@/content/ContentService'\n// import { rules } from '@/utils/Validation.js'\n\n// Create FilePond component\nconst FilePond = vueFilePond(FilePondPluginImageTransform, FilePondPluginFileValidateType, FilePondPluginImagePreview, FilePondPluginFilePoster, FilePondPluginImageResize, FilePondPluginImageExifOrientation)\n\nexport default {\n  name: 'UploadDialog',\n  components: {\n    FilePond\n    // TermsAndConditions\n  },\n  mounted() {\n    this.refreshMeta()\n  },\n  data() {\n    return {\n      error: null,\n      loading: false,\n      uploadDialog: false,\n      fileData: {},\n      files: [],\n      currentFile: null,\n      assetTypes: [],\n      assetTags: [],\n      thumbnail: null,\n      assetSearch: {\n        pageSize: 25,\n        page: 1\n      },\n      success: null,\n      assetId: null\n      // rules\n    }\n  },\n  computed: {\n    ...mapGetters({\n      assetMeta: ContentGetters.assetMeta\n    })\n  },\n  methods: {\n    ...mapActions({\n      refreshMeta: ContentActions.REFRESH_ASSET_META,\n      refreshLibrary: ContentActions.REFRESH_LIBRARY_ASSETS\n    }),\n    getTags() {\n\n    },\n    filtered(tags, filters) {\n      return tags.filter(tag => filters.indexOf(tag.id) > -1)\n    },\n    // fieldName is the name of the input field\n    // file is the actual file object to send\n    async process(fieldName, file, metadata, load, error, progress, abort) {\n      this.success = null\n      this.assetId = null\n      const { fileData, assetMeta } = this\n      if (!fileData.name || !fileData.desc || !fileData.tags) {\n        return error('Please fill out the whole form ')\n      }\n\n      let asset, tn\n      try {\n        const type = assetMeta.types.find(e => e.mimeType === file.type)\n        if (!type) {\n          console.warn('Unsupported type', { file, assetMeta })\n          return error('Could not determine a supported file type for ' + file.type)\n        }\n\n        const [provider] = assetMeta.providers\n        if (!provider) {\n          console.warn('No known upload provider', { file, assetMeta })\n          return error('Could not determine a supported upload destination. Please contact support')\n        }\n\n        // const profileAudience = assetMeta.audiences.find(_ => _.key === 'aud:profile')\n        const anyTags = fileData.tags.map((fdMap, i) => {\n          return fdMap.id\n        })\n\n        const payload = {\n          typeId: type.id,\n          tenantIntegrationId: provider.tenantIntegrationId,\n          slug: new Date().getTime().toString(),\n          name: fileData.name,\n          description: fileData.desc,\n          anyTags,\n          public: false,\n          ownerReadable: true\n        }\n\n        if (this.thumbnail && file.type.indexOf('video') === -1 && file.type.indexOf('pdf') === -1) {\n          payload.thumbnail = {\n            typeId: this.thumbnail.type.id,\n            tenantIntegrationId: provider.tenantIntegrationId,\n            slug: 'thumbnail_' + new Date().getTime().toString(),\n            name: 'thumbnail_' + fileData.name,\n            description: 'Thumbnail for ' + fileData.name,\n            public: true,\n            ownerReadable: false\n          }\n        }\n\n        const result = await createAsset(payload)\n        this.assetId = result.assetId\n        asset = path(['destination'], result)\n        tn = path(['thumbnail'], result)\n      } catch (e) {\n        console.warn('failed meta stuff', e)\n        return error('We were unable to associate your upload correctly. Please contact support')\n      }\n\n      // THIS IS WHERE WE WANT TO SEND THE REQUEST TO THE S3 SIGNED URL\n      if (tn && file.type.indexOf('video') === -1 && file.type.indexOf('pdf') === -1) {\n        try {\n          await this.sendSigned(this.thumbnail.file, tn)\n        } catch (err) {\n          console.warn('failed uploading thumbnail', err)\n        }\n      }\n      const request = await this.sendSigned(file, asset, progress)\n\n      // await this.$emit('uploaded', asset)\n      await this.refreshLibrary(this.assetSearch)\n      if (request.status >= 200 && request.status < 300) {\n        // the load method accepts either a string (id) or an object\n        load(request.responseText)\n        this.done()\n      } else {\n        // Can call the error method if something is wrong, should exit after\n        const err = new Error('Non 200 upload response returned')\n        err.request = request\n        error('Did not receive a valid upload response. Please contact support.')\n      }\n\n      // Should expose an abort method so the request can be cancelled\n      return {\n        abort: () => {\n          // This function is entered if the user has tapped the cancel button\n          request.abort()\n\n          // Let FilePond know the request has been cancelled\n          abort()\n          this.error = 'Upload aborted'\n        }\n      }\n    },\n    async beforeAddFile(file) {\n      const that = this\n      that.thumbnail = null\n      return new Promise((resolve, reject) => {\n        if (file.fileType.indexOf('video') > -1) {\n          const canvas = document.createElement('canvas')\n          const video = document.createElement('video')\n          video.type = file.type\n          video.src = URL.createObjectURL(file.file)\n          video.currentTime = 2\n          video.onloadeddata = () => {\n            const ratio = Math.min(500 / video.videoWidth, 500 / video.videoHeight)\n            canvas.height = video.videoHeight * ratio\n            canvas.width = video.videoWidth * ratio\n            canvas.getContext('2d').drawImage(video, 0, 0, video.videoWidth * ratio, video.videoHeight * ratio)\n            const thumbnail = canvas.toDataURL('image/png')\n            file.setMetadata('poster', thumbnail)\n            var blobBin = atob(thumbnail.split(',')[1])\n            var array = []\n            for (var i = 0; i < blobBin.length; i++) {\n              array.push(blobBin.charCodeAt(i))\n            }\n            that.thumbnail = {\n              type: that.assetMeta.types.find(e => e.mimeType === 'image/png'),\n              file: new Blob([new Uint8Array(array)], { type: 'image/png' })\n            }\n\n            resolve(true)\n          }\n        } else {\n          resolve(true)\n        }\n      })\n    },\n    async sendSigned(file, asset, progress) {\n      const { destination } = asset\n      const formData = new FormData()\n      Object.keys(destination.fields)\n        .map(f => {\n          formData.append(f, destination.fields[f])\n          return f + ' => ' + destination.fields[f]\n        })\n        .join('\\n')\n      formData.append('file', file, file.name)\n\n      const request = new XMLHttpRequest()\n      request.open('POST', destination.url)\n\n      // Should call the progress method to update the progress to 100% before calling load\n      // Setting computable to false switches the loading indicator to infinite mode\n      if (progress) {\n        request.upload.onprogress = (e) => {\n          progress(e.lengthComputable, e.loaded, e.total)\n        }\n      }\n\n      return new Promise((resolve) => {\n        // Should call the load method when done and pass the returned server file id\n        // this server file id is then used later on when reverting or restoring a file\n        // so your server knows which file to return without exposing that info to the client\n        request.onload = () => {\n          resolve(request)\n        }\n        request.send(formData)\n      })\n    },\n    async onaddfile(error, file) {\n      if (error) {\n        if (file && file.main && file.sub) {\n          this.error = `${file.main}: ${file.sub}`\n        } else {\n          this.error = error.body\n        }\n      }\n      if (this.currentFile || error) {\n        return false\n      }\n      this.currentFile = file\n      this.$set(this, 'fileData', {\n        name: file.filename,\n        desc: '',\n        tags: [],\n        type: null\n      })\n    },\n    onError(error, file) {\n      this.loading = false\n      if (error) {\n        if (file && file.main && file.sub) {\n          this.error = `${file.main}: ${file.sub}`\n        } else {\n          this.error = error.body\n        }\n      }\n    },\n    onremovefile(file) {\n      this.error = null\n      this.currentFile = null\n      this.fileData = null\n    },\n    async upload() {\n      this.loading = true\n      this.$refs.pond._pond.setOptions({\n        server: {\n          process: this.process\n        }\n      })\n      this.error = null\n      await this.$refs.pond.processFile()\n      this.loading = false\n    },\n    async done(reason) {\n      this.success = 'Uploaded Asset ' + this.assetId\n      setTimeout(this.clearSuccess, 5000)\n      this.error = null\n      this.currentFile = null\n      this.fileData = null\n      this.$refs.pond.removeFile()\n      this.thumbnail = null\n      // this.$emit('assetsUploaded')\n      await this.refreshLibrary(this.assetSearch)\n      this.uploadDialog = false\n    },\n    clearSuccess() {\n      this.success = null\n    }\n  }\n}\n</script>\n<style scoped>\n.upload {\n  margin-top: 20px;\n  width: 60%;\n}\n</style>\n"],"sourceRoot":"src/views/assets"}]}