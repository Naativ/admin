{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/eslint-loader/index.js??ref--13-0!/Users/narfdre/Code/hexly/admin/src/tenants/TenantsService.js","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/tenants/TenantsService.js","mtime":1573196227000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { pathOr } from 'ramda';\nimport { apolloClient } from '@/vue-apollo';\nimport { getMemberTags as getMemberTagsQuery, getTenantInfo as getTenantInfoQuery } from \"./tenants.gql\";\n\nvar doQuery = function doQuery(query, args) {\n  return apolloClient.query({\n    query: query,\n    variables: args\n  });\n};\n\nexport var getMemberTags =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee() {\n    var result, tags;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return doQuery(getMemberTagsQuery);\n\n          case 2:\n            result = _context.sent;\n            tags = pathOr([], ['data', 'memberTags'], result);\n            return _context.abrupt(\"return\", tags);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getMemberTags() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getTenantInfo =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee2() {\n    var result;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return doQuery(getTenantInfoQuery);\n\n          case 2:\n            result = _context2.sent;\n            return _context2.abrupt(\"return\", result);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getTenantInfo() {\n    return _ref2.apply(this, arguments);\n  };\n}();",{"version":3,"sources":["/Users/narfdre/Code/hexly/admin/src/tenants/TenantsService.js"],"names":["pathOr","apolloClient","getMemberTags","getMemberTagsQuery","getTenantInfo","getTenantInfoQuery","doQuery","query","args","variables","result","tags"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SACEC,iBAAiBC,kBADnB,EAEEC,iBAAiBC,kBAFnB;;AAKA,IAAMC,UAAU,SAAVA,OAAU,CAACC,KAAD,EAAQC,IAAR;AAAA,SACdP,aAAaM,KAAb,CAAmB;AACjBA,WAAOA,KADU;AAEjBE,eAAWD;AAFM,GAAnB,CADc;AAAA,CAAhB;;AAMA,OAAO,IAAMN;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACNI,QAAQH,kBAAR,CADM;;AAAA;AACrBO,kBADqB;AAErBC,gBAFqB,GAEdX,OAAO,EAAP,EAAW,CAAC,MAAD,EAAS,YAAT,CAAX,EAAmCU,MAAnC,CAFc;AAAA,6CAGpBC,IAHoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA,GAAN;AAMP,OAAO,IAAMP;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACNE,QAAQD,kBAAR,CADM;;AAAA;AACrBK,kBADqB;AAAA,8CAEpBA,MAFoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA,GAAN","sourcesContent":["import { pathOr } from 'ramda'\nimport { apolloClient } from '@/vue-apollo'\nimport {\n  getMemberTags as getMemberTagsQuery,\n  getTenantInfo as getTenantInfoQuery\n} from './tenants.gql'\n\nconst doQuery = (query, args) =>\n  apolloClient.query({\n    query: query,\n    variables: args\n  })\n\nexport const getMemberTags = async () => {\n  const result = await doQuery(getMemberTagsQuery)\n  const tags = pathOr([], ['data', 'memberTags'], result)\n  return tags\n}\n\nexport const getTenantInfo = async () => {\n  const result = await doQuery(getTenantInfoQuery)\n  return result\n}\n"]}]}