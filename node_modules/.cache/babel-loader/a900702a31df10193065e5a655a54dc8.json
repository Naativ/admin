{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/members/MemberDetailsCard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/members/MemberDetailsCard.vue","mtime":1581353753564},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { cloneDeep, get, debounce } from 'lodash';\nimport { mapState } from 'vuex';\nimport { MemberDetailsGQL, UpdateMemberSubset, CheckSlugQuery, AddMemberSlug, UpdateMemberSlug } from \"../../users/members.gql\";\nimport EditButton from \"./EditButton\";\nimport { rules } from \"./rules\";\nimport moment from 'moment';\nexport default {\n  name: 'MemberDetailsCard',\n  components: {\n    EditButton: EditButton\n  },\n  data: function data() {\n    return {\n      debounce: debounce,\n      rules: rules,\n      model: null,\n      disabled: true,\n      memberId: ~~this.$route.params.id,\n      items: [],\n      slugModel: [],\n      debouncedSearchUpdate: debounce(this.updateSearch, 500)\n    };\n  },\n  methods: {\n    editClicked: function editClicked() {\n      this.disabled = false;\n    },\n    saveClicked: function () {\n      var _saveClicked = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var form, valid, slugModel, tenantId, memberId, i, slug, _ref, id, mappedSlugs, alreadyHadSlug, birthdate;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                form = this.$refs.form;\n                valid = form.validate();\n\n                if (valid) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", null);\n\n              case 4:\n                this.disabled = true;\n                _context.prev = 5;\n                slugModel = this.slugModel, tenantId = this.tenantId, memberId = this.memberId;\n\n                if (!(slugModel && slugModel.length)) {\n                  _context.next = 25;\n                  break;\n                }\n\n                i = 0;\n\n              case 9:\n                if (!(i < slugModel.length)) {\n                  _context.next = 25;\n                  break;\n                }\n\n                slug = slugModel[i].slug;\n                _ref = this.memberDetails.slugs[i] ? this.memberDetails.slugs[i] : {\n                  id: null\n                }, id = _ref.id;\n                mappedSlugs = this.memberDetails.slugs.map(function (s) {\n                  return s.slug;\n                });\n                alreadyHadSlug = this.memberDetails.slugs.hasOwnProperty(i);\n\n                if (!(slug && !alreadyHadSlug)) {\n                  _context.next = 19;\n                  break;\n                }\n\n                _context.next = 17;\n                return this.$apollo.mutate({\n                  mutation: AddMemberSlug,\n                  variables: {\n                    input: {\n                      memberId: memberId,\n                      slug: slug,\n                      tenantId: tenantId\n                    }\n                  }\n                });\n\n              case 17:\n                _context.next = 22;\n                break;\n\n              case 19:\n                if (!(slug && alreadyHadSlug && mappedSlugs.indexOf(slug) < 0)) {\n                  _context.next = 22;\n                  break;\n                }\n\n                _context.next = 22;\n                return this.$apollo.mutate({\n                  mutation: UpdateMemberSlug,\n                  variables: {\n                    input: {\n                      id: id,\n                      memberId: memberId,\n                      slug: slug,\n                      tenantId: tenantId,\n                      priority: 0\n                    }\n                  }\n                });\n\n              case 22:\n                i++;\n                _context.next = 9;\n                break;\n\n              case 25:\n                birthdate = this.model.birthdate ? moment(this.model.birthdate).format('YYYY-MM-DD') : null;\n                _context.next = 28;\n                return this.$apollo.mutate({\n                  mutation: UpdateMemberSubset,\n                  variables: {\n                    input: {\n                      id: this.memberId,\n                      displayName: this.model.displayName,\n                      firstName: this.model.firstName,\n                      lastName: this.model.lastName,\n                      name: this.model.name,\n                      birthday: birthdate\n                    }\n                  }\n                });\n\n              case 28:\n                this.$emit('snackbarEmit', 'Member details saved!');\n                this.$apollo.queries.memberDetails.refetch();\n                _context.next = 36;\n                break;\n\n              case 32:\n                _context.prev = 32;\n                _context.t0 = _context[\"catch\"](5);\n                this.$emit('snackbarEmit', _context.t0.message);\n                throw new Error(\"Error saving Member Details: \".concat(_context.t0.message));\n\n              case 36:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[5, 32]]);\n      }));\n\n      function saveClicked() {\n        return _saveClicked.apply(this, arguments);\n      }\n\n      return saveClicked;\n    }(),\n    cancelClicked: function () {\n      var _cancelClicked = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.disabled = true;\n                _context2.next = 3;\n                return this.$apollo.queries.memberDetails.refetch();\n\n              case 3:\n                this.initMember(this.memberDetails);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function cancelClicked() {\n        return _cancelClicked.apply(this, arguments);\n      }\n\n      return cancelClicked;\n    }(),\n    initMember: function initMember(contact) {\n      this.model = cloneDeep(contact);\n      this.model.birthdate = this.model.birthdate ? moment(this.model.birthdate).format('MM/DD/YYYY') : null;\n      this.model.claimedOn = this.model.claimedOn ? moment(this.model.claimedOn).format('MM/DD/YYYY') : null;\n      this.model.joinedOn = this.model.joinedOn ? moment(this.model.joinedOn).format('MM/DD/YYYY') : null;\n    },\n    checkSlug: function () {\n      var _checkSlug = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(slugs) {\n        var _ref2, slug, slugRes;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _ref2 = slugs.length > 0 ? slugs[0] : {\n                  slug: null\n                }, slug = _ref2.slug;\n\n                if (slug) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", null);\n\n              case 3:\n                _context3.next = 5;\n                return this.$apollo.query({\n                  query: CheckSlugQuery,\n                  variables: {\n                    input: {\n                      slug: slug\n                    }\n                  }\n                });\n\n              case 5:\n                slugRes = _context3.sent;\n                return _context3.abrupt(\"return\", slugRes);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function checkSlug(_x) {\n        return _checkSlug.apply(this, arguments);\n      }\n\n      return checkSlug;\n    }(),\n    updateSearch: function () {\n      var _updateSearch = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(search) {\n        var slugRes, checkSlug;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return this.checkSlug([{\n                  slug: search\n                }]);\n\n              case 3:\n                slugRes = _context4.sent;\n\n                if (slugRes.data) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error('Error verifying slug');\n\n              case 6:\n                checkSlug = slugRes.data.checkSlug;\n\n                if (!checkSlug) {\n                  this.items = [{\n                    slug: search\n                  }];\n                } else {\n                  if (checkSlug.memberId === this.memberId) {\n                    this.items = [{\n                      slug: search\n                    }];\n                  }\n                }\n\n                _context4.next = 12;\n                break;\n\n              case 10:\n                _context4.prev = 10;\n                _context4.t0 = _context4[\"catch\"](0);\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 10]]);\n      }));\n\n      function updateSearch(_x2) {\n        return _updateSearch.apply(this, arguments);\n      }\n\n      return updateSearch;\n    }()\n  },\n  watch: {\n    memberDetails: function memberDetails(next) {\n      this.initMember(next);\n    },\n    '$route': function $route(newRoute) {\n      var id = newRoute.params.id;\n      this.memberId = ~~id;\n      this.disabled = true;\n    },\n    'model.slugs': function modelSlugs(slugs) {\n      this.items = slugs;\n      this.slugModel = slugs;\n    }\n  },\n  computed: _objectSpread({}, mapState({\n    tenantId: function tenantId(state) {\n      return state.user.principal.tenantId;\n    }\n  })),\n  apollo: {\n    memberDetails: _objectSpread({}, MemberDetailsGQL, {\n      variables: function variables() {\n        return {\n          memberId: this.memberId\n        };\n      },\n      update: function update(data) {\n        var member = _objectSpread({}, get(data, 'members.nodes.0'));\n\n        return member;\n      }\n    })\n  }\n};",{"version":3,"sources":["MemberDetailsCard.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <div id=\"section-header-container\">\n      <v-toolbar class=\"indigo darken-1 white--text\">\n        <v-toolbar-title class=\"section-subheader\">Member Details</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <v-toolbar-items>\n          <EditButton\n            id             =\"member-details-edit-btn\"\n            :disabled      =\"disabled\"\n            @editClicked   =\"editClicked\"\n            @saveClicked   =\"saveClicked\"\n            @cancelClicked =\"cancelClicked\"\n          />\n        </v-toolbar-items>\n      </v-toolbar>\n    </div>\n    <v-card class=\"white lighten-5\">\n      <v-layout row wrap>\n        <v-form id=\"form\" ref=\"form\">\n          <v-card-text class=\"details\" v-if=\"model\">\n            <v-layout row wrap>\n              <v-flex xs6>\n                <v-text-field\n                  class   =\"details-field\"\n                  label   =\"System ID\"\n                  v-model =\"model.id\"\n                  disabled\n                />\n              </v-flex>\n              <v-flex xs6>\n                <v-text-field\n                  class   =\"details-field\"\n                  label   =\"Employer / Company ID\"\n                  v-model =\"model.tenantOid\"\n                  disabled\n                />\n              </v-flex>\n              <v-flex xs6>\n                <v-text-field\n                  class   =\"details-field\"\n                  label   =\"Joined On\"\n                  v-model =\"model.joinedOn\"\n                  disabled\n                />\n              </v-flex>\n              <v-flex xs6>\n                <v-text-field\n                  class   =\"details-field\"\n                  label   =\"Claimed On\"\n                  v-model =\"model.claimedOn\"\n                  disabled\n                />\n              </v-flex>\n              <v-flex xs6>\n                <v-text-field\n                  class     =\"details-field\"\n                  label     =\"First Name\"\n                  :disabled =\"disabled\"\n                  v-model   =\"model.firstName\"\n                />\n                </v-flex>\n              <v-flex xs6>\n                <v-text-field\n                  class     =\"details-field\"\n                  label     =\"Last Name\"\n                  v-model   =\"model.lastName\"\n                  :disabled =\"disabled\"\n                />\n              </v-flex>\n              <v-flex xs6>\n                <v-text-field\n                  class     =\"details-field\"\n                  label     =\"Legal Name\"\n                  v-model   =\"model.name\"\n                  :disabled =\"disabled\"\n                />\n              </v-flex>\n              <v-flex xs6>\n                <v-text-field\n                  class     =\"details-field\"\n                  label     =\"Display Name\"\n                  :disabled =\"disabled\"\n                  v-model   =\"model.displayName\"\n                />\n              </v-flex>\n              <v-flex xs6>\n                <v-text-field\n                  class     =\"details-field\"\n                  label     =\"Date of Birth\"\n                  :disabled =\"disabled\"\n                  v-model   =\"model.birthdate\"\n                  placeholder=\"MM/DD/YYYY\"\n                  :rules=\"[\n                    rules.isDate\n                  ]\"\n                />\n              </v-flex>\n              <v-flex xs6>\n                <v-combobox\n                  class      =\"details-field-select\"\n                  label      =\"Slugs\"\n                  v-model    =\"slugModel\"\n                  :items     =\"items\"\n                  item-text  =\"slug\"\n                  item-value =\"slug\"\n                  :disabled  =\"disabled\"\n                  return-object\n                  chips\n                  deletable-chips\n                  multiple\n                  @update:searchInput=\"debouncedSearchUpdate\"\n                  :menu-props=\"{\n                    closeOnClick: false,\n                    closeOnContentClick: true,\n                    disableKeys: true,\n                    openOnClick: false,\n                    maxHeight: 304\n                  }\"\n                >\n                  <template slot=\"item\" slot-scope=\"props\">\n                    <div>\n                      {{`Slug \\'${props.item.slug}\\' is available!`}}\n                    </div>\n                  </template>\n                </v-combobox>\n              </v-flex>\n            </v-layout>\n          </v-card-text>\n        </v-form>\n      </v-layout>\n    </v-card>\n  </div>\n</template>\n\n<script>\nimport { cloneDeep, get, debounce } from 'lodash'\nimport { mapState } from 'vuex'\n\nimport {\n  MemberDetailsGQL,\n  UpdateMemberSubset,\n  CheckSlugQuery,\n  AddMemberSlug,\n  UpdateMemberSlug\n} from '../../users/members.gql'\nimport EditButton from './EditButton'\nimport { rules } from './rules'\nimport moment from 'moment'\n\nexport default {\n  name: 'MemberDetailsCard',\n  components: {\n    EditButton\n  },\n  data () {\n    return {\n      debounce,\n      rules,\n      model: null,\n      disabled: true,\n      memberId: ~~this.$route.params.id,\n      items: [],\n      slugModel: [],\n      debouncedSearchUpdate: debounce(this.updateSearch, 500)\n    }\n  },\n  methods: {\n    editClicked () {\n      this.disabled = false\n    },\n    async saveClicked() {\n      const { form } = this.$refs\n      const valid = form.validate()\n\n      if (!valid) { return null }\n      this.disabled = true\n\n      try {\n        const { slugModel, tenantId, memberId } = this\n\n        if (slugModel && slugModel.length) {\n          for (let i = 0; i < slugModel.length; i++) {\n            const { slug } = slugModel[i]\n            const { id } = this.memberDetails.slugs[i] ? this.memberDetails.slugs[i] : { id: null }\n            const mappedSlugs = this.memberDetails.slugs.map(s => s.slug)\n            const alreadyHadSlug = this.memberDetails.slugs.hasOwnProperty(i)\n\n            if (slug && !alreadyHadSlug) {\n              await this.$apollo.mutate({\n                mutation: AddMemberSlug,\n                variables: {\n                  input: {\n                    memberId,\n                    slug,\n                    tenantId\n                  }\n                }\n              })\n            } else if (slug && alreadyHadSlug && mappedSlugs.indexOf(slug) < 0) {\n              await this.$apollo.mutate({\n                mutation: UpdateMemberSlug,\n                variables: {\n                  input: {\n                    id,\n                    memberId,\n                    slug,\n                    tenantId,\n                    priority: 0\n                  }\n                }\n              })\n            }\n          }\n        }\n\n        const birthdate = this.model.birthdate ? moment(this.model.birthdate).format('YYYY-MM-DD') : null\n        await this.$apollo.mutate({\n          mutation: UpdateMemberSubset,\n          variables: {\n            input: {\n              id: this.memberId,\n              displayName: this.model.displayName,\n              firstName: this.model.firstName,\n              lastName: this.model.lastName,\n              name: this.model.name,\n              birthday: birthdate\n            }\n          }\n        })\n\n        this.$emit('snackbarEmit', 'Member details saved!')\n        this.$apollo.queries.memberDetails.refetch()\n      } catch (error) {\n        this.$emit('snackbarEmit', error.message)\n        throw new Error(`Error saving Member Details: ${error.message}`)\n      }\n    },\n    async cancelClicked () {\n      this.disabled = true\n      await this.$apollo.queries.memberDetails.refetch()\n      this.initMember(this.memberDetails)\n    },\n    initMember(contact) {\n      this.model = cloneDeep(contact)\n      this.model.birthdate = this.model.birthdate ? moment(this.model.birthdate).format('MM/DD/YYYY') : null\n      this.model.claimedOn = this.model.claimedOn ? moment(this.model.claimedOn).format('MM/DD/YYYY') : null\n      this.model.joinedOn = this.model.joinedOn ? moment(this.model.joinedOn).format('MM/DD/YYYY') : null\n    },\n    async checkSlug(slugs) {\n      const { slug } = slugs.length > 0 ? slugs[0] : { slug: null }\n      if (!slug) return null\n      const slugRes = await this.$apollo.query({\n        query: CheckSlugQuery,\n        variables: {\n          input: {\n            slug\n          }\n        }\n      })\n      return slugRes\n    },\n    async updateSearch(search) {\n      try {\n        const slugRes = await this.checkSlug([{ slug: search }])\n\n        if (!slugRes.data) throw new Error('Error verifying slug')\n\n        const { data: { checkSlug } } = slugRes\n        if (!checkSlug) {\n          this.items = [{ slug: search }]\n        } else {\n          if (checkSlug.memberId === this.memberId) {\n            this.items = [{ slug: search }]\n          }\n        }\n      } catch (error) {\n\n      }\n    }\n  },\n  watch: {\n    memberDetails (next) {\n      this.initMember(next)\n    },\n    '$route'(newRoute) {\n      const { params: { id } } = newRoute\n      this.memberId = ~~id\n      this.disabled = true\n    },\n    'model.slugs'(slugs) {\n      this.items = slugs\n      this.slugModel = slugs\n    }\n  },\n  computed: {\n    ...mapState({\n      tenantId: state => state.user.principal.tenantId\n    })\n  },\n  apollo: {\n    memberDetails: {\n      ...MemberDetailsGQL,\n      variables() {\n        return {\n          memberId: this.memberId\n        }\n      },\n      update(data) {\n        let member = { ...get(data, 'members.nodes.0') }\n        return member\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.findme {\n  border: 2px solid red;\n}\n#contact-list {\n  width: 100%;\n}\n.address-title {\n  position: absolute;\n  top: 9px;\n}\n.member-section-heading {\n  display: inline;\n}\n#form {\n  min-width: 100%;\n}\n.section-subheader {\n  font-size: 18px !important;\n}\n#section-header-container {\n  display: flex;\n  justify-content: space-between;\n}\n.details-field {\n  padding: 12px 10px 0px 10px;\n}\n.details-field-select {\n  padding: 2px 10px 0px 10px;\n}\n</style>\n"],"sourceRoot":"src/views/members"}]}