{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/Login.vue","mtime":1573196227000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport AUTHENTICATE_MUTATION from \"../graphql/Authenticate.gql\";\nimport { UserActions, UserMutations } from '@/stores/UserStore';\nexport default {\n  name: 'Login',\n  data: function data() {\n    return {\n      form: {\n        rules: [function (v) {\n          return !!v || 'Field is required';\n        }],\n        email: '',\n        password: '',\n        tenantId: 1001\n      }\n    };\n  },\n  methods: {\n    onSubmit: function () {\n      var _onSubmit = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var formValidated, _ref, data, result, _result$login, token, principal;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                formValidated = this.$refs.login.validate();\n\n                if (!formValidated) {\n                  _context.next = 28;\n                  break;\n                }\n\n                this.$store.commit(UserMutations.LOGIN_TOGGLE_LOCK, true);\n                _context.prev = 3;\n                _context.next = 6;\n                return this.$apollo.mutate({\n                  mutation: AUTHENTICATE_MUTATION,\n                  variables: {\n                    authInput: {\n                      tenantId: this.form.tenantId,\n                      username: this.form.email,\n                      password: this.form.password\n                    }\n                  }\n                });\n\n              case 6:\n                _ref = _context.sent;\n                data = _ref.data;\n                result = data;\n                _result$login = result.login, token = _result$login.token, principal = _result$login.principal;\n\n                if (!token) {\n                  _context.next = 17;\n                  break;\n                }\n\n                this.$store.commit(UserMutations.SET_JWT, token);\n                _context.next = 14;\n                return this.$store.dispatch(UserActions.LOGIN_SUCCESS, principal);\n\n              case 14:\n                this.$router.push('/dashboard');\n                _context.next = 19;\n                break;\n\n              case 17:\n                this.$store.commit(UserMutations.LOGIN_ERROR, 'Invalid Username/Password.');\n                this.$store.commit(UserMutations.LOGIN_TOGGLE_LOCK, false);\n\n              case 19:\n                _context.next = 26;\n                break;\n\n              case 21:\n                _context.prev = 21;\n                _context.t0 = _context[\"catch\"](3);\n                console.error({\n                  error: _context.t0\n                });\n                this.$store.commit(UserMutations.LOGIN_ERROR, 'Error communicating with server.');\n                this.$store.commit(UserMutations.LOGIN_TOGGLE_LOCK, false);\n\n              case 26:\n                _context.next = 29;\n                break;\n\n              case 28:\n                console.error('Error in form');\n\n              case 29:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 21]]);\n      }));\n\n      function onSubmit() {\n        return _onSubmit.apply(this, arguments);\n      }\n\n      return onSubmit;\n    }()\n  }\n};",{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwFA,OAAA,qBAAA;AACA,SAAA,WAAA,EAAA,aAAA,QAAA,oBAAA;AAEA,eAAA;AACA,QAAA,OADA;AAEA,MAFA,kBAEA;AACA,WAAA;AACA,YAAA;AACA,eAAA,CAAA;AAAA,iBAAA,CAAA,CAAA,CAAA,IAAA,mBAAA;AAAA,SAAA,CADA;AAEA,eAAA,EAFA;AAGA,kBAAA,EAHA;AAIA,kBAAA;AAJA;AADA,KAAA;AAQA,GAXA;AAYA,WAAA;AACA,YADA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEA,6BAFA,GAEA,KAAA,KAAA,CAAA,KAAA,CAAA,QAAA,EAFA;;AAAA,qBAGA,aAHA;AAAA;AAAA;AAAA;;AAIA,qBAAA,MAAA,CAAA,MAAA,CAAA,cAAA,iBAAA,EAAA,IAAA;AAJA;AAAA;AAAA,uBAMA,KAAA,OAAA,CAAA,MAAA,CAAA;AACA,4BAAA,qBADA;AAEA,6BAAA;AACA,+BAAA;AACA,gCAAA,KAAA,IAAA,CAAA,QADA;AAEA,gCAAA,KAAA,IAAA,CAAA,KAFA;AAGA,gCAAA,KAAA,IAAA,CAAA;AAHA;AADA;AAFA,iBAAA,CANA;;AAAA;AAAA;AAMA,oBANA,QAMA,IANA;AAgBA,sBAhBA,GAgBA,IAhBA;AAAA,gCAmBA,MAnBA,CAkBA,KAlBA,EAkBA,KAlBA,iBAkBA,KAlBA,EAkBA,SAlBA,iBAkBA,SAlBA;;AAAA,qBAoBA,KApBA;AAAA;AAAA;AAAA;;AAqBA,qBAAA,MAAA,CAAA,MAAA,CAAA,cAAA,OAAA,EAAA,KAAA;AArBA;AAAA,uBAsBA,KAAA,MAAA,CAAA,QAAA,CAAA,YAAA,aAAA,EAAA,SAAA,CAtBA;;AAAA;AAuBA,qBAAA,OAAA,CAAA,IAAA,CAAA,YAAA;AAvBA;AAAA;;AAAA;AAyBA,qBAAA,MAAA,CAAA,MAAA,CACA,cAAA,WADA,EAEA,4BAFA;AAIA,qBAAA,MAAA,CAAA,MAAA,CAAA,cAAA,iBAAA,EAAA,KAAA;;AA7BA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgCA,wBAAA,KAAA,CAAA;AAAA;AAAA,iBAAA;AACA,qBAAA,MAAA,CAAA,MAAA,CACA,cAAA,WADA,EAEA,kCAFA;AAIA,qBAAA,MAAA,CAAA,MAAA,CAAA,cAAA,iBAAA,EAAA,KAAA;;AArCA;AAAA;AAAA;;AAAA;AAwCA,wBAAA,KAAA,CAAA,eAAA;;AAxCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAZA,CAAA","sourcesContent":["<template>\n  <v-content>\n    <v-container\n      fluid\n      fill-height\n    >\n      <v-layout\n        align-center\n        justify-center\n      >\n        <v-flex\n          xs12\n          sm8\n        >\n          <v-card class=\"elevation-12\">\n            <v-toolbar\n              dark\n              color=\"black\"\n            >\n              <v-toolbar-title>Login</v-toolbar-title>\n            </v-toolbar>\n            <v-card-text>\n              <img\n                class=\"logo\"\n                src=\"../assets/logo.png\"\n              >\n              <div>\n                <v-alert\n                  dismissible\n                  icon=\"error\"\n                  v-model=\"$store.state.user.login.error\"\n                  v-if=\"$store.state.user.login.error\"\n                >{{ $store.state.user.login.error }}</v-alert>\n              </div>\n              <v-form\n                ref=\"login\"\n                @submit.prevent=\"onSubmit()\"\n              >\n                <v-text-field\n                  data-cy=\"Tenant Login Page\"\n                  required\n                  v-model.number=\"form.tenantId\"\n                  :rules=\"form.rules\"\n                  prepend-icon=\"business\"\n                  name=\"tenantId\"\n                  label=\"Tenant ID\"\n                ></v-text-field>\n                <v-text-field\n                  data-cy=\"Email Login Page\"\n                  required\n                  :rules=\"form.rules\"\n                  v-model=\"form.email\"\n                  prepend-icon=\"person\"\n                  name=\"login\"\n                  label=\"Login\"\n                  type=\"email\"\n                ></v-text-field>\n                <v-text-field\n                  data-cy=\"Password Login Page\"\n                  required\n                  v-model=\"form.password\"\n                  :rules=\"form.rules\"\n                  prepend-icon=\"lock\"\n                  name=\"password\"\n                  label=\"Password\"\n                  id=\"password\"\n                  type=\"password\"\n                ></v-text-field>\n                <v-card-actions>\n                  <v-spacer></v-spacer>\n                  <v-btn\n                    data-cy=\"Login Login Page\"\n                    :loading=\"$store.state.user.login.locked\"\n                    type=\"submit\"\n                    color=\"deep-purple\"\n                    dark\n                  >Login</v-btn>\n                </v-card-actions>\n              </v-form>\n            </v-card-text>\n          </v-card>\n        </v-flex>\n      </v-layout>\n    </v-container>\n  </v-content>\n</template>\n\n<script>\nimport AUTHENTICATE_MUTATION from '../graphql/Authenticate.gql'\nimport { UserActions, UserMutations } from '@/stores/UserStore'\n\nexport default {\n  name: 'Login',\n  data () {\n    return {\n      form: {\n        rules: [v => !!v || 'Field is required'],\n        email: '',\n        password: '',\n        tenantId: 1001\n      }\n    }\n  },\n  methods: {\n    async onSubmit () {\n      const formValidated = this.$refs.login.validate()\n      if (formValidated) {\n        this.$store.commit(UserMutations.LOGIN_TOGGLE_LOCK, true)\n        try {\n          const { data } = await this.$apollo.mutate({\n            mutation: AUTHENTICATE_MUTATION,\n            variables: {\n              authInput: {\n                tenantId: this.form.tenantId,\n                username: this.form.email,\n                password: this.form.password\n              }\n            }\n          })\n          const result = data\n          const {\n            login: { token, principal }\n          } = result\n          if (token) {\n            this.$store.commit(UserMutations.SET_JWT, token)\n            await this.$store.dispatch(UserActions.LOGIN_SUCCESS, principal)\n            this.$router.push('/dashboard')\n          } else {\n            this.$store.commit(\n              UserMutations.LOGIN_ERROR,\n              'Invalid Username/Password.'\n            )\n            this.$store.commit(UserMutations.LOGIN_TOGGLE_LOCK, false)\n          }\n        } catch (error) {\n          console.error({ error })\n          this.$store.commit(\n            UserMutations.LOGIN_ERROR,\n            'Error communicating with server.'\n          )\n          this.$store.commit(UserMutations.LOGIN_TOGGLE_LOCK, false)\n        }\n      } else {\n        console.error('Error in form')\n      }\n    }\n  }\n}\n\n</script>\n\n<style scoped>\n.box-card {\n  width: 480px;\n  margin: auto;\n}\n.error {\n  margin: 5px;\n  padding: 10px;\n  text-align: center;\n}\n.logo {\n  width: 100%;\n  max-width: 250px;\n  margin: auto;\n  display: block;\n}\n</style>\n"],"sourceRoot":"src/views"}]}