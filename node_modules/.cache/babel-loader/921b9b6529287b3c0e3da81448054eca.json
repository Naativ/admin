{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/members/CredentialCard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/members/CredentialCard.vue","mtime":1581353753563},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { cloneDeep, get } from 'lodash';\nimport { CredentialsCardGQL, UsernameUpsert } from \"../../users/members.gql\";\nimport EditButton from \"./EditButton\";\nexport default {\n  name: 'CredentialCard',\n  components: {\n    EditButton: EditButton\n  },\n  data: function data() {\n    return {\n      disabled: true,\n      model: null,\n      memberId: ~~this.$route.params.id\n    };\n  },\n  methods: {\n    editClicked: function editClicked() {\n      this.disabled = false;\n    },\n    saveClicked: function () {\n      var _saveClicked = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var username, identityId, input, addressUpdateRes;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                username = this.model.username;\n                identityId = this.credentials.identityId;\n                input = {\n                  identityId: identityId,\n                  username: username\n                };\n                _context.prev = 3;\n                _context.next = 6;\n                return this.$apollo.mutate({\n                  mutation: UsernameUpsert,\n                  variables: {\n                    input: input\n                  }\n                });\n\n              case 6:\n                addressUpdateRes = _context.sent;\n                this.$emit('snackbarEmit', 'System Information saved!');\n                this.$apollo.queries.credentials.refetch();\n                return _context.abrupt(\"return\", addressUpdateRes);\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](3);\n                this.$emit('snackbarEmit', _context.t0.message);\n                throw new Error('Error updating address!');\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 12]]);\n      }));\n\n      function saveClicked() {\n        return _saveClicked.apply(this, arguments);\n      }\n\n      return saveClicked;\n    }(),\n    cancelClicked: function () {\n      var _cancelClicked = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(index) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.$apollo.queries.credentials.refetch();\n\n              case 2:\n                this.initMember(this.credentials);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function cancelClicked(_x) {\n        return _cancelClicked.apply(this, arguments);\n      }\n\n      return cancelClicked;\n    }(),\n    initMember: function initMember(contact) {\n      this.model = cloneDeep(contact);\n      delete this.model.__typename;\n      delete this.model.id;\n      delete this.model.identityId;\n      this.disabled = true;\n    }\n  },\n  watch: {\n    credentials: function credentials(next) {\n      this.initMember(next);\n    },\n    '$route': function $route(newRoute) {\n      var id = newRoute.params.id;\n      this.memberId = ~~id;\n    }\n  },\n  apollo: {\n    credentials: _objectSpread({}, CredentialsCardGQL, {\n      variables: function variables() {\n        return {\n          input: {\n            memberId: this.memberId\n          }\n        };\n      },\n      update: function update(data) {\n        var credentials = _objectSpread({}, get(data, 'getMemberCredentials.credentials.0'));\n\n        return credentials;\n      }\n    })\n  }\n};",{"version":3,"sources":["CredentialCard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,SAAA,SAAA,EAAA,GAAA,QAAA,QAAA;AAEA,SAAA,kBAAA,EAAA,cAAA;AACA,OAAA,UAAA;AAEA,eAAA;AACA,QAAA,gBADA;AAEA,cAAA;AACA;AADA,GAFA;AAKA,MALA,kBAKA;AACA,WAAA;AACA,gBAAA,IADA;AAEA,aAAA,IAFA;AAGA,gBAAA,CAAA,CAAA,KAAA,MAAA,CAAA,MAAA,CAAA;AAHA,KAAA;AAKA,GAXA;AAYA,WAAA;AACA,eADA,yBACA;AACA,WAAA,QAAA,GAAA,KAAA;AACA,KAHA;AAIA,eAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,wBALA,GAKA,KAAA,KALA,CAKA,QALA;AAMA,0BANA,GAMA,KAAA,WANA,CAMA,UANA;AAOA,qBAPA,GAOA;AACA,wCADA;AAEA;AAFA,iBAPA;AAAA;AAAA;AAAA,uBAaA,KAAA,OAAA,CAAA,MAAA,CAAA;AACA,4BAAA,cADA;AAEA,6BAAA;AACA;AADA;AAFA,iBAAA,CAbA;;AAAA;AAaA,gCAbA;AAoBA,qBAAA,KAAA,CAAA,cAAA,EAAA,2BAAA;AAEA,qBAAA,OAAA,CAAA,OAAA,CAAA,WAAA,CAAA,OAAA;AAtBA,iDAuBA,gBAvBA;;AAAA;AAAA;AAAA;AAyBA,qBAAA,KAAA,CAAA,cAAA,EAAA,YAAA,OAAA;AAzBA,sBA0BA,IAAA,KAAA,CAAA,yBAAA,CA1BA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA6BA,iBA7BA;AAAA;AAAA;AAAA,gDA6BA,KA7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA8BA,KAAA,OAAA,CAAA,OAAA,CAAA,WAAA,CAAA,OAAA,EA9BA;;AAAA;AA+BA,qBAAA,UAAA,CAAA,KAAA,WAAA;;AA/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAiCA,cAjCA,sBAiCA,OAjCA,EAiCA;AACA,WAAA,KAAA,GAAA,UAAA,OAAA,CAAA;AAEA,aAAA,KAAA,KAAA,CAAA,UAAA;AACA,aAAA,KAAA,KAAA,CAAA,EAAA;AACA,aAAA,KAAA,KAAA,CAAA,UAAA;AACA,WAAA,QAAA,GAAA,IAAA;AACA;AAxCA,GAZA;AAsDA,SAAA;AACA,eADA,uBACA,IADA,EACA;AACA,WAAA,UAAA,CAAA,IAAA;AACA,KAHA;AAIA,YAJA,kBAIA,QAJA,EAIA;AAAA,UACA,EADA,GACA,QADA,CACA,MADA,CACA,EADA;AAEA,WAAA,QAAA,GAAA,CAAA,CAAA,EAAA;AACA;AAPA,GAtDA;AA+DA,UAAA;AACA,mCACA,kBADA;AAEA,eAFA,uBAEA;AACA,eAAA;AACA,iBAAA;AACA,sBAAA,KAAA;AADA;AADA,SAAA;AAKA,OARA;AASA,YATA,kBASA,IATA,EASA;AACA,YAAA,gCAAA,IAAA,IAAA,EAAA,oCAAA,CAAA,CAAA;;AACA,eAAA,WAAA;AACA;AAZA;AADA;AA/DA,CAAA","sourcesContent":["<template>\n  <div>\n    <div id=\"system-title-container\">\n      <v-toolbar class=\"indigo darken-1 white--text\">\n        <v-toolbar-title class=\"section-subheader\">System Information</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <v-toolbar-items>\n          <EditButton\n            id             =\"credentials-edit-btn\"\n            :disabled      =\"disabled\"\n            @editClicked   =\"editClicked\"\n            @saveClicked   =\"saveClicked\"\n            @cancelClicked =\"cancelClicked\"\n          />\n        </v-toolbar-items>\n      </v-toolbar>\n    </div>\n      <v-card tile>\n        <v-layout row wrap>\n          <v-card-text\n            v-if  =\"model\"\n          >\n            <v-list-tile-sub-title\n              class =\"credentials\"\n              v-for =\"(credential, index) in Object.keys(model)\"\n              :key  =\"index\"\n            >\n              <v-text-field\n                :label       =\"credential\"\n                prepend-icon =\"house\"\n                :disabled    =\"disabled\"\n                v-model      =\"model[credential]\"\n                :key         =\"`address-field-${credential}`\"\n              >\n              </v-text-field>\n            </v-list-tile-sub-title>\n          </v-card-text>\n        </v-layout>\n      </v-card>\n  </div>\n</template>\n\n<script>\nimport { cloneDeep, get } from 'lodash'\n\nimport { CredentialsCardGQL, UsernameUpsert } from '../../users/members.gql'\nimport EditButton from './EditButton'\n\nexport default {\n  name: 'CredentialCard',\n  components: {\n    EditButton\n  },\n  data () {\n    return {\n      disabled: true,\n      model: null,\n      memberId: ~~this.$route.params.id\n    }\n  },\n  methods: {\n    editClicked () {\n      this.disabled = false\n    },\n    async saveClicked() {\n      const { username } = this.model\n      const { identityId } = this.credentials\n      const input = {\n        identityId,\n        username\n      }\n\n      try {\n        const addressUpdateRes = await this.$apollo.mutate({\n          mutation: UsernameUpsert,\n          variables: {\n            input\n          }\n        })\n\n        this.$emit('snackbarEmit', 'System Information saved!')\n\n        this.$apollo.queries.credentials.refetch()\n        return addressUpdateRes\n      } catch (error) {\n        this.$emit('snackbarEmit', error.message)\n        throw new Error('Error updating address!')\n      }\n    },\n    async cancelClicked (index) {\n      await this.$apollo.queries.credentials.refetch()\n      this.initMember(this.credentials)\n    },\n    initMember(contact) {\n      this.model = cloneDeep(contact)\n\n      delete this.model.__typename\n      delete this.model.id\n      delete this.model.identityId\n      this.disabled = true\n    }\n  },\n  watch: {\n    credentials (next) {\n      this.initMember(next)\n    },\n    '$route'(newRoute) {\n      const { params: { id } } = newRoute\n      this.memberId = ~~id\n    }\n  },\n  apollo: {\n    credentials: {\n      ...CredentialsCardGQL,\n      variables() {\n        return {\n          input: {\n            memberId: this.memberId\n          }\n        }\n      },\n      update(data) {\n        let credentials = { ...get(data, 'getMemberCredentials.credentials.0') }\n        return credentials\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.findme {\n  border: 2px solid red;\n}\n.details {\n  text-align: left;\n}\n#credentials-list {\n  width: 100%;\n}\n.section-subheader {\n  font-size: 18px !important;\n}\n#system-title-container {\n  display: flex;\n  justify-content: space-between;\n}\n</style>\n"],"sourceRoot":"src/views/members"}]}