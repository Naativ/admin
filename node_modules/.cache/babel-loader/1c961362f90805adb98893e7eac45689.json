{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/iam/PrepImpersonate.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/iam/PrepImpersonate.vue","mtime":1577329618149},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _wrapRegExp from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/wrapRegExp\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { pathOr } from 'ramda';\nimport { PREP_IMPERSONATE } from '@/impersonation/impersonate.gql.js';\nexport default {\n  props: {\n    showPrepDialog: {\n      type: Boolean,\n      default: false\n    },\n    credentialId: String,\n    memberId: Number,\n    tenantId: Number\n  },\n  data: function data() {\n    return {\n      tempPin: '',\n      success: false,\n      impersonate: {},\n      loading: false,\n      selection: '',\n      parsedTargets: []\n    };\n  },\n  computed: {\n    show: {\n      get: function get() {\n        return this.showPrepDialog;\n      },\n      set: function set(v) {\n        this.$emit('closeDialog');\n      }\n    },\n    cId: {\n      get: function get() {\n        return ~~this.credentialId;\n      }\n    },\n    mId: {\n      get: function get() {\n        return ~~this.memberId;\n      }\n    },\n    tId: {\n      get: function get() {\n        return ~~this.tenantId;\n      }\n    }\n  },\n  methods: {\n    prepImpersonate: function () {\n      var _prepImpersonate = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var result;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.loading = true;\n                _context.next = 3;\n                return this.$apollo.mutate({\n                  mutation: PREP_IMPERSONATE,\n                  variables: {\n                    input: {\n                      tenantId: this.tId,\n                      credentialId: this.cId,\n                      memberId: this.mId,\n                      temporaryPin: this.tempPin\n                    }\n                  }\n                });\n\n              case 3:\n                result = _context.sent;\n                this.impersonate = pathOr(undefined, ['data', 'iamImpersonationPrepare'], result);\n                this.impersonate.targets.forEach(function (target, index) {\n                  var res = _wrapRegExp(/\\/\\/([^/]+)/gm, {\n                    url: 1\n                  }).exec(target);\n\n                  var url = res.groups.url;\n                  _this.impersonate.targets[index] = {\n                    text: url,\n                    value: target\n                  };\n                });\n                this.success = true;\n                this.loading = false;\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function prepImpersonate() {\n        return _prepImpersonate.apply(this, arguments);\n      }\n\n      return prepImpersonate;\n    }(),\n    cancel: function cancel() {\n      this.impersonate = {};\n      this.success = false;\n      this.selection = '';\n      this.tempPin = '';\n      this.$emit('closeDialog', this.form);\n    },\n    open: function open() {\n      window.open(this.selection, '_blank');\n    }\n  }\n};",{"version":3,"sources":["PrepImpersonate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,SAAA,MAAA,QAAA,OAAA;AAEA,SAAA,gBAAA,QAAA,oCAAA;AAEA,eAAA;AACA,SAAA;AACA,oBAAA;AAAA,YAAA,OAAA;AAAA,eAAA;AAAA,KADA;AAEA,kBAAA,MAFA;AAGA,cAAA,MAHA;AAIA,cAAA;AAJA,GADA;AAOA,MAPA,kBAOA;AACA,WAAA;AACA,eAAA,EADA;AAEA,eAAA,KAFA;AAGA,mBAAA,EAHA;AAIA,eAAA,KAJA;AAKA,iBAAA,EALA;AAMA,qBAAA;AANA,KAAA;AAQA,GAhBA;AAiBA,YAAA;AACA,UAAA;AACA,SADA,iBACA;AAAA,eAAA,KAAA,cAAA;AAAA,OADA;AAEA,SAFA,eAEA,CAFA,EAEA;AAAA,aAAA,KAAA,CAAA,aAAA;AAAA;AAFA,KADA;AAKA,SAAA;AACA,SADA,iBACA;AAAA,eAAA,CAAA,CAAA,KAAA,YAAA;AAAA;AADA,KALA;AAQA,SAAA;AACA,SADA,iBACA;AAAA,eAAA,CAAA,CAAA,KAAA,QAAA;AAAA;AADA,KARA;AAWA,SAAA;AACA,SADA,iBACA;AAAA,eAAA,CAAA,CAAA,KAAA,QAAA;AAAA;AADA;AAXA,GAjBA;AAgCA,WAAA;AACA,mBADA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,qBAAA,OAAA,GAAA,IAAA;AAFA;AAAA,uBAGA,KAAA,OAAA,CAAA,MAAA,CAAA;AACA,4BAAA,gBADA;AAEA,6BAAA;AACA,2BAAA;AACA,gCAAA,KAAA,GADA;AAEA,oCAAA,KAAA,GAFA;AAGA,gCAAA,KAAA,GAHA;AAIA,oCAAA,KAAA;AAJA;AADA;AAFA,iBAAA,CAHA;;AAAA;AAGA,sBAHA;AAcA,qBAAA,WAAA,GAAA,OAAA,SAAA,EAAA,CAAA,MAAA,EAAA,yBAAA,CAAA,EAAA,MAAA,CAAA;AAEA,qBAAA,WAAA,CAAA,OAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA,KAAA,EAAA;AACA,sBAAA,MAAA;AAAA;AAAA,qBAAA,IAAA,CAAA,MAAA,CAAA;;AADA,sBAEA,GAFA,GAEA,GAFA,CAEA,MAFA,CAEA,GAFA;AAGA,wBAAA,WAAA,CAAA,OAAA,CAAA,KAAA,IAAA;AACA,0BAAA,GADA;AAEA,2BAAA;AAFA,mBAAA;AAIA,iBAPA;AASA,qBAAA,OAAA,GAAA,IAAA;AACA,qBAAA,OAAA,GAAA,KAAA;;AA1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA4BA,UA5BA,oBA4BA;AACA,WAAA,WAAA,GAAA,EAAA;AACA,WAAA,OAAA,GAAA,KAAA;AACA,WAAA,SAAA,GAAA,EAAA;AACA,WAAA,OAAA,GAAA,EAAA;AACA,WAAA,KAAA,CAAA,aAAA,EAAA,KAAA,IAAA;AACA,KAlCA;AAmCA,QAnCA,kBAmCA;AACA,aAAA,IAAA,CAAA,KAAA,SAAA,EAAA,QAAA;AACA;AArCA;AAhCA,CAAA","sourcesContent":["<template>\n  <v-dialog v-model=\"show\" max-width=\"768\" persistent>\n    <v-card class=\"box\">\n      <h3>Impersonate</h3>\n      <v-form v-if=\"!success\">\n        <v-text-field\n          v-model=\"tempPin\"\n          label=\"Enter a tempory pin\"\n          required\n        >\n        </v-text-field>\n      </v-form>\n      <v-layout justify-space-around align-center column v-if=\"success\">\n        <v-text-field :value=\"impersonate.token\" label=\"Token\" outline readonly></v-text-field>\n        <h3>The following targets are available:</h3>\n        <v-flex class=\"select\">\n          <v-select\n            :items=\"impersonate.targets\"\n            label=\"Select a target\"\n            v-model=\"selection\"\n          ></v-select>\n        </v-flex>\n      </v-layout>\n      <v-btn v-if=\"!success\" @click=\"prepImpersonate\" :loading=\"loading\">Submit</v-btn>\n      <v-btn v-if=\"selection\" @click=\"open\" :loading=\"loading\">Impersonate</v-btn>\n      <v-btn @click=\"cancel\">Cancel</v-btn>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script>\nimport { pathOr } from 'ramda'\n\nimport { PREP_IMPERSONATE } from '@/impersonation/impersonate.gql.js'\n\nexport default {\n  props: {\n    showPrepDialog: { type: Boolean, default: false },\n    credentialId: String,\n    memberId: Number,\n    tenantId: Number\n  },\n  data() {\n    return {\n      tempPin: '',\n      success: false,\n      impersonate: {},\n      loading: false,\n      selection: '',\n      parsedTargets: []\n    }\n  },\n  computed: {\n    show: {\n      get() { return this.showPrepDialog },\n      set(v) { this.$emit('closeDialog') }\n    },\n    cId: {\n      get() { return ~~this.credentialId }\n    },\n    mId: {\n      get() { return ~~this.memberId }\n    },\n    tId: {\n      get() { return ~~this.tenantId }\n    }\n  },\n  methods: {\n    async prepImpersonate() {\n      this.loading = true\n      const result = await this.$apollo.mutate({\n        mutation: PREP_IMPERSONATE,\n        variables: {\n          input: {\n            tenantId: this.tId,\n            credentialId: this.cId,\n            memberId: this.mId,\n            temporaryPin: this.tempPin\n          }\n        }\n      })\n      this.impersonate = pathOr(undefined, ['data', 'iamImpersonationPrepare'], result)\n\n      this.impersonate.targets.forEach((target, index) => {\n        const res = /\\/\\/(?<url>[^/]+)/gm.exec(target)\n        const { groups: { url } } = res\n        this.impersonate.targets[index] = {\n          text: url,\n          value: target\n        }\n      })\n\n      this.success = true\n      this.loading = false\n    },\n    cancel() {\n      this.impersonate = {}\n      this.success = false\n      this.selection = ''\n      this.tempPin = ''\n      this.$emit('closeDialog', this.form)\n    },\n    open() {\n      window.open(this.selection, '_blank')\n    }\n  }\n\n}\n</script>\n\n<style>\n.box {\n  padding: 10px;\n}\n.select {\n  width: 100%;\n}\n</style>\n"],"sourceRoot":"src/iam"}]}