{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/users/UserAppointments.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/users/UserAppointments.vue","mtime":1581373207241},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport moment from 'moment';\nimport { cloneDeep } from 'lodash';\nimport { booking } from '@/appointments/appointments.gql';\nimport { appointmentPayable, getPaymentFromBooking } from '@/payouts/payouts.gql';\nimport { REPROCESS_BOOKING } from '@/graphql/Booking';\nimport CreateBooking from \"../../components/booking/Create.vue\";\nexport default {\n  components: {\n    CreateBooking: CreateBooking\n  },\n  data: function data() {\n    return {\n      moment: moment,\n      surveys: [],\n      headers: [{\n        text: 'ID',\n        value: 'id',\n        width: '50px'\n      }, {\n        text: 'Type',\n        value: 'type',\n        width: '75px'\n      }, {\n        text: 'Appointment ID',\n        value: 'scheduled',\n        width: '150px'\n      }, {\n        text: 'Start Time',\n        value: 'startTime'\n      }, {\n        text: 'End Time',\n        value: 'endTime'\n      }, {\n        text: 'Participants',\n        value: 'participants'\n      }, {\n        value: 'id',\n        width: '50px',\n        sortable: false\n      }],\n      payable: {},\n      bookingPayable: {},\n      loadingPayout: false,\n      appointment: [],\n      hostBookings: [],\n      guestBookings: [],\n      loadingBookings: 0,\n      snackbar: false,\n      snackbarText: ''\n    };\n  },\n  methods: {\n    viewUser: function viewUser(user) {\n      this.$router.push('/members/' + user.id);\n    },\n    editBooking: function editBooking(bookingItem) {\n      var apptId = bookingItem.appointments[0] ? bookingItem.appointments[0].id : '';\n      var bookingId = bookingItem.id;\n      this.$router.push(\"/appointments/\".concat(apptId, \"_\").concat(bookingId, \"/booking\"));\n    },\n    reprocessBooking: function () {\n      var _reprocessBooking = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(bookingItem) {\n        var id, end, start, hostId, typeId, statusId, availabilityId;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                id = bookingItem.id, end = bookingItem.end, start = bookingItem.start, hostId = bookingItem.hostId, typeId = bookingItem.typeId, statusId = bookingItem.statusId, availabilityId = bookingItem.availabilityId;\n                this.reporcessing = true;\n                _context.prev = 2;\n                _context.next = 5;\n                return this.$apollo.mutate({\n                  mutation: REPROCESS_BOOKING,\n                  variables: {\n                    input: {\n                      id: id,\n                      end: end,\n                      start: start,\n                      hostId: hostId,\n                      typeId: typeId,\n                      statusId: statusId,\n                      availabilityId: availabilityId\n                    }\n                  }\n                });\n\n              case 5:\n                this.snackbar = true;\n                this.snackbarText = \"Booking: \".concat(id, \" successfully reprocessed\");\n                _context.next = 13;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](2);\n                this.snackbar = true;\n                this.snackbarText = _context.t0.message;\n\n              case 13:\n                this.reporcessing = false;\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 9]]);\n      }));\n\n      function reprocessBooking(_x) {\n        return _reprocessBooking.apply(this, arguments);\n      }\n\n      return reprocessBooking;\n    }(),\n    getPayout: function () {\n      var _getPayout = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(id) {\n        var _ref, data;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.$apollo.query({\n                  query: appointmentPayable,\n                  variables: {\n                    appointmentId: id\n                  },\n                  fetchPolicy: 'network-only'\n                });\n\n              case 2:\n                _ref = _context2.sent;\n                data = _ref.data;\n                this.payable = data.getPayableFromAppointment;\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getPayout(_x2) {\n        return _getPayout.apply(this, arguments);\n      }\n\n      return getPayout;\n    }(),\n    getBookingPayable: function () {\n      var _getBookingPayable = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(id) {\n        var _ref2, data;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.$apollo.query({\n                  query: getPaymentFromBooking,\n                  variables: {\n                    bookingId: id\n                  },\n                  fetchPolicy: 'network-only'\n                });\n\n              case 2:\n                _ref2 = _context3.sent;\n                data = _ref2.data;\n                this.bookingPayable = data.getPaymentFromBooking;\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getBookingPayable(_x3) {\n        return _getBookingPayable.apply(this, arguments);\n      }\n\n      return getBookingPayable;\n    }(),\n    expandRow: function () {\n      var _expandRow = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(props) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                props.expanded = !props.expanded;\n\n                if (!(props.expanded && props.item.appointments[0])) {\n                  _context4.next = 9;\n                  break;\n                }\n\n                this.loadingPayout = true;\n                _context4.next = 5;\n                return this.getPayout(props.item.appointments[0].id);\n\n              case 5:\n                props.item.payable = _context4.sent;\n                this.loadingPayout = false;\n                _context4.next = 13;\n                break;\n\n              case 9:\n                if (!(props.expanded && !props.item.appointments[0])) {\n                  _context4.next = 13;\n                  break;\n                }\n\n                _context4.next = 12;\n                return this.getBookingPayable(props.item.id);\n\n              case 12:\n                props.item.bookingPayable = _context4.sent;\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function expandRow(_x4) {\n        return _expandRow.apply(this, arguments);\n      }\n\n      return expandRow;\n    }()\n  },\n  apollo: {\n    hostBookings: {\n      query: booking,\n      variables: function variables() {\n        return {\n          input: {\n            hostIds: [this.id]\n          }\n        };\n      },\n      loadingKey: 'loadingBookings',\n      update: function update(response) {\n        return response.bookingSearch.results;\n      }\n    },\n    guestBookings: {\n      query: booking,\n      variables: function variables() {\n        return {\n          input: {\n            guestIds: [this.id]\n          }\n        };\n      },\n      update: function update(response) {\n        return response.bookingSearch.results;\n      }\n    }\n  },\n  computed: {\n    id: function id() {\n      return ~~this.$route.params.id;\n    },\n    allBookings: function allBookings() {\n      return cloneDeep(this.guestBookings.concat(this.hostBookings));\n    }\n  }\n};",{"version":3,"sources":["UserAppointments.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-flex xs12>\n    <v-container class=\"table-wrapper\">\n      <v-snackbar v-model=\"snackbar\" multi-line :timeout=\"3000\" top>\n        {{ snackbarText }}\n        <v-btn color=\"pink\" flat @click=\"snackbar = false\"> Close </v-btn>\n      </v-snackbar>\n      <CreateBooking />\n      <v-data-table\n        :headers=\"headers\"\n        :items=\"allBookings\"\n        :rows-per-page-items=\"[ 15, 30, 50, { text: '$vuetify.dataIterator.rowsPerPageAll', 'value': -1 } ]\"\n        :loading=\"loadingBookings > 0\"\n      >\n        <template slot=\"items\" slot-scope=\"props\">\n          <tr @click=\"expandRow(props)\">\n            <td>{{ props.item.id }}</td>\n            <td>\n              {{ props.item.type.name }}\n              <v-tooltip bottom v-if=\"props.item.canceled\">\n                <span slot=\"activator\">Canceled</span>\n                <span>\n                  This appointment was canceled for the following reason:\n                  {{ prop.item.canceledReason}}\n                </span>\n              </v-tooltip>\n            </td>\n            <td>{{ props.item.appointments[0] ? props.item.appointments[0].id : '' }}</td>\n            <td>{{ props.item.start | momentDate }}</td>\n            <td>{{ props.item.end | momentDate }}</td>\n            <td>\n              <v-tooltip top>\n                <a slot=\"activator\" @click=\"viewUser(props.item.host)\">{{ props.item.host.displayName }}</a>\n                <span>\n                  MRN: {{ props.item.host.mrn }}\n                  <br>\n                  System ID: {{ props.item.host.id }}\n                  <br>\n                  Email: {{ props.item.host.contactEmail }}\n                  <br>\n                  Participant Type: Host\n                </span>\n              </v-tooltip>\n              <br>\n              <v-tooltip top>\n                <a slot=\"activator\" @click=\"viewUser(props.item.guest)\">{{props.item.guest.displayName}}</a>\n                <span>\n                  MRN: {{ props.item.guest.mrn }}\n                  <br>\n                  System ID: {{ props.item.guest.id }}\n                  <br>\n                  Email: {{ props.item.guest.contactEmail }}\n                  <br>\n                  Participant Type: Guest\n                </span>\n              </v-tooltip>\n            </td>\n            <td>\n              <v-menu offset-y>\n                <v-btn slot=\"activator\" icon>\n                  <v-icon>more_vert</v-icon>\n                </v-btn>\n                <v-list>\n                  <v-list-tile @click=\"editBooking(props.item)\">\n                    <v-list-tile-title>Edit Booking</v-list-tile-title>\n                  </v-list-tile>\n                  <v-list-tile @click=\"reprocessBooking(props.item)\">\n                    <v-list-tile-title>Reprocess Booking</v-list-tile-title>\n                  </v-list-tile>\n                </v-list>\n              </v-menu>\n            </td>\n          </tr>\n        </template>\n        <template slot=\"no-data\">\n          <div v-if=\"loadingBookings > 0\">Searching...</div>\n          <div v-else>No bookings have been created.</div>\n        </template>\n        <template slot=\"expand\" slot-scope=\"props\">\n          <div v-if=\"props.item.appointments[0]\" class=\"pa-3 appointment-details\">\n            <v-container fluid>\n              <v-layout>\n                <v-flex xs4>\n                  <h4>Schedule:</h4>\n                  <ul>\n                    <li>Scheduled Date: {{props.item.appointments[0].scheduledDate | momentDate}}</li>\n                    <li>Start Time: {{props.item.appointments[0].startTime | momentDate}}</li>\n                    <li>End Time: {{props.item.appointments[0].endTime | momentDate}}</li>\n                    <li>Time Limit: {{props.item.appointments[0].timeLimit}}</li>\n                  </ul>\n                </v-flex>\n                <v-flex xs4>\n                  <h4>Details:</h4>\n                  <ul>\n                    <li>Rating Score: {{props.item.appointments[0].rating ? props.item.appointments[0].rating.score : 'No Score'}}</li>\n                    <li>Comments: {{props.item.appointments[0].comment ? props.item.appointments[0].rating.comment : 'No Comment'}}</li>\n                    <li>Status: {{props.item.status.name}}</li>\n                  </ul>\n                </v-flex>\n                <v-flex v-if=\"!loadingPayout && payable\" xs4>\n                  <h4>Payout:</h4>\n                  <ul>\n                    <li>Amount: {{ (payable.amount / 100) | toCurrency(props.item.currency) }} {{ payable.currency }}</li>\n                    <li>Status: {{ payable.status }}</li>\n                    <li>Description: {{ payable.description }}</li>\n                  </ul>\n                </v-flex>\n                <!-- <v-flex xs4 v-else>\n                  <v-progress-circular indeterminate :size=\"50\" :width=\"5\" color=\"black\"></v-progress-circular>\n                </v-flex> -->\n              </v-layout>\n            </v-container>\n          </div>\n          <v-container v-else>\n            <v-layout>\n              <v-flex xs4>\n                <h4>No appointment</h4>\n              </v-flex>\n              <v-flex v-if=\"!loadingPayout && bookingPayable\" xs4>\n                <h4>Payout:</h4>\n                <ul>\n                  <li>Amount: {{ (bookingPayable.amount / 100) }} {{ bookingPayable.currency }}</li>\n                  <li>Status: {{ bookingPayable.status }}</li>\n                  <li>Description: {{ bookingPayable.description }}</li>\n                </ul>\n              </v-flex>\n            </v-layout>\n          </v-container>\n        </template>\n      </v-data-table>\n    </v-container>\n  </v-flex>\n</template>\n\n<script>\nimport moment from 'moment'\nimport { cloneDeep } from 'lodash'\n\nimport { booking } from '@/appointments/appointments.gql'\nimport { appointmentPayable, getPaymentFromBooking } from '@/payouts/payouts.gql'\nimport { REPROCESS_BOOKING } from '@/graphql/Booking'\n\nimport CreateBooking from '../../components/booking/Create.vue'\n\nexport default {\n  components: { CreateBooking },\n  data() {\n    return {\n      moment,\n      surveys: [],\n      headers: [\n        { text: 'ID', value: 'id', width: '50px' },\n        { text: 'Type', value: 'type', width: '75px' },\n        { text: 'Appointment ID', value: 'scheduled', width: '150px' },\n        { text: 'Start Time', value: 'startTime' },\n        { text: 'End Time', value: 'endTime' },\n        { text: 'Participants', value: 'participants' },\n        { value: 'id', width: '50px', sortable: false }\n      ],\n      payable: {},\n      bookingPayable: {},\n      loadingPayout: false,\n      appointment: [],\n      hostBookings: [],\n      guestBookings: [],\n      loadingBookings: 0,\n      snackbar: false,\n      snackbarText: ''\n    }\n  },\n  methods: {\n    viewUser(user) {\n      this.$router.push('/members/' + user.id)\n    },\n    editBooking(bookingItem) {\n      const apptId = bookingItem.appointments[0] ? bookingItem.appointments[0].id : ''\n      const bookingId = bookingItem.id\n      this.$router.push(`/appointments/${apptId}_${bookingId}/booking`)\n    },\n    async reprocessBooking(bookingItem) {\n      const { id, end, start, hostId, typeId, statusId, availabilityId } = bookingItem\n      this.reporcessing = true\n      try {\n        await this.$apollo.mutate({\n          mutation: REPROCESS_BOOKING,\n          variables: {\n            input: {\n              id,\n              end,\n              start,\n              hostId,\n              typeId,\n              statusId,\n              availabilityId\n            }\n          }\n        })\n        this.snackbar = true\n        this.snackbarText = `Booking: ${id} successfully reprocessed`\n      } catch (err) {\n        this.snackbar = true\n        this.snackbarText = err.message\n      }\n      this.reporcessing = false\n    },\n    async getPayout(id) {\n      const { data } = await this.$apollo.query({\n        query: appointmentPayable,\n        variables: { appointmentId: id },\n        fetchPolicy: 'network-only'\n      })\n      this.payable = data.getPayableFromAppointment\n    },\n    async getBookingPayable(id) {\n      const { data } = await this.$apollo.query({\n        query: getPaymentFromBooking,\n        variables: { bookingId: id },\n        fetchPolicy: 'network-only'\n      })\n      this.bookingPayable = data.getPaymentFromBooking\n    },\n    async expandRow(props) {\n      props.expanded = !props.expanded\n      if (props.expanded && props.item.appointments[0]) {\n        this.loadingPayout = true\n        props.item.payable = await this.getPayout(props.item.appointments[0].id)\n        this.loadingPayout = false\n      } else if (props.expanded && !props.item.appointments[0]) {\n        props.item.bookingPayable = await this.getBookingPayable(props.item.id)\n      }\n    }\n  },\n  apollo: {\n    hostBookings: {\n      query: booking,\n      variables() {\n        return {\n          input: {\n            hostIds: [this.id]\n          }\n        }\n      },\n      loadingKey: 'loadingBookings',\n      update(response) {\n        return response.bookingSearch.results\n      }\n    },\n    guestBookings: {\n      query: booking,\n      variables() {\n        return {\n          input: {\n            guestIds: [this.id]\n          }\n        }\n      },\n      update(response) {\n        return response.bookingSearch.results\n      }\n    }\n  },\n  computed: {\n    id() {\n      return ~~this.$route.params.id\n    },\n    allBookings() {\n      return cloneDeep(this.guestBookings.concat(this.hostBookings))\n    }\n  }\n}\n</script>\n\n<style>\n.table-wrapper {\n  background-color: white;\n}\n\n.appointment-details ul li {\n  list-style: none;\n}\n</style>\n"],"sourceRoot":"src/views/users"}]}