{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/members/ContactCardEmail.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/members/ContactCardEmail.vue","mtime":1581353753562},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.array.fill\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { cloneDeep, get } from 'lodash';\nimport { ContactCardEmailGQL } from \"../../users/members.gql\";\nimport { CONTACT_EMAIL_UPSERT } from '@/graphql/Contacts.js';\nimport EditButton from \"./EditButton\";\nexport default {\n  name: 'ContactCardEmail',\n  components: {\n    EditButton: EditButton\n  },\n  data: function data() {\n    return {\n      model: null,\n      disabled: [],\n      memberId: ~~this.$route.params.id\n    };\n  },\n  methods: {\n    editClicked: function editClicked(index) {\n      this.setDisabled(index, false);\n    },\n    saveClicked: function () {\n      var _saveClicked = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(index) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this.$apollo.mutate({\n                  mutation: CONTACT_EMAIL_UPSERT,\n                  variables: {\n                    input: {\n                      id: this.model.emails[index].id,\n                      email: this.model.emails[index].email,\n                      contactId: this.model.id\n                    }\n                  }\n                });\n\n              case 3:\n                this.$emit('snackbarEmit', 'Email saved!');\n                _context.next = 10;\n                break;\n\n              case 6:\n                _context.prev = 6;\n                _context.t0 = _context[\"catch\"](0);\n                this.$emit('snackbarEmit', _context.t0.message);\n                throw new Error('Error updating email');\n\n              case 10:\n                this.$apollo.queries.email.refetch();\n                this.setDisabled(index, true);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 6]]);\n      }));\n\n      function saveClicked(_x) {\n        return _saveClicked.apply(this, arguments);\n      }\n\n      return saveClicked;\n    }(),\n    cancelClicked: function () {\n      var _cancelClicked = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(index) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.setDisabled(index, true);\n                _context2.next = 3;\n                return this.$apollo.queries.email.refetch();\n\n              case 3:\n                this.initMember(this.email);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function cancelClicked(_x2) {\n        return _cancelClicked.apply(this, arguments);\n      }\n\n      return cancelClicked;\n    }(),\n    initMember: function initMember(contact) {\n      this.model = cloneDeep(contact);\n      var _this$model$emails = this.model.emails,\n          emails = _this$model$emails === void 0 ? [] : _this$model$emails;\n      var disabled = Array(emails.length).fill(true);\n      this.disabled = disabled;\n    },\n    setDisabled: function setDisabled(index, value) {\n      var _this$model$emails2 = this.model.emails,\n          emails = _this$model$emails2 === void 0 ? [] : _this$model$emails2;\n      var disabled = Array(emails.length).fill(true);\n      disabled[index] = value;\n      this.disabled = disabled;\n    }\n  },\n  watch: {\n    email: function email(next) {\n      this.initMember(next);\n    },\n    '$route': function $route(newRoute) {\n      var id = newRoute.params.id;\n      this.memberId = ~~id;\n    }\n  },\n  apollo: {\n    email: _objectSpread({}, ContactCardEmailGQL, {\n      variables: function variables() {\n        return {\n          memberId: this.memberId\n        };\n      },\n      update: function update(data) {\n        var member = _objectSpread({}, get(data, 'members.nodes.0'));\n\n        var contacts = member.contacts;\n\n        if (contacts && Array.isArray(contacts) && contacts.length < 2) {\n          return contacts[0];\n        }\n\n        return contacts;\n      }\n    })\n  }\n};",{"version":3,"sources":["ContactCardEmail.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <span v-if =\"model\">\n    <v-list-tile-sub-title\n      v-for =\"(email, index) in model.emails\"\n      :key  =\"index\"\n    >\n      <div class =\"title-container\">\n        <h4 class=\"contact-section-heading\">Email {{model.emails.length > 1 ? index+1 : null}}</h4>\n        <EditButton\n          :index         =\"index\"\n          :disabled      =\"disabled[index]\"\n          @editClicked   =\"editClicked(index)\"\n          @saveClicked   =\"saveClicked(index)\"\n          @cancelClicked =\"cancelClicked(index)\"\n        />\n      </div>\n      <v-text-field\n        prepend-icon =\"email\"\n        :disabled    =\"disabled[index]\"\n        v-model      =\"model.emails[index].email\"\n      />\n    </v-list-tile-sub-title>\n  </span>\n</template>\n\n<script>\nimport { cloneDeep, get } from 'lodash'\n\nimport { ContactCardEmailGQL } from '../../users/members.gql'\nimport { CONTACT_EMAIL_UPSERT } from '@/graphql/Contacts.js'\nimport EditButton from './EditButton'\n\nexport default {\n  name: 'ContactCardEmail',\n  components: {\n    EditButton\n  },\n  data () {\n    return {\n      model: null,\n      disabled: [],\n      memberId: ~~this.$route.params.id\n    }\n  },\n  methods: {\n    editClicked (index) {\n      this.setDisabled(index, false)\n    },\n    async saveClicked(index) {\n      try {\n        await this.$apollo.mutate({\n          mutation: CONTACT_EMAIL_UPSERT,\n          variables: {\n            input: {\n              id: this.model.emails[index].id,\n              email: this.model.emails[index].email,\n              contactId: this.model.id\n            }\n          }\n        })\n        this.$emit('snackbarEmit', 'Email saved!')\n      } catch (error) {\n        this.$emit('snackbarEmit', error.message)\n        throw new Error('Error updating email')\n      }\n\n      this.$apollo.queries.email.refetch()\n\n      this.setDisabled(index, true)\n    },\n    async cancelClicked (index) {\n      this.setDisabled(index, true)\n      await this.$apollo.queries.email.refetch()\n      this.initMember(this.email)\n    },\n    initMember(contact) {\n      this.model = cloneDeep(contact)\n      const { emails = [] } = this.model\n\n      const disabled = Array(emails.length).fill(true)\n      this.disabled = disabled\n    },\n    setDisabled(index, value) {\n      const { emails = [] } = this.model\n\n      const disabled = Array(emails.length).fill(true)\n\n      disabled[index] = value\n      this.disabled = disabled\n    }\n  },\n  watch: {\n    email (next) {\n      this.initMember(next)\n    },\n    '$route'(newRoute) {\n      const { params: { id } } = newRoute\n      this.memberId = ~~id\n    }\n  },\n  apollo: {\n    email: {\n      ...ContactCardEmailGQL,\n      variables() {\n        return {\n          memberId: this.memberId\n        }\n      },\n      update(data) {\n        let member = { ...get(data, 'members.nodes.0') }\n        const { contacts } = member\n\n        if (contacts && Array.isArray(contacts) && contacts.length < 2) {\n          return contacts[0]\n        }\n        return contacts\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.findme {\n  border: 2px solid red;\n}\n.details {\n  text-align: left;\n}\n.addresses {\n  display: flex;\n  flex-direction: column;\n  height: 39vh;\n  flex-wrap: wrap;\n  min-width: 45vw;\n  padding-top: 11px;\n  padding-top: 48px;\n  position: relative;\n}\n#contact-list {\n  width: 100%;\n}\n.address-title {\n  position: absolute;\n  top: 9px;\n}\n.contact-section-heading {\n  display: inline;\n}\n.title-container {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 19px;\n  align-items: center;\n}\n</style>\n"],"sourceRoot":"src/views/members"}]}