{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/Emails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/Emails.vue","mtime":1574205365000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapActions } from 'vuex';\nimport { TenantsActions } from '@/tenants/TenantsStore';\nimport { INTEGRATION_COMMAND } from '@/graphql/IntegrationActions.gql';\nimport DateSelector from '@/components/DateSelector.vue';\nimport moment from 'moment';\nexport default {\n  name: 'EmailView',\n  components: {\n    DateSelector: DateSelector\n  },\n  data: function data() {\n    return {\n      emails: [],\n      loading: false,\n      headers: [{\n        text: 'Sent',\n        value: 'last_event_time',\n        sortable: false\n      }, {\n        text: 'From',\n        value: 'from_email',\n        sortable: false\n      }, {\n        text: 'To',\n        value: 'to_email',\n        sortable: false\n      }, {\n        text: 'Subject',\n        value: 'subject',\n        sortable: false\n      }, {\n        text: 'Status',\n        value: 'status',\n        sortable: false\n      }, {\n        text: 'Opens',\n        value: 'opens_count',\n        sortable: false\n      }, {\n        text: 'Clicks',\n        value: 'clicks_count',\n        sortable: false\n      }],\n      startDate: moment().subtract(3, 'days').format('YYYY-MM-DD'),\n      endDate: moment().format('YYYY-MM-DD'),\n      toEmail: null,\n      integrationId: null\n    };\n  },\n  methods: _objectSpread({}, mapActions({\n    fetchTenantInfo: TenantsActions.FETCH_TENANT_INFO\n  }), {\n    startDateChanged: function () {\n      var _startDateChanged = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(_ref) {\n        var date;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                date = _ref.date;\n                this.startDate = date;\n                _context.next = 4;\n                return this.getEmails();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function startDateChanged(_x) {\n        return _startDateChanged.apply(this, arguments);\n      }\n\n      return startDateChanged;\n    }(),\n    endDateChanged: function () {\n      var _endDateChanged = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(_ref2) {\n        var date;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                date = _ref2.date;\n                this.endDate = date;\n                _context2.next = 4;\n                return this.getEmails();\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function endDateChanged(_x2) {\n        return _endDateChanged.apply(this, arguments);\n      }\n\n      return endDateChanged;\n    }(),\n    getEmails: function () {\n      var _getEmails = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var _ref3, data;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.loading = true;\n\n                if (this.integrationId) {\n                  console.log(this.integrationId);\n                }\n\n                _context3.prev = 2;\n                _context3.next = 5;\n                return this.$apollo.mutate({\n                  mutation: INTEGRATION_COMMAND,\n                  variables: {\n                    input: {\n                      command: 'sendgrid_fetch_activity',\n                      tenantIntegrationId: this.integrationId,\n                      data: {\n                        toEmail: this.toEmail,\n                        startDate: moment(this.startDate).format(),\n                        endDate: moment(this.endDate).add(48, 'hours').format()\n                      }\n                    }\n                  }\n                });\n\n              case 5:\n                _ref3 = _context3.sent;\n                data = _ref3.data;\n                this.emails = data.integrationCommand.payload;\n\n              case 8:\n                _context3.prev = 8;\n                this.loading = false;\n                return _context3.finish(8);\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2,, 8, 11]]);\n      }));\n\n      function getEmails() {\n        return _getEmails.apply(this, arguments);\n      }\n\n      return getEmails;\n    }()\n  }),\n  mounted: function () {\n    var _mounted = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee4() {\n      var integration;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(this.integrations.length === 0)) {\n                _context4.next = 3;\n                break;\n              }\n\n              _context4.next = 3;\n              return this.fetchTenantInfo();\n\n            case 3:\n              integration = this.integrations.find(function (i) {\n                return i.key === 'sendgrid';\n              });\n              this.integrationId = integration.id;\n              _context4.next = 7;\n              return this.getEmails();\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }(),\n  computed: _objectSpread({}, mapState({\n    integrations: function integrations(state) {\n      return state.tenants.info.integrations;\n    }\n  }))\n};",{"version":3,"sources":["Emails.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-card>\n    <v-card-text>\n      <v-container grid-list-md text-xs-center>\n        <v-layout row wrap>\n          <v-flex xs12 sm6>\n            <DateSelector\n              :selectedDate=\"startDate\"\n              :label=\"'Select Start Date'\"\n              @date-changed=\"startDateChanged\"\n            />\n          </v-flex>\n          <v-flex xs12 sm6>\n            <DateSelector\n              :selectedDate=\"endDate\"\n              :label=\"'Select End Date'\"\n              @date-changed=\"endDateChanged\"\n            />\n          </v-flex>\n          <v-flex xs12>\n            <v-text-field\n              v-model=\"toEmail\"\n              label=\"To email\"\n            />\n          </v-flex>\n        </v-layout>\n        <v-btn :loading=\"loading\" @click=\"getEmails\">Search Email</v-btn>\n      </v-container>\n    </v-card-text>\n    <v-data-table :loading=\"loading\" :items=\"emails\" :headers=\"headers\" hide-actions>\n      <template slot=\"items\" slot-scope=\"props\">\n        <td class=\"text-xs\">{{ props.item.last_event_time }}</td>\n        <td class=\"text-xs\">{{ props.item.from_email }}</td>\n        <td class=\"text-xs\">{{ props.item.to_email}}</td>\n        <td class=\"text-xs\">{{ props.item.subject}}</td>\n        <td class=\"text-xs\">{{ props.item.status}}</td>\n        <td class=\"text-xs\">{{ props.item.opens_count}}</td>\n        <td class=\"text-xs\">{{ props.item.clicks_count}}</td>\n      </template>\n    </v-data-table>\n  </v-card>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'vuex'\nimport { TenantsActions } from '@/tenants/TenantsStore'\nimport { INTEGRATION_COMMAND } from '@/graphql/IntegrationActions.gql'\nimport DateSelector from '@/components/DateSelector.vue'\nimport moment from 'moment'\n\nexport default {\n  name: 'EmailView',\n  components: {\n    DateSelector\n  },\n  data () {\n    return {\n      emails: [],\n      loading: false,\n      headers: [\n        { text: 'Sent', value: 'last_event_time', sortable: false },\n        { text: 'From', value: 'from_email', sortable: false },\n        { text: 'To', value: 'to_email', sortable: false },\n        { text: 'Subject', value: 'subject', sortable: false },\n        { text: 'Status', value: 'status', sortable: false },\n        { text: 'Opens', value: 'opens_count', sortable: false },\n        { text: 'Clicks', value: 'clicks_count', sortable: false }\n      ],\n      startDate: moment()\n        .subtract(3, 'days')\n        .format('YYYY-MM-DD'),\n      endDate: moment()\n        .format('YYYY-MM-DD'),\n      toEmail: null,\n      integrationId: null\n    }\n  },\n  methods: {\n    ...mapActions({\n      fetchTenantInfo: TenantsActions.FETCH_TENANT_INFO\n    }),\n    async startDateChanged ({ date }) {\n      this.startDate = date\n      await this.getEmails()\n    },\n    async endDateChanged ({ date }) {\n      this.endDate = date\n      await this.getEmails()\n    },\n    async getEmails () {\n      this.loading = true\n      if (this.integrationId) {\n        console.log(this.integrationId)\n      }\n      try {\n        const { data } = await this.$apollo.mutate({\n          mutation: INTEGRATION_COMMAND,\n          variables: { input: {\n            command: 'sendgrid_fetch_activity',\n            tenantIntegrationId: this.integrationId,\n            data: {\n              toEmail: this.toEmail,\n              startDate: moment(this.startDate).format(),\n              endDate: moment(this.endDate).add(48, 'hours').format()\n            }\n          } }\n        })\n        this.emails = data.integrationCommand.payload\n      } finally {\n        this.loading = false\n      }\n    }\n  },\n  async mounted () {\n    if (this.integrations.length === 0) {\n      await this.fetchTenantInfo()\n    }\n    const integration = this.integrations.find(i => {\n      return i.key === 'sendgrid'\n    })\n    this.integrationId = integration.id\n    await this.getEmails()\n  },\n  computed: {\n    ...mapState({\n      integrations: state => {\n        return state.tenants.info.integrations\n      }\n    })\n  }\n\n}\n</script>\n\n<style>\n.link {\n  margin: auto;\n}\n</style>\n"],"sourceRoot":"src/views"}]}