{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/eslint-loader/index.js??ref--13-0!/Users/narfdre/Code/hexly/admin/src/apollo.js","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/apollo.js","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { ApolloClient } from 'apollo-client';\nimport { BatchHttpLink } from 'apollo-link-batch-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { setContext } from 'apollo-link-context';\nimport store from '@/store';\n\nfunction getAuth() {\n  // get the authentication token from local storage if it exists\n  var token = store.state.user.jwt; // return the headers to the context so httpLink can read them\n\n  return token ? \"Bearer \".concat(token) : undefined;\n} // Create the apollo client\n\n\nexport default function createApolloClient(_ref) {\n  var ssr = _ref.ssr,\n      base = _ref.base,\n      endpoints = _ref.endpoints,\n      persisting = _ref.persisting;\n  var httpLink = new BatchHttpLink({\n    // You should use an absolute URL here\n    uri: base + endpoints.graphql // fetch: customFetch\n\n  }); // HTTP Auth header injection\n\n  var authLink = setContext(function (_, _ref2) {\n    var _ref2$headers = _ref2.headers,\n        headers = _ref2$headers === void 0 ? {} : _ref2$headers;\n    var context = {\n      headers: _objectSpread({}, headers)\n    };\n    var authToken = getAuth();\n\n    if (authToken && authToken.trim().length > 0) {\n      context.headers.Authorization = authToken;\n    } else {\n      delete context.headers.Authorization;\n    }\n\n    return context;\n  }); // Concat all the http link parts\n\n  var link = authLink.concat(httpLink); // Apollo cache\n\n  var cache = new InMemoryCache();\n  var apolloClient = new ApolloClient({\n    link: link,\n    cache: cache,\n    connectToDevTools: process.env.NODE_ENV !== 'production'\n  });\n  return apolloClient;\n}",{"version":3,"sources":["/Users/narfdre/Code/hexly/admin/src/apollo.js"],"names":["ApolloClient","BatchHttpLink","InMemoryCache","setContext","store","getAuth","token","state","user","jwt","undefined","createApolloClient","ssr","base","endpoints","persisting","httpLink","uri","graphql","authLink","_","headers","context","authToken","trim","length","Authorization","link","concat","cache","apolloClient","connectToDevTools","process","env","NODE_ENV"],"mappings":";AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,SAASC,OAAT,GAAmB;AACjB;AACA,MAAMC,QAAQF,MAAMG,KAAN,CAAYC,IAAZ,CAAiBC,GAA/B,CAFiB,CAGjB;;AACA,SAAOH,yBAAkBA,KAAlB,IAA4BI,SAAnC;AACD,C,CAED;;;AACA,eAAe,SAASC,kBAAT,OAKZ;AAAA,MAJDC,GAIC,QAJDA,GAIC;AAAA,MAHDC,IAGC,QAHDA,IAGC;AAAA,MAFDC,SAEC,QAFDA,SAEC;AAAA,MADDC,UACC,QADDA,UACC;AACD,MAAIC,WAAW,IAAIf,aAAJ,CAAkB;AAC/B;AACAgB,SAAKJ,OAAOC,UAAUI,OAFS,CAG/B;;AAH+B,GAAlB,CAAf,CADC,CAOD;;AACA,MAAMC,WAAWhB,WAAW,UAACiB,CAAD,SAAyB;AAAA,8BAAnBC,OAAmB;AAAA,QAAnBA,OAAmB,8BAAT,EAAS;AACnD,QAAMC,UAAU;AACdD,iCACKA,OADL;AADc,KAAhB;AAKA,QAAME,YAAYlB,SAAlB;;AACA,QAAIkB,aAAaA,UAAUC,IAAV,GAAiBC,MAAjB,GAA0B,CAA3C,EAA8C;AAC5CH,cAAQD,OAAR,CAAgBK,aAAhB,GAAgCH,SAAhC;AACD,KAFD,MAEO;AACL,aAAOD,QAAQD,OAAR,CAAgBK,aAAvB;AACD;;AACD,WAAOJ,OAAP;AACD,GAbgB,CAAjB,CARC,CAuBD;;AACA,MAAMK,OAAOR,SAASS,MAAT,CAAgBZ,QAAhB,CAAb,CAxBC,CA0BD;;AACA,MAAMa,QAAQ,IAAI3B,aAAJ,EAAd;AAEA,MAAM4B,eAAe,IAAI9B,YAAJ,CAAiB;AACpC2B,cADoC;AAEpCE,gBAFoC;AAGpCE,uBAAmBC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB;AAHR,GAAjB,CAArB;AAMA,SAAOJ,YAAP;AACD","sourcesContent":["import { ApolloClient } from 'apollo-client'\nimport { BatchHttpLink } from 'apollo-link-batch-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { setContext } from 'apollo-link-context'\nimport store from '@/store'\n\nfunction getAuth() {\n  // get the authentication token from local storage if it exists\n  const token = store.state.user.jwt\n  // return the headers to the context so httpLink can read them\n  return token ? `Bearer ${token}` : undefined\n}\n\n// Create the apollo client\nexport default function createApolloClient({\n  ssr,\n  base,\n  endpoints,\n  persisting\n}) {\n  let httpLink = new BatchHttpLink({\n    // You should use an absolute URL here\n    uri: base + endpoints.graphql\n    // fetch: customFetch\n  })\n\n  // HTTP Auth header injection\n  const authLink = setContext((_, { headers = {} }) => {\n    const context = {\n      headers: {\n        ...headers\n      }\n    }\n    const authToken = getAuth()\n    if (authToken && authToken.trim().length > 0) {\n      context.headers.Authorization = authToken\n    } else {\n      delete context.headers.Authorization\n    }\n    return context\n  })\n\n  // Concat all the http link parts\n  const link = authLink.concat(httpLink)\n\n  // Apollo cache\n  const cache = new InMemoryCache()\n\n  const apolloClient = new ApolloClient({\n    link,\n    cache,\n    connectToDevTools: process.env.NODE_ENV !== 'production'\n  })\n\n  return apolloClient\n}\n"]}]}