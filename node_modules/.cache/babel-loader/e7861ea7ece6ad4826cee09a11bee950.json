{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/appointments/AppointmentsDashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/appointments/AppointmentsDashboard.vue","mtime":1552022137000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _toConsumableArray from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapActions } from 'vuex';\nimport { UsersActions } from '@/users/UsersStore';\nimport { appointmentSearch } from '@/appointments/appointments.gql';\nexport default {\n  data: function data() {\n    return {\n      valid: true,\n      term: '',\n      tags: [],\n      results: []\n    };\n  },\n  methods: _objectSpread({}, mapActions([UsersActions.PUSH_APT_SEARCH]), {\n    open: function open(item) {\n      var _item$appointment = item.appointment,\n          appointment = _item$appointment === void 0 ? {} : _item$appointment,\n          _item$booking = item.booking,\n          booking = _item$booking === void 0 ? {} : _item$booking;\n      var aid = appointment ? appointment.id : '';\n      var bid = booking ? booking.id : '';\n\n      var searchItem = _objectSpread({}, item, {\n        id: aid + '_' + bid\n      });\n\n      this.pushAppointment(searchItem);\n      this.$router.push(\"/appointments/\".concat(aid, \"_\").concat(bid));\n    },\n    search: function () {\n      var _search = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var term, _ref, data;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                term = this.term;\n                _context.next = 3;\n                return this.$apollo.query({\n                  query: appointmentSearch,\n                  variables: {\n                    input: {\n                      term: term,\n                      page: 1,\n                      pageSize: 100\n                    }\n                  },\n                  fetchPolicy: 'network-only'\n                });\n\n              case 3:\n                _ref = _context.sent;\n                data = _ref.data;\n                this.results = data.appointmentSearch;\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function search() {\n        return _search.apply(this, arguments);\n      }\n\n      return search;\n    }(),\n    remove: function remove(item) {\n      this.tags.splice(this.tags.indexOf(item), 1);\n      this.tags = _toConsumableArray(this.tags);\n    }\n  }),\n  computed: _objectSpread({}, mapState({\n    searched: function searched(state) {\n      return state.users.searchedAppointment;\n    }\n  }))\n};",{"version":3,"sources":["AppointmentsDashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA,SAAA,QAAA,EAAA,UAAA,QAAA,MAAA;AACA,SAAA,YAAA,QAAA,oBAAA;AACA,SAAA,iBAAA,QAAA,iCAAA;AAEA,eAAA;AACA,MADA,kBACA;AACA,WAAA;AACA,aAAA,IADA;AAEA,YAAA,EAFA;AAGA,YAAA,EAHA;AAIA,eAAA;AAJA,KAAA;AAMA,GARA;AASA,6BACA,WAAA,CAAA,aAAA,eAAA,CAAA,CADA;AAEA,QAFA,gBAEA,IAFA,EAEA;AAAA,8BACA,IADA,CACA,WADA;AAAA,UACA,WADA,kCACA,EADA;AAAA,0BACA,IADA,CACA,OADA;AAAA,UACA,OADA,8BACA,EADA;AAEA,UAAA,MAAA,cAAA,YAAA,EAAA,GAAA,EAAA;AACA,UAAA,MAAA,UAAA,QAAA,EAAA,GAAA,EAAA;;AAEA,UAAA,+BACA,IADA;AAEA,YAAA,MAAA,GAAA,GAAA;AAFA,QAAA;;AAIA,WAAA,eAAA,CAAA,UAAA;AACA,WAAA,OAAA,CAAA,IAAA,yBAAA,GAAA,cAAA,GAAA;AACA,KAbA;AAcA,UAdA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAeA,oBAfA,GAeA,IAfA,CAeA,IAfA;AAAA;AAAA,uBAgBA,KAAA,OAAA,CAAA,KAAA,CAAA;AACA,yBAAA,iBADA;AAEA,6BAAA;AAAA,2BAAA;AAAA,4BAAA,IAAA;AAAA,4BAAA,CAAA;AAAA,gCAAA;AAAA;AAAA,mBAFA;AAGA,+BAAA;AAHA,iBAAA,CAhBA;;AAAA;AAAA;AAgBA,oBAhBA,QAgBA,IAhBA;AAqBA,qBAAA,OAAA,GAAA,KAAA,iBAAA;;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAuBA,UAvBA,kBAuBA,IAvBA,EAuBA;AACA,WAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,EAAA,CAAA;AACA,WAAA,IAAA,sBAAA,KAAA,IAAA;AACA;AA1BA,IATA;AAqCA,8BACA,SAAA;AACA,cAAA;AAAA,aAAA,MAAA,KAAA,CAAA,mBAAA;AAAA;AADA,GAAA,CADA;AArCA,CAAA","sourcesContent":["<template>\n  <v-card>\n    <v-card-title primary-title>\n      <v-flex xs12>\n        <v-form ref=\"form\" v-model=\"valid\" lazy-validation @submit.prevent=\"search()\">\n          <v-layout>\n            <v-flex xs9>\n              <v-flex xs12>\n                <v-text-field\n                  required\n                  v-model=\"term\"\n                  label=\"Search Term\"\n                  v-on:keyup.enter=\"search()\"\n                ></v-text-field>\n              </v-flex>\n            </v-flex>\n            <v-flex d-flex xs3 child-flex>\n              <v-btn :disabled=\"!valid\" class=\"full-height\" @click=\"search()\">submit</v-btn>\n            </v-flex>\n          </v-layout>\n        </v-form>\n      </v-flex>\n    </v-card-title>\n    <!-- Sear h Results -->\n    <v-card-text>\n      <v-list two-line>\n        <template v-for=\"item in results.results\">\n          <v-layout :key=\"item.id\">\n            <v-list-tile :key=\"item.id\" avatar @click=\"open(item)\">\n              <v-list-tile-avatar>\n                <v-icon>calendar_today</v-icon>\n              </v-list-tile-avatar>\n              <v-list-tile-content>\n                <v-list-tile-title v-if=\"item.appointment\">Appointment ID: {{item.appointment.id}}</v-list-tile-title>\n                <v-list-tile-title v-else-if=\"item.booking\">Booking ID: {{item.booking.id}}</v-list-tile-title>\n                <v-list-tile-sub-title>\n                  <v-layout row wrap>\n                    <v-flex xs3 sm3 v-if=\"item.appointment\">Host: {{item.appointment.host.firstName}}</v-flex>\n                    <v-flex xs3 sm3 v-else-if=\"item.booking\">Host: {{item.booking.host.firstName}}</v-flex>\n                  </v-layout>\n                </v-list-tile-sub-title>\n              </v-list-tile-content>\n            </v-list-tile>\n          </v-layout>\n        </template>\n      </v-list>\n    </v-card-text>\n  </v-card>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'vuex'\nimport { UsersActions } from '@/users/UsersStore'\nimport { appointmentSearch } from '@/appointments/appointments.gql'\n\nexport default {\n  data() {\n    return {\n      valid: true,\n      term: '',\n      tags: [],\n      results: []\n    }\n  },\n  methods: {\n    ...mapActions([UsersActions.PUSH_APT_SEARCH]),\n    open(item) {\n      const { appointment = {}, booking = {} } = item\n      const aid = appointment ? appointment.id : ''\n      const bid = booking ? booking.id : ''\n\n      const searchItem = {\n        ...item,\n        id: aid + '_' + bid\n      }\n      this.pushAppointment(searchItem)\n      this.$router.push(`/appointments/${aid}_${bid}`)\n    },\n    async search() {\n      const { term } = this\n      const { data } = await this.$apollo.query({\n        query: appointmentSearch,\n        variables: { input: { term: term, page: 1, pageSize: 100 } },\n        fetchPolicy: 'network-only'\n      })\n      this.results = data.appointmentSearch\n    },\n    remove(item) {\n      this.tags.splice(this.tags.indexOf(item), 1)\n      this.tags = [...this.tags]\n    }\n  },\n  computed: {\n    ...mapState({\n      searched: state => state.users.searchedAppointment\n    })\n  }\n}\n</script>\n\n<style>\n.full-height {\n  height: 77% !important;\n}\n</style>\n"],"sourceRoot":"src/views/appointments"}]}