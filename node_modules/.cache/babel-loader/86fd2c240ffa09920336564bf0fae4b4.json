{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/eslint-loader/index.js??ref--13-0!/Users/narfdre/Code/hexly/admin/src/appointments/AppointmentService.js","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/appointments/AppointmentService.js","mtime":1554331296000},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { pathOr } from 'ramda';\nimport { apolloClient } from '@/vue-apollo';\n\nvar gql = require(\"./appointments.gql\"); // const doQuery = (query, args) =>\n//   apolloClient.query({\n//     query,\n//     variables: args,\n//     fetchPolicy: 'no-cache'\n//   })\n\n\nvar doMutate = function doMutate(mutation, args) {\n  return apolloClient.mutate({\n    mutation: mutation,\n    variables: args\n  });\n};\n\nexport var upsert =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(params) {\n    var result;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return doMutate(gql.upsert, {\n              input: params\n            });\n\n          case 2:\n            result = _context.sent;\n            return _context.abrupt(\"return\", pathOr(undefined, ['data', 'upsertAppointment'], result));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function upsert(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();",{"version":3,"sources":["/Users/narfdre/Code/hexly/admin/src/appointments/AppointmentService.js"],"names":["pathOr","apolloClient","gql","require","doMutate","mutation","args","mutate","variables","upsert","params","input","result","undefined"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,SAASC,YAAT,QAA6B,cAA7B;;AACA,IAAMC,MAAMC,6BAAZ,C,CAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAMC,WAAW,SAAXA,QAAW,CAACC,QAAD,EAAWC,IAAX;AAAA,SACfL,aAAaM,MAAb,CAAoB;AAClBF,sBADkB;AAElBG,eAAWF;AAFO,GAApB,CADe;AAAA,CAAjB;;AAMA,OAAO,IAAMG;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAS,iBAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACCN,SAASF,IAAIO,MAAb,EAAqB;AACxCE,qBAAOD;AADiC,aAArB,CADD;;AAAA;AACdE,kBADc;AAAA,6CAIbZ,OAAOa,SAAP,EAAkB,CAAC,MAAD,EAAS,mBAAT,CAAlB,EAAiDD,MAAjD,CAJa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAT;;AAAA;AAAA;AAAA;AAAA,GAAN","sourcesContent":["import { pathOr } from 'ramda'\nimport { apolloClient } from '@/vue-apollo'\nconst gql = require('./appointments.gql')\n\n// const doQuery = (query, args) =>\n//   apolloClient.query({\n//     query,\n//     variables: args,\n//     fetchPolicy: 'no-cache'\n//   })\n\nconst doMutate = (mutation, args) =>\n  apolloClient.mutate({\n    mutation,\n    variables: args\n  })\n\nexport const upsert = async params => {\n  const result = await doMutate(gql.upsert, {\n    input: params\n  })\n  return pathOr(undefined, ['data', 'upsertAppointment'], result)\n}\n"]}]}