{"remainingRequest":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js!/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narfdre/Code/hexly/admin/src/views/awards/Awards.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/narfdre/Code/hexly/admin/src/views/awards/Awards.vue","mtime":1581109049514},{"path":"/Users/narfdre/Code/hexly/admin/.babelrc","mtime":1546923832000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narfdre/Code/hexly/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/narfdre/Code/hexly/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Verte from 'verte';\nimport 'verte/dist/verte.css';\nimport icons from \"./icons\";\nimport { GET_ALL_AWARDS, SAVE_AWARD } from '@/graphql/Awards.gql.js';\nimport { cloneDeep } from 'lodash';\nexport default {\n  name: 'Awards',\n  components: {\n    Verte: Verte\n  },\n  data: function data() {\n    return {\n      awards: [],\n      createAward: null,\n      awardBlueprint: {\n        name: '',\n        key: '',\n        metadata: {\n          icon: 'star',\n          text: 'black',\n          color: '#e0e0e0',\n          accent: '#a0a0a0'\n        },\n        config: {}\n      },\n      showNewAward: false,\n      filter: '',\n      icons: icons\n    };\n  },\n  methods: {\n    saveAward: function () {\n      var _saveAward = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log('saving', this.createAward);\n                _context.next = 3;\n                return this.$apollo.mutate({\n                  mutation: SAVE_AWARD,\n                  variables: {\n                    input: {\n                      id: this.createAward.id,\n                      key: this.createAward.key,\n                      name: this.createAward.name,\n                      config: this.createAward.config,\n                      metadata: this.createAward.metadata\n                    }\n                  }\n                });\n\n              case 3:\n                _context.next = 5;\n                return this.$apollo.queries.awards.refetch();\n\n              case 5:\n                this.showNewAward = false;\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function saveAward() {\n        return _saveAward.apply(this, arguments);\n      }\n\n      return saveAward;\n    }(),\n    editAward: function editAward(award) {\n      this.showNewAward = true;\n      this.createAward = cloneDeep(award);\n    }\n  },\n  apollo: {\n    awards: {\n      query: GET_ALL_AWARDS,\n      update: function update(_ref) {\n        var recognitionGetAllAwards = _ref.recognitionGetAllAwards;\n        return recognitionGetAllAwards;\n      }\n    }\n  }\n};",{"version":3,"sources":["Awards.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0FA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,sBAAA;AACA,OAAA,KAAA;AACA,SAAA,cAAA,EAAA,UAAA,QAAA,yBAAA;AACA,SAAA,SAAA,QAAA,QAAA;AACA,eAAA;AACA,QAAA,QADA;AAEA,cAAA;AACA;AADA,GAFA;AAKA,MALA,kBAKA;AACA,WAAA;AACA,cAAA,EADA;AAEA,mBAAA,IAFA;AAGA,sBAAA;AACA,cAAA,EADA;AAEA,aAAA,EAFA;AAGA,kBAAA;AACA,gBAAA,MADA;AAEA,gBAAA,OAFA;AAGA,iBAAA,SAHA;AAIA,kBAAA;AAJA,SAHA;AASA,gBAAA;AATA,OAHA;AAcA,oBAAA,KAdA;AAeA,cAAA,EAfA;AAgBA;AAhBA,KAAA;AAkBA,GAxBA;AAyBA,WAAA;AACA,aADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,wBAAA,GAAA,CAAA,QAAA,EAAA,KAAA,WAAA;AAFA;AAAA,uBAGA,KAAA,OAAA,CAAA,MAAA,CAAA;AACA,4BAAA,UADA;AAEA,6BAAA;AACA,2BAAA;AACA,0BAAA,KAAA,WAAA,CAAA,EADA;AAEA,2BAAA,KAAA,WAAA,CAAA,GAFA;AAGA,4BAAA,KAAA,WAAA,CAAA,IAHA;AAIA,8BAAA,KAAA,WAAA,CAAA,MAJA;AAKA,gCAAA,KAAA,WAAA,CAAA;AALA;AADA;AAFA,iBAAA,CAHA;;AAAA;AAAA;AAAA,uBAeA,KAAA,OAAA,CAAA,OAAA,CAAA,MAAA,CAAA,OAAA,EAfA;;AAAA;AAgBA,qBAAA,YAAA,GAAA,KAAA;;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAkBA,aAlBA,qBAkBA,KAlBA,EAkBA;AACA,WAAA,YAAA,GAAA,IAAA;AACA,WAAA,WAAA,GAAA,UAAA,KAAA,CAAA;AACA;AArBA,GAzBA;AAgDA,UAAA;AACA,YAAA;AACA,aAAA,cADA;AAEA,YAFA,wBAEA;AAAA,YAAA,uBAAA,QAAA,uBAAA;AACA,eAAA,uBAAA;AACA;AAJA;AADA;AAhDA,CAAA","sourcesContent":["<template>\n  <div class=\"pa-3\">\n    <v-layout row>\n      <v-flex xs12 sm6 offset-sm3>\n        <v-card>\n          <v-toolbar color=\"teal\" dark>\n            <v-toolbar-title class=\"text-xs-center\">Awards</v-toolbar-title>\n            <v-spacer></v-spacer>\n            <v-btn icon @click=\"editAward(awardBlueprint)\">\n              <v-icon>add</v-icon>\n            </v-btn>\n          </v-toolbar>\n          <template v-if=\"showNewAward\">\n            <h2>Create New Award</h2>\n            <v-layout row wrap >\n              <v-flex xs12 sm5>\n                <v-chip :color=\"createAward.metadata.color\" :text-color=\"createAward.metadata.text\">\n                  <v-avatar :color=\"createAward.metadata.accent\">\n                    <v-icon>{{createAward.metadata.icon}}</v-icon>\n                  </v-avatar>\n                  {{createAward.name}}\n                </v-chip>\n              </v-flex>\n              <v-flex xs12 sm6>\n                <v-text-field\n                  solo\n                  label=\"name\"\n                  v-model=\"createAward.name\"\n                />\n                <v-text-field\n                  solo\n                  label=\"key\"\n                  v-model=\"createAward.key\"\n                />\n                <v-layout row py-2 my-2 text-xs-center>\n                  <v-flex>\n                    <h4>Color</h4>\n                    <verte v-model=\"createAward.metadata.color\" :showHistory=\"null\" model=\"hex\"></verte>\n                  </v-flex>\n                  <v-flex>\n                    <h4>Text</h4>\n                    <verte v-model=\"createAward.metadata.text\" :showHistory=\"null\" model=\"hex\"></verte>\n                  </v-flex>\n                  <v-flex>\n                    <h4>Accent</h4>\n                    <verte v-model=\"createAward.metadata.accent\" :showHistory=\"null\" model=\"hex\"></verte>\n                  </v-flex>\n                </v-layout>\n                <v-combobox\n                  v-model=\"createAward.metadata.icon\"\n                  :items=\"icons\"\n                  label=\"Icons\"\n                  solo\n                >\n                  <template v-slot:selection=\"{ item, parent, selected }\">\n                    <v-btn>\n                      <v-icon left>{{ item }}</v-icon>\n                      {{item}}\n                    </v-btn>\n                  </template>\n                  <template v-slot:item=\"{ index, item }\">\n                      <v-btn>\n                        <v-icon left>{{ item }}</v-icon>\n                        {{item}}\n                      </v-btn>\n                  </template>\n                </v-combobox>\n              </v-flex>\n            </v-layout>\n            <v-btn color=\"success\" @click=\"saveAward\">\n              <v-icon left>save</v-icon> Create Award\n            </v-btn>\n            <v-divider></v-divider>\n          </template>\n          <v-layout row wrap ma-3 text-xs-center>\n            <v-flex  v-for=\"award in awards\" :key=\"award.id\">\n              <v-chip @click=\"editAward(award)\" :color=\"award.metadata.color\" :text-color=\"award.metadata.text\">\n                <v-avatar :color=\"award.metadata.accent\">\n                  <v-icon>{{award.metadata.icon}}</v-icon>\n                </v-avatar>\n                {{award.name}}\n              </v-chip>\n            </v-flex>\n          </v-layout>\n        </v-card>\n      </v-flex>\n    </v-layout>\n  </div>\n</template>\n<script>\nimport Verte from 'verte'\nimport 'verte/dist/verte.css'\nimport icons from './icons'\nimport { GET_ALL_AWARDS, SAVE_AWARD } from '@/graphql/Awards.gql.js'\nimport { cloneDeep } from 'lodash'\nexport default {\n  name: 'Awards',\n  components: {\n    Verte\n  },\n  data() {\n    return {\n      awards: [],\n      createAward: null,\n      awardBlueprint: {\n        name: '',\n        key: '',\n        metadata: {\n          icon: 'star',\n          text: 'black',\n          color: '#e0e0e0',\n          accent: '#a0a0a0'\n        },\n        config: {}\n      },\n      showNewAward: false,\n      filter: '',\n      icons\n    }\n  },\n  methods: {\n    async saveAward() {\n      console.log('saving', this.createAward)\n      await this.$apollo.mutate({\n        mutation: SAVE_AWARD,\n        variables: {\n          input: {\n            id: this.createAward.id,\n            key: this.createAward.key,\n            name: this.createAward.name,\n            config: this.createAward.config,\n            metadata: this.createAward.metadata\n          }\n        }\n      })\n      await this.$apollo.queries.awards.refetch()\n      this.showNewAward = false\n    },\n    editAward(award) {\n      this.showNewAward = true\n      this.createAward = cloneDeep(award)\n    }\n  },\n  apollo: {\n    awards: {\n      query: GET_ALL_AWARDS,\n      update({ recognitionGetAllAwards }) {\n        return recognitionGetAllAwards\n      }\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src/views/awards"}]}